import sys

sys.path.append(r'..')


from datasets.create_datasets import CreateDataset
from test_programs.test_program import sig_classification, hyp_classification
from MRs.linear_MRs import LinearMRs

from sklearn.linear_model import LogisticRegression
from sklearn import svm
from sklearn.svm import LinearSVC

from algorithms.Logistic_regression.GD import *
from algorithms.Logistic_regression.Newton import *
from algorithms.Svm.APG.L1 import *
from algorithms.Svm.APG.L2 import *
from algorithms.Svm.IPM.L1 import *
from algorithms.Svm.IPM.L2 import *
import numpy as np
#np.random.seed(1)

if __name__ == '__main__':

	#n_train, n_test, n_features, n_redundant, n_classes, neg_class(算法是svm时 neg_class = -1, 算法是logreg时， neg_class = 0)
	
	datasets = CreateDataset(80,20,2,0,2,-1)

	print("APG_L1_m11")
	lr = APG_L1_m11()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m12")
	lr = APG_L1_m12()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m13")
	lr = APG_L1_m13()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m14")
	lr = APG_L1_m14()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m15")
	lr = APG_L1_m15()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m16")
	lr = APG_L1_m16()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m17")
	lr = APG_L1_m17()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m18")
	lr = APG_L1_m18()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m19")
	lr = APG_L1_m19()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m20")
	lr = APG_L1_m20()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m21")
	lr = APG_L1_m21()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m22")
	lr = APG_L1_m22()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m23")
	lr = APG_L1_m23()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m24")
	lr = APG_L1_m24()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m25")
	lr = APG_L1_m25()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m26")
	lr = APG_L1_m26()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m27")
	lr = APG_L1_m27()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m28")
	lr = APG_L1_m28()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m29")
	lr = APG_L1_m29()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m30")
	lr = APG_L1_m30()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m31")
	lr = APG_L1_m31()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m32")
	lr = APG_L1_m32()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m33")
	lr = APG_L1_m33()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m34")
	lr = APG_L1_m34()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m35")
	lr = APG_L1_m35()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m36")
	lr = APG_L1_m36()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m37")
	lr = APG_L1_m37()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m38")
	lr = APG_L1_m38()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m39")
	lr = APG_L1_m39()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m40")
	lr = APG_L1_m40()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m41")
	lr = APG_L1_m41()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m42")
	lr = APG_L1_m42()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m43")
	lr = APG_L1_m43()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m44")
	lr = APG_L1_m44()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m45")
	lr = APG_L1_m45()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m46")
	lr = APG_L1_m46()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m47")
	lr = APG_L1_m47()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m48")
	lr = APG_L1_m48()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m49")
	lr = APG_L1_m49()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m50")
	lr = APG_L1_m50()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m51")
	lr = APG_L1_m51()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m52")
	lr = APG_L1_m52()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m53")
	lr = APG_L1_m53()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m54")
	lr = APG_L1_m54()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m55")
	lr = APG_L1_m55()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m56")
	lr = APG_L1_m56()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m57")
	lr = APG_L1_m57()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m58")
	lr = APG_L1_m58()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m59")
	lr = APG_L1_m59()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()

	print("APG_L1_m60")
	lr = APG_L1_m60()
	test = LinearMRs(lr.fit, datasets.classification2, hyp_classification,30)
	test.MR1()
	test.MR2()
	test.MR3()
	test.MR4()
	test.MR5()
	test.MR6()
	test.MR7()
	test.MR8()
	test.MR9()


	#test = LinearMRs(lr.fit, datasets.classification, sig_classification, 50)

	#test.MR1()
	#test.MR2()
	#test.MR3()
	#test.MR4()
	#test.MR5()
	#test.MR6()
	#test.MR7()
	#test.MR8()
	#test.MR9()
	#lr = LR_GA_gv()
	#test = LinearMRs(lr.fit, datasets.classification, sig_classification, 100)
	#test.MR7()
	
	#datasets = CreateDataset(20,5,2,0,2,-1)
	#X_train, y_train, X_test, y_test = datasets.classification()
	#lr = SVM_CVX_L1_gv()
	#clf = lr.fit(X_train, y_train)
	#err, pred, conf = hyp_classification(clf.coef_, clf.intercept_, X_test, y_test)
	#print(err)