Survived ?? (141)

---- algorithms\SQP_L2_gv.py (141) ----

# mutant 7
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -12,7 +12,7 @@
     X = np.column_stack((X, np.ones((m, 1))))
     y = y.astype(np.float64)
     data_num = len(y)
-    C = 1.0
+    C = -2.307096375931245
     kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))

# mutant 9
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -13,7 +13,7 @@
     y = y.astype(np.float64)
     data_num = len(y)
     C = 1.0
-    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    kernel = np.dot(13.01599186417635*X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))


# mutant 10
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -13,7 +13,7 @@
     y = y.astype(np.float64)
     data_num = len(y)
     C = 1.0
-    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    kernel = np.dot(X+4.238789712688529, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))


# mutant 11
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -13,7 +13,7 @@
     y = y.astype(np.float64)
     data_num = len(y)
     C = 1.0
-    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    kernel = np.dot(X, np.transpose(X)) - np.diag(np.ones(data_num, np.float64)) * .5/C
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))


# mutant 14
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -13,7 +13,7 @@
     y = y.astype(np.float64)
     data_num = len(y)
     C = 1.0
-    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) / .5/C
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))


# mutant 15
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -13,7 +13,7 @@
     y = y.astype(np.float64)
     data_num = len(y)
     C = 1.0
-    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * -3.4732173914006976/C
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))


# mutant 16
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -13,7 +13,7 @@
     y = y.astype(np.float64)
     data_num = len(y)
     C = 1.0
-    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5*C
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))


# mutant 17
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -13,7 +13,7 @@
     y = y.astype(np.float64)
     data_num = len(y)
     C = 1.0
-    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/7.073944605820517*C
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))


# mutant 18
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -13,7 +13,7 @@
     y = y.astype(np.float64)
     data_num = len(y)
     C = 1.0
-    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C+8.692155656663207
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))


# mutant 21
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -14,7 +14,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
-    p = np.matrix(np.multiply(kernel, np.outer(y, y)))
+    p = np.matrix(np.multiply(kernel, np.outer(y-7.857371165807663, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))



# mutant 23
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -14,7 +14,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
-    p = np.matrix(np.multiply(kernel, np.outer(y, y)))
+    p = np.matrix(np.multiply(kernel, np.outer(y,y+0.3911953824257072)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))



# mutant 25
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -14,7 +14,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
-    p = np.matrix(np.multiply(kernel, np.outer(y, y)))
+    p = np.matrix(np.multiply(kernel+8.553301901378635, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))



# mutant 27
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -15,7 +15,7 @@
     C = 1.0
     kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
-    q = np.matrix(-np.ones([data_num, 1], np.float64))
+    q = np.matrix(+np.ones([data_num, 1], np.float64))


     bounds = (0, np.inf)

# mutant 30
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -18,7 +18,7 @@
     q = np.matrix(-np.ones([data_num, 1], np.float64))


-    bounds = (0, np.inf)
+    bounds = (2.5855140612035954, np.inf)

     low, up = bounds
     x = np.zeros([m, 1])

# mutant 35
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -22,7 +22,7 @@

     low, up = bounds
     x = np.zeros([m, 1])
-    l = 0.001
+    l = -1.171066991131906

     for k in range(5000):  # heavy on matrix operations
         g0 = p*x + q

# mutant 39
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -25,7 +25,7 @@
     l = 0.001

     for k in range(5000):  # heavy on matrix operations
-        g0 = p*x + q
+        g0 = p*x - q
         # saving previous x
         x = x - l * g0
         x[x < low] = low

# mutant 40
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -25,7 +25,7 @@
     l = 0.001

     for k in range(5000):  # heavy on matrix operations
-        g0 = p*x + q
+        g0 =-7.297506581680789*p*x + q
         # saving previous x
         x = x - l * g0
         x[x < low] = low

# mutant 42
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -25,7 +25,7 @@
     l = 0.001

     for k in range(5000):  # heavy on matrix operations
-        g0 = p*x + q
+        g0 = p*9.56689389047528*x + q
         # saving previous x
         x = x - l * g0
         x[x < low] = low

# mutant 43
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -25,7 +25,7 @@
     l = 0.001

     for k in range(5000):  # heavy on matrix operations
-        g0 = p*x + q
+        g0 = p*x-6.203075403542727 + q
         # saving previous x
         x = x - l * g0
         x[x < low] = low

# mutant 44
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -25,7 +25,7 @@
     l = 0.001

     for k in range(5000):  # heavy on matrix operations
-        g0 = p*x + q
+        g0 = p*x +3.7197897523324426*q
         # saving previous x
         x = x - l * g0
         x[x < low] = low

# mutant 45
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -25,7 +25,7 @@
     l = 0.001

     for k in range(5000):  # heavy on matrix operations
-        g0 = p*x + q
+        g0 = p*x +q+9.340733134343802
         # saving previous x
         x = x - l * g0
         x[x < low] = low

# mutant 47
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -27,7 +27,7 @@
     for k in range(5000):  # heavy on matrix operations
         g0 = p*x + q
         # saving previous x
-        x = x - l * g0
+        x = x + l * g0
         x[x < low] = low
         x[x > up] = up


# mutant 48
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -27,7 +27,7 @@
     for k in range(5000):  # heavy on matrix operations
         g0 = p*x + q
         # saving previous x
-        x = x - l * g0
+        x = x - l / g0
         x[x < low] = low
         x[x > up] = up


# mutant 49
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -27,7 +27,7 @@
     for k in range(5000):  # heavy on matrix operations
         g0 = p*x + q
         # saving previous x
-        x = x - l * g0
+        x =-4.1362563629458755*x - l * g0
         x[x < low] = low
         x[x > up] = up


# mutant 50
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -27,7 +27,7 @@
     for k in range(5000):  # heavy on matrix operations
         g0 = p*x + q
         # saving previous x
-        x = x - l * g0
+        x =x+14.142018931570053 - l * g0
         x[x < low] = low
         x[x > up] = up


# mutant 51
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -27,7 +27,7 @@
     for k in range(5000):  # heavy on matrix operations
         g0 = p*x + q
         # saving previous x
-        x = x - l * g0
+        x = x -7.279316257371637*l * g0
         x[x < low] = low
         x[x > up] = up


# mutant 52
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -27,7 +27,7 @@
     for k in range(5000):  # heavy on matrix operations
         g0 = p*x + q
         # saving previous x
-        x = x - l * g0
+        x = x -l+16.196916401510105 * g0
         x[x < low] = low
         x[x > up] = up


# mutant 53
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -27,7 +27,7 @@
     for k in range(5000):  # heavy on matrix operations
         g0 = p*x + q
         # saving previous x
-        x = x - l * g0
+        x = x - l *-1.4655349427918778*g0
         x[x < low] = low
         x[x > up] = up


# mutant 54
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -27,7 +27,7 @@
     for k in range(5000):  # heavy on matrix operations
         g0 = p*x + q
         # saving previous x
-        x = x - l * g0
+        x = x - l *g0-11.834139583548502
         x[x < low] = low
         x[x > up] = up


# mutant 56
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -28,7 +28,7 @@
         g0 = p*x + q
         # saving previous x
         x = x - l * g0
-        x[x < low] = low
+        x[x <= low] = low
         x[x > up] = up



# mutant 57
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -28,7 +28,7 @@
         g0 = p*x + q
         # saving previous x
         x = x - l * g0
-        x[x < low] = low
+        x[x < low] = None
         x[x > up] = up



# mutant 58
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -29,7 +29,7 @@
         # saving previous x
         x = x - l * g0
         x[x < low] = low
-        x[x > up] = up
+        x[x >= up] = up


         dual = -(0.5*x.T*(p*x) + q.T*x)

# mutant 59
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -29,7 +29,7 @@
         # saving previous x
         x = x - l * g0
         x[x < low] = low
-        x[x > up] = up
+        x[x > up] = None


         dual = -(0.5*x.T*(p*x) + q.T*x)

# mutant 60
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -32,7 +32,7 @@
         x[x > up] = up


-        dual = -(0.5*x.T*(p*x) + q.T*x)
+        dual = +(0.5*x.T*(p*x) + q.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 61
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -32,7 +32,7 @@
         x[x > up] = up


-        dual = -(0.5*x.T*(p*x) + q.T*x)
+        dual = -(19.88492421292387*x.T*(p*x) + q.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 62
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -32,7 +32,7 @@
         x[x > up] = up


-        dual = -(0.5*x.T*(p*x) + q.T*x)
+        dual = -(0.5/x.T*(p*x) + q.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 65
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -32,7 +32,7 @@
         x[x > up] = up


-        dual = -(0.5*x.T*(p*x) + q.T*x)
+        dual = -(0.5*x.T*(p*x) - q.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 67
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -32,7 +32,7 @@
         x[x > up] = up


-        dual = -(0.5*x.T*(p*x) + q.T*x)
+        dual = -(0.5*x.T*(-6.873622158037243*p*x) + q.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 69
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -32,7 +32,7 @@
         x[x > up] = up


-        dual = -(0.5*x.T*(p*x) + q.T*x)
+        dual = -(0.5*x.T*(p*6.642105528033233*x) + q.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 70
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -32,7 +32,7 @@
         x[x > up] = up


-        dual = -(0.5*x.T*(p*x) + q.T*x)
+        dual = -(0.5*x.T*(p*x+7.490379095869097) + q.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 71
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -32,7 +32,7 @@
         x[x > up] = up


-        dual = -(0.5*x.T*(p*x) + q.T*x)
+        dual = -(0.5*x.T*(p*x) + q.T*1.528608092194285*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 72
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -32,7 +32,7 @@
         x[x > up] = up


-        dual = -(0.5*x.T*(p*x) + q.T*x)
+        dual = -(0.5*x.T*(p*x) + q.T*x+3.1342097768214483)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 74
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -33,7 +33,7 @@


         dual = -(0.5*x.T*(p*x) + q.T*x)
-        dual = dual.item()
+        dual = None
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)

# mutant 78
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -34,7 +34,7 @@

         dual = -(0.5*x.T*(p*x) + q.T*x)
         dual = dual.item()
-        y1 = np.reshape(y, (-1, 1))
+        y1 = np.reshape(-21.60317365907783*y, (-1, 1))
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)

# mutant 79
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -34,7 +34,7 @@

         dual = -(0.5*x.T*(p*x) + q.T*x)
         dual = dual.item()
-        y1 = np.reshape(y, (-1, 1))
+        y1 = np.reshape(y+6.272984761865288, (-1, 1))
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)

# mutant 81
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -35,7 +35,7 @@
         dual = -(0.5*x.T*(p*x) + q.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
-        lambda1 = np.multiply(x, y1)
+        lambda1 = np.multiply(1.85231062403761*x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)

# mutant 82
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -35,7 +35,7 @@
         dual = -(0.5*x.T*(p*x) + q.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
-        lambda1 = np.multiply(x, y1)
+        lambda1 = np.multiply(x+15.781876400436891, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)

# mutant 83
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -35,7 +35,7 @@
         dual = -(0.5*x.T*(p*x) + q.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
-        lambda1 = np.multiply(x, y1)
+        lambda1 = np.multiply(x,-9.055737441087201*y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)

# mutant 84
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -35,7 +35,7 @@
         dual = -(0.5*x.T*(p*x) + q.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
-        lambda1 = np.multiply(x, y1)
+        lambda1 = np.multiply(x,y1+11.633121069406496)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)

# mutant 86
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -36,7 +36,7 @@
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)
-        w = np.dot(X.T, lambda1)
+        w = np.dot(X.T,-0.16147298308808328*lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
         primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)

# mutant 87
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -36,7 +36,7 @@
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)
-        w = np.dot(X.T, lambda1)
+        w = np.dot(X.T,lambda1-4.945343614754965)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
         primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)

# mutant 93
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -38,7 +38,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1-np.multiply(y1, X*w),0)
+        tmp = np.maximum(-19.153538720945825-np.multiply(y1, X*w),0)
         primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
         primal = primal.item()


# mutant 94
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -38,7 +38,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1-np.multiply(y1, X*w),0)
+        tmp = np.maximum(1+np.multiply(y1, X*w),0)
         primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
         primal = primal.item()


# mutant 96
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -38,7 +38,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1-np.multiply(y1, X*w),0)
+        tmp = np.maximum(1-np.multiply(4.712597718983899*y1, X*w),0)
         primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
         primal = primal.item()


# mutant 97
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -38,7 +38,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1-np.multiply(y1, X*w),0)
+        tmp = np.maximum(1-np.multiply(y1-3.169209544241994, X*w),0)
         primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
         primal = primal.item()


# mutant 98
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -38,7 +38,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1-np.multiply(y1, X*w),0)
+        tmp = np.maximum(1-np.multiply(y1, X*w),-6.833480438856093)
         primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
         primal = primal.item()


# mutant 100
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -39,7 +39,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
-        primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
+        primal = 15.866047707473795*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
         primal = primal.item()

         #if k % 10 == 0:

# mutant 101
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -39,7 +39,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
-        primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
+        primal = 0.5/np.linalg.norm(w)**2 + 1 * np.sum(tmp)
         primal = primal.item()

         #if k % 10 == 0:

# mutant 102
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -39,7 +39,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
-        primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
+        primal = 0.5*np.linalg.norm(w)*2 + 1 * np.sum(tmp)
         primal = primal.item()

         #if k % 10 == 0:

# mutant 103
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -39,7 +39,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
-        primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
+        primal = 0.5*np.linalg.norm(w)**8.060531112368846 + 1 * np.sum(tmp)
         primal = primal.item()

         #if k % 10 == 0:

# mutant 104
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -39,7 +39,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
-        primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
+        primal = 0.5*np.linalg.norm(w)**2 - 1 * np.sum(tmp)
         primal = primal.item()

         #if k % 10 == 0:

# mutant 105
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -39,7 +39,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
-        primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
+        primal = 0.5*np.linalg.norm(w)**2 + 3.9491228058774004 * np.sum(tmp)
         primal = primal.item()

         #if k % 10 == 0:

# mutant 106
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -39,7 +39,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
-        primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
+        primal = 0.5*np.linalg.norm(w)**2 + 1 / np.sum(tmp)
         primal = primal.item()

         #if k % 10 == 0:

# mutant 108
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -40,7 +40,7 @@
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
         primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
-        primal = primal.item()
+        primal = None

         #if k % 10 == 0:
         #    print('GD:', np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))

# mutant 111
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -48,7 +48,7 @@
     for k in range(max_iter):  # heavy on matrix operations
         for i in range(m):
             tmpx = x.copy()
-            tmpx[i, 0] = 0
+            tmpx[i, 0] = -2.031515571040976
             temp = (p[i, :] * tmpx) + q[i]
             # if temp > 0 and x[i] == 0:
                 # continue

# mutant 112
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -48,7 +48,7 @@
     for k in range(max_iter):  # heavy on matrix operations
         for i in range(m):
             tmpx = x.copy()
-            tmpx[i, 0] = 0
+            tmpx[i, 0] = None
             temp = (p[i, :] * tmpx) + q[i]
             # if temp > 0 and x[i] == 0:
                 # continue

# mutant 114
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -49,7 +49,7 @@
         for i in range(m):
             tmpx = x.copy()
             tmpx[i, 0] = 0
-            temp = (p[i, :] * tmpx) + q[i]
+            temp = (p[i, :] * tmpx) - q[i]
             # if temp > 0 and x[i] == 0:
                 # continue
             temp = temp.item()

# mutant 115
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -49,7 +49,7 @@
         for i in range(m):
             tmpx = x.copy()
             tmpx[i, 0] = 0
-            temp = (p[i, :] * tmpx) + q[i]
+            temp = (p[i, :] *7.108715253123203*tmpx) + q[i]
             # if temp > 0 and x[i] == 0:
                 # continue
             temp = temp.item()

# mutant 116
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -49,7 +49,7 @@
         for i in range(m):
             tmpx = x.copy()
             tmpx[i, 0] = 0
-            temp = (p[i, :] * tmpx) + q[i]
+            temp = (p[i, :] *tmpx+12.185417345707066) + q[i]
             # if temp > 0 and x[i] == 0:
                 # continue
             temp = temp.item()

# mutant 119
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -53,7 +53,7 @@
             # if temp > 0 and x[i] == 0:
                 # continue
             temp = temp.item()
-            if p[i, i] > 0:
+            if p[i, i] >= 0:
                 xi = -(temp / p[i, i]).item()
                 xi = np.maximum(low, xi)
             elif p[i, i] < 0:

# mutant 120
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -53,7 +53,7 @@
             # if temp > 0 and x[i] == 0:
                 # continue
             temp = temp.item()
-            if p[i, i] > 0:
+            if p[i, i] > -4.59180509521547:
                 xi = -(temp / p[i, i]).item()
                 xi = np.maximum(low, xi)
             elif p[i, i] < 0:

# mutant 121
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -54,7 +54,7 @@
                 # continue
             temp = temp.item()
             if p[i, i] > 0:
-                xi = -(temp / p[i, i]).item()
+                xi = +(temp / p[i, i]).item()
                 xi = np.maximum(low, xi)
             elif p[i, i] < 0:
                 xi = -1

# mutant 122
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -54,7 +54,7 @@
                 # continue
             temp = temp.item()
             if p[i, i] > 0:
-                xi = -(temp / p[i, i]).item()
+                xi = -(temp * p[i, i]).item()
                 xi = np.maximum(low, xi)
             elif p[i, i] < 0:
                 xi = -1

# mutant 124
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -55,7 +55,7 @@
             temp = temp.item()
             if p[i, i] > 0:
                 xi = -(temp / p[i, i]).item()
-                xi = np.maximum(low, xi)
+                xi = np.maximum(-26.08812517964942*low, xi)
             elif p[i, i] < 0:
                 xi = -1
                 print('error')

# mutant 125
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -55,7 +55,7 @@
             temp = temp.item()
             if p[i, i] > 0:
                 xi = -(temp / p[i, i]).item()
-                xi = np.maximum(low, xi)
+                xi = np.maximum(low-6.341764494066044, xi)
             elif p[i, i] < 0:
                 xi = -1
                 print('error')

# mutant 126
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -55,7 +55,7 @@
             temp = temp.item()
             if p[i, i] > 0:
                 xi = -(temp / p[i, i]).item()
-                xi = np.maximum(low, xi)
+                xi = np.maximum(low,-8.0842149838248*xi)
             elif p[i, i] < 0:
                 xi = -1
                 print('error')

# mutant 127
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -55,7 +55,7 @@
             temp = temp.item()
             if p[i, i] > 0:
                 xi = -(temp / p[i, i]).item()
-                xi = np.maximum(low, xi)
+                xi = np.maximum(low,xi+6.950031265658632)
             elif p[i, i] < 0:
                 xi = -1
                 print('error')

# mutant 128
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -55,7 +55,7 @@
             temp = temp.item()
             if p[i, i] > 0:
                 xi = -(temp / p[i, i]).item()
-                xi = np.maximum(low, xi)
+                xi = None
             elif p[i, i] < 0:
                 xi = -1
                 print('error')

# mutant 129
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -56,7 +56,7 @@
             if p[i, i] > 0:
                 xi = -(temp / p[i, i]).item()
                 xi = np.maximum(low, xi)
-            elif p[i, i] < 0:
+            elif p[i, i] <= 0:
                 xi = -1
                 print('error')
             else:

# mutant 130
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -56,7 +56,7 @@
             if p[i, i] > 0:
                 xi = -(temp / p[i, i]).item()
                 xi = np.maximum(low, xi)
-            elif p[i, i] < 0:
+            elif p[i, i] < 4.837987768483639:
                 xi = -1
                 print('error')
             else:

# mutant 131
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -57,7 +57,7 @@
                 xi = -(temp / p[i, i]).item()
                 xi = np.maximum(low, xi)
             elif p[i, i] < 0:
-                xi = -1
+                xi = +1
                 print('error')
             else:
                 if temp > 0:

# mutant 132
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -57,7 +57,7 @@
                 xi = -(temp / p[i, i]).item()
                 xi = np.maximum(low, xi)
             elif p[i, i] < 0:
-                xi = -1
+                xi = -3.6941923645362387
                 print('error')
             else:
                 if temp > 0:

# mutant 133
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -57,7 +57,7 @@
                 xi = -(temp / p[i, i]).item()
                 xi = np.maximum(low, xi)
             elif p[i, i] < 0:
-                xi = -1
+                xi = None
                 print('error')
             else:
                 if temp > 0:

# mutant 134
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -58,7 +58,7 @@
                 xi = np.maximum(low, xi)
             elif p[i, i] < 0:
                 xi = -1
-                print('error')
+                print('XXerrorXX')
             else:
                 if temp > 0:
                     xi = low

# mutant 135
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -60,7 +60,7 @@
                 xi = -1
                 print('error')
             else:
-                if temp > 0:
+                if temp >= 0:
                     xi = low
             x[i, 0] = xi


# mutant 136
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -60,7 +60,7 @@
                 xi = -1
                 print('error')
             else:
-                if temp > 0:
+                if temp > 9.860716024798448:
                     xi = low
             x[i, 0] = xi


# mutant 137
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -61,7 +61,7 @@
                 print('error')
             else:
                 if temp > 0:
-                    xi = low
+                    xi = None
             x[i, 0] = xi



# mutant 139
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -62,7 +62,7 @@
             else:
                 if temp > 0:
                     xi = low
-            x[i, 0] = xi
+            x[i, 0] = None


         # for u in range(m):

# mutant 140
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -88,7 +88,7 @@



-        dual = -(0.5 * x.T * (p * x) + q.T * x)
+        dual = +(0.5 * x.T * (p * x) + q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 141
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -88,7 +88,7 @@



-        dual = -(0.5 * x.T * (p * x) + q.T * x)
+        dual = -(-13.29703220480451 * x.T * (p * x) + q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 142
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -88,7 +88,7 @@



-        dual = -(0.5 * x.T * (p * x) + q.T * x)
+        dual = -(0.5 / x.T * (p * x) + q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 145
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -88,7 +88,7 @@



-        dual = -(0.5 * x.T * (p * x) + q.T * x)
+        dual = -(0.5 * x.T * (p * x) - q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 147
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -88,7 +88,7 @@



-        dual = -(0.5 * x.T * (p * x) + q.T * x)
+        dual = -(0.5 * x.T * (-9.601956271882065*p * x) + q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 149
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -88,7 +88,7 @@



-        dual = -(0.5 * x.T * (p * x) + q.T * x)
+        dual = -(0.5 * x.T * (p *-6.529240484985102*x) + q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 150
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -88,7 +88,7 @@



-        dual = -(0.5 * x.T * (p * x) + q.T * x)
+        dual = -(0.5 * x.T * (p *x+14.040539444947754) + q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 151
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -88,7 +88,7 @@



-        dual = -(0.5 * x.T * (p * x) + q.T * x)
+        dual = -(0.5 * x.T * (p * x) + q.T *-6.3924715615078735*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 152
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -88,7 +88,7 @@



-        dual = -(0.5 * x.T * (p * x) + q.T * x)
+        dual = -(0.5 * x.T * (p * x) + q.T *x-13.110091001296702)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 158
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -90,7 +90,7 @@

         dual = -(0.5 * x.T * (p * x) + q.T * x)
         dual = dual.item()
-        y1 = np.reshape(y, (-1, 1))
+        y1 = np.reshape(11.10420257768264*y, (-1, 1))
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)

# mutant 159
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -90,7 +90,7 @@

         dual = -(0.5 * x.T * (p * x) + q.T * x)
         dual = dual.item()
-        y1 = np.reshape(y, (-1, 1))
+        y1 = np.reshape(y+2.1701432372046794, (-1, 1))
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)

# mutant 161
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -91,7 +91,7 @@
         dual = -(0.5 * x.T * (p * x) + q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
-        lambda1 = np.multiply(x, y1)
+        lambda1 = np.multiply(-11.756479077467965*x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)

# mutant 162
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -91,7 +91,7 @@
         dual = -(0.5 * x.T * (p * x) + q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
-        lambda1 = np.multiply(x, y1)
+        lambda1 = np.multiply(x-2.636886097688613, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)

# mutant 163
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -91,7 +91,7 @@
         dual = -(0.5 * x.T * (p * x) + q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
-        lambda1 = np.multiply(x, y1)
+        lambda1 = np.multiply(x,-16.67735898396107*y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)

# mutant 164
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -91,7 +91,7 @@
         dual = -(0.5 * x.T * (p * x) + q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
-        lambda1 = np.multiply(x, y1)
+        lambda1 = np.multiply(x,y1+4.9589932462497)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)

# mutant 166
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -92,7 +92,7 @@
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)
-        w = np.dot(X.T, lambda1)
+        w = np.dot(X.T,2.4396089033995825*lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
         primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))

# mutant 167
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -92,7 +92,7 @@
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)
-        w = np.dot(X.T, lambda1)
+        w = np.dot(X.T,lambda1-7.692647202505691)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
         primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))

# mutant 173
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -94,7 +94,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
+        tmp = np.maximum(2.984088828970541 - np.multiply(y1, X * w), 0)
         primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
         primal = primal.item()


# mutant 174
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -94,7 +94,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
+        tmp = np.maximum(1 + np.multiply(y1, X * w), 0)
         primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
         primal = primal.item()


# mutant 176
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -94,7 +94,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
+        tmp = np.maximum(1 - np.multiply(11.418779513267792*y1, X * w), 0)
         primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
         primal = primal.item()


# mutant 177
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -94,7 +94,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
+        tmp = np.maximum(1 - np.multiply(y1+0.07659289304205885, X * w), 0)
         primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
         primal = primal.item()


# mutant 178
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -94,7 +94,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
+        tmp = np.maximum(1 - np.multiply(y1, X * w), 1.1059912216970427)
         primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
         primal = primal.item()


# mutant 180
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -95,7 +95,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
-        primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
+        primal = 0.5711327596978407 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
         primal = primal.item()

         # stop criteria

# mutant 181
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -95,7 +95,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
-        primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
+        primal = 0.5 / np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
         primal = primal.item()

         # stop criteria

# mutant 182
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -95,7 +95,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
-        primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
+        primal = 0.5 * np.linalg.norm(w)*2 + 1 * np.sum(np.square(tmp))
         primal = primal.item()

         # stop criteria

# mutant 183
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -95,7 +95,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
-        primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
+        primal = 0.5 * np.linalg.norm(w)**11.140912607530133 + 1 * np.sum(np.square(tmp))
         primal = primal.item()

         # stop criteria

# mutant 184
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -95,7 +95,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
-        primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
+        primal = 0.5 * np.linalg.norm(w)**2 - 1 * np.sum(np.square(tmp))
         primal = primal.item()

         # stop criteria

# mutant 185
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -95,7 +95,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
-        primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
+        primal = 0.5 * np.linalg.norm(w)**2 + 2.803200259640514 * np.sum(np.square(tmp))
         primal = primal.item()

         # stop criteria

# mutant 186
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -95,7 +95,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
-        primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
+        primal = 0.5 * np.linalg.norm(w)**2 + 1 / np.sum(np.square(tmp))
         primal = primal.item()

         # stop criteria

# mutant 189
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -102,7 +102,7 @@
         #if k % 10 == 0:
         #    print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(dual + primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
             #print('success')
             break


# mutant 190
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -102,7 +102,7 @@
         #if k % 10 == 0:
         #    print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(2.0344225273271697*dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
             #print('success')
             break


# mutant 191
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -102,7 +102,7 @@
         #if k % 10 == 0:
         #    print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(dual-5.302291789369652 - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
             #print('success')
             break


# mutant 192
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -102,7 +102,7 @@
         #if k % 10 == 0:
         #    print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(dual --16.48706381792775*primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
             #print('success')
             break


# mutant 193
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -102,7 +102,7 @@
         #if k % 10 == 0:
         #    print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(dual -primal+2.597563827613783) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
             #print('success')
             break


# mutant 194
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -102,7 +102,7 @@
         #if k % 10 == 0:
         #    print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(dual - primal) * (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
             #print('success')
             break


# mutant 195
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -102,7 +102,7 @@
         #if k % 10 == 0:
         #    print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(dual - primal) / (-9.695207555801074 + np.abs(dual) + np.abs(primal)) < 1e-12:
             #print('success')
             break


# mutant 196
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -102,7 +102,7 @@
         #if k % 10 == 0:
         #    print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(dual - primal) / (1 - np.abs(dual) + np.abs(primal)) < 1e-12:
             #print('success')
             break


# mutant 197
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -102,7 +102,7 @@
         #if k % 10 == 0:
         #    print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(dual - primal) / (1 + np.abs(dual) - np.abs(primal)) < 1e-12:
             #print('success')
             break


# mutant 198
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -102,7 +102,7 @@
         #if k % 10 == 0:
         #    print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) <= 1e-12:
             #print('success')
             break


# mutant 199
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -102,7 +102,7 @@
         #if k % 10 == 0:
         #    print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < -25.749014259230155:
             #print('success')
             break


# mutant 200
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -104,7 +104,7 @@
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
             #print('success')
-            break
+            continue

     return w


# mutant 201
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -113,7 +113,7 @@
 class SQP_L2_gv():

     def fit(self, X, y):
-        y[y == 0] = -1
+        y[y != 0] = -1
         # add logitR to verify the correctness
         #from sklearn.svm import LinearSVC
         #SVM = LinearSVC(loss='squared_hinge', tol=1e-6, max_iter=100000, verbose=0).fit(X, np.array(y).ravel())

# mutant 202
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -113,7 +113,7 @@
 class SQP_L2_gv():

     def fit(self, X, y):
-        y[y == 0] = -1
+        y[y == 4.966629425704535] = -1
         # add logitR to verify the correctness
         #from sklearn.svm import LinearSVC
         #SVM = LinearSVC(loss='squared_hinge', tol=1e-6, max_iter=100000, verbose=0).fit(X, np.array(y).ravel())

# mutant 203
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -113,7 +113,7 @@
 class SQP_L2_gv():

     def fit(self, X, y):
-        y[y == 0] = -1
+        y[y == 0] = +1
         # add logitR to verify the correctness
         #from sklearn.svm import LinearSVC
         #SVM = LinearSVC(loss='squared_hinge', tol=1e-6, max_iter=100000, verbose=0).fit(X, np.array(y).ravel())

# mutant 204
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -113,7 +113,7 @@
 class SQP_L2_gv():

     def fit(self, X, y):
-        y[y == 0] = -1
+        y[y == 0] = --19.534186486838784
         # add logitR to verify the correctness
         #from sklearn.svm import LinearSVC
         #SVM = LinearSVC(loss='squared_hinge', tol=1e-6, max_iter=100000, verbose=0).fit(X, np.array(y).ravel())

# mutant 207
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -123,7 +123,7 @@
         m, n = X.shape
         #import time
         # t1 = time.time()
-        w = inner_point(X, y)
+        w = inner_point(-6.965127576595311*X, y)
         # t2 = time.time()
         # print(t2-t1, 's')
         w = np.array(w).reshape(-1)

# mutant 208
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -123,7 +123,7 @@
         m, n = X.shape
         #import time
         # t1 = time.time()
-        w = inner_point(X, y)
+        w = inner_point(X-1.323166459049425, y)
         # t2 = time.time()
         # print(t2-t1, 's')
         w = np.array(w).reshape(-1)

# mutant 209
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -123,7 +123,7 @@
         m, n = X.shape
         #import time
         # t1 = time.time()
-        w = inner_point(X, y)
+        w = inner_point(X,-10.784917511646873*y)
         # t2 = time.time()
         # print(t2-t1, 's')
         w = np.array(w).reshape(-1)

# mutant 210
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -123,7 +123,7 @@
         m, n = X.shape
         #import time
         # t1 = time.time()
-        w = inner_point(X, y)
+        w = inner_point(X,y-10.066562865963746)
         # t2 = time.time()
         # print(t2-t1, 's')
         w = np.array(w).reshape(-1)

# mutant 218
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -134,7 +134,7 @@

         #print('diff', np.linalg.norm(w1-w), b, b1)

-        clf = Clf(w, b)
+        clf = Clf(12.881095131343216*w, b)
         # clf = Clf(w1, b1)
         return clf


# mutant 219
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -134,7 +134,7 @@

         #print('diff', np.linalg.norm(w1-w), b, b1)

-        clf = Clf(w, b)
+        clf = Clf(w-4.4707842245245235, b)
         # clf = Clf(w1, b1)
         return clf


# mutant 220
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -134,7 +134,7 @@

         #print('diff', np.linalg.norm(w1-w), b, b1)

-        clf = Clf(w, b)
+        clf = Clf(w,-2.0458950316781808*b)
         # clf = Clf(w1, b1)
         return clf


# mutant 221
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -134,7 +134,7 @@

         #print('diff', np.linalg.norm(w1-w), b, b1)

-        clf = Clf(w, b)
+        clf = Clf(w,b+2.444284590102396)
         # clf = Clf(w1, b1)
         return clf