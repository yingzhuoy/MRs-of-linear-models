# mutant 7
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -12,7 +12,7 @@
     X = np.column_stack((X, np.ones((m, 1))))
     y = y.astype(np.float64)
     data_num = len(y)
-    C = 1.0
+    C = 2.508617005937567
     kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))

# mutant 9
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -13,7 +13,7 @@
     y = y.astype(np.float64)
     data_num = len(y)
     C = 1.0
-    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    kernel = np.dot(-3.407601662246909*X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))


# mutant 10
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -13,7 +13,7 @@
     y = y.astype(np.float64)
     data_num = len(y)
     C = 1.0
-    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    kernel = np.dot(X+29.174836167995966, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))


# mutant 11
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -13,7 +13,7 @@
     y = y.astype(np.float64)
     data_num = len(y)
     C = 1.0
-    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    kernel = np.dot(X, np.transpose(X)) - np.diag(np.ones(data_num, np.float64)) * .5/C
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))


# mutant 14
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -13,7 +13,7 @@
     y = y.astype(np.float64)
     data_num = len(y)
     C = 1.0
-    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) / .5/C
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))


# mutant 15
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -13,7 +13,7 @@
     y = y.astype(np.float64)
     data_num = len(y)
     C = 1.0
-    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * -12.065838261477175/C
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))


# mutant 16
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -13,7 +13,7 @@
     y = y.astype(np.float64)
     data_num = len(y)
     C = 1.0
-    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5*C
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))


# mutant 17
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -13,7 +13,7 @@
     y = y.astype(np.float64)
     data_num = len(y)
     C = 1.0
-    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/31.58964942641374*C
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))


# mutant 18
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -13,7 +13,7 @@
     y = y.astype(np.float64)
     data_num = len(y)
     C = 1.0
-    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C-4.369760047245744
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))


# mutant 20
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -14,7 +14,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
-    p = np.matrix(np.multiply(kernel, np.outer(y, y)))
+    p = np.matrix(np.multiply(kernel, np.outer(5.359014312854814*y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))



# mutant 21
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -14,7 +14,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
-    p = np.matrix(np.multiply(kernel, np.outer(y, y)))
+    p = np.matrix(np.multiply(kernel, np.outer(y-17.193322807169878, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))



# mutant 22
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -14,7 +14,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
-    p = np.matrix(np.multiply(kernel, np.outer(y, y)))
+    p = np.matrix(np.multiply(kernel, np.outer(y,4.0913115884454045*y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))



# mutant 23
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -14,7 +14,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
-    p = np.matrix(np.multiply(kernel, np.outer(y, y)))
+    p = np.matrix(np.multiply(kernel, np.outer(y,y-19.1328793309389)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))



# mutant 24
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -14,7 +14,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
-    p = np.matrix(np.multiply(kernel, np.outer(y, y)))
+    p = np.matrix(np.multiply(3.7726141255272645*kernel, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))



# mutant 25
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -14,7 +14,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
-    p = np.matrix(np.multiply(kernel, np.outer(y, y)))
+    p = np.matrix(np.multiply(kernel+11.76964110816865, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))



# mutant 27
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -15,7 +15,7 @@
     C = 1.0
     kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
-    q = np.matrix(-np.ones([data_num, 1], np.float64))
+    q = np.matrix(+np.ones([data_num, 1], np.float64))


     bounds = (0, np.inf)

# mutant 30
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -18,7 +18,7 @@
     q = np.matrix(-np.ones([data_num, 1], np.float64))


-    bounds = (0, np.inf)
+    bounds = (3.0251086269402006, np.inf)

     low, up = bounds
     x = np.random.normal(size=(m, 1))

# mutant 35
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -22,7 +22,7 @@

     low, up = bounds
     x = np.random.normal(size=(m, 1))
-    l = 0.001
+    l = 7.810036938023207

     for k in range(max_iter * 5):  # heavy on matrix operations
         g0 = p*x + q

# mutant 40
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -25,7 +25,7 @@
     l = 0.001

     for k in range(max_iter * 5):  # heavy on matrix operations
-        g0 = p*x + q
+        g0 = p*x - q
         # saving previous x
         x = x - l * g0
         x[x < low] = low

# mutant 41
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -25,7 +25,7 @@
     l = 0.001

     for k in range(max_iter * 5):  # heavy on matrix operations
-        g0 = p*x + q
+        g0 =6.362511817276906*p*x + q
         # saving previous x
         x = x - l * g0
         x[x < low] = low

# mutant 43
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -25,7 +25,7 @@
     l = 0.001

     for k in range(max_iter * 5):  # heavy on matrix operations
-        g0 = p*x + q
+        g0 = p*9.191775530741086*x + q
         # saving previous x
         x = x - l * g0
         x[x < low] = low

# mutant 44
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -25,7 +25,7 @@
     l = 0.001

     for k in range(max_iter * 5):  # heavy on matrix operations
-        g0 = p*x + q
+        g0 = p*x+5.1445192792259355 + q
         # saving previous x
         x = x - l * g0
         x[x < low] = low

# mutant 45
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -25,7 +25,7 @@
     l = 0.001

     for k in range(max_iter * 5):  # heavy on matrix operations
-        g0 = p*x + q
+        g0 = p*x +-22.252004413912317*q
         # saving previous x
         x = x - l * g0
         x[x < low] = low

# mutant 46
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -25,7 +25,7 @@
     l = 0.001

     for k in range(max_iter * 5):  # heavy on matrix operations
-        g0 = p*x + q
+        g0 = p*x +q-1.6120089806709834
         # saving previous x
         x = x - l * g0
         x[x < low] = low

# mutant 48
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -27,7 +27,7 @@
     for k in range(max_iter * 5):  # heavy on matrix operations
         g0 = p*x + q
         # saving previous x
-        x = x - l * g0
+        x = x + l * g0
         x[x < low] = low
         x[x > up] = up


# mutant 49
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -27,7 +27,7 @@
     for k in range(max_iter * 5):  # heavy on matrix operations
         g0 = p*x + q
         # saving previous x
-        x = x - l * g0
+        x = x - l / g0
         x[x < low] = low
         x[x > up] = up


# mutant 50
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -27,7 +27,7 @@
     for k in range(max_iter * 5):  # heavy on matrix operations
         g0 = p*x + q
         # saving previous x
-        x = x - l * g0
+        x =-20.764003944755892*x - l * g0
         x[x < low] = low
         x[x > up] = up


# mutant 51
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -27,7 +27,7 @@
     for k in range(max_iter * 5):  # heavy on matrix operations
         g0 = p*x + q
         # saving previous x
-        x = x - l * g0
+        x =x-6.722330202916966 - l * g0
         x[x < low] = low
         x[x > up] = up


# mutant 52
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -27,7 +27,7 @@
     for k in range(max_iter * 5):  # heavy on matrix operations
         g0 = p*x + q
         # saving previous x
-        x = x - l * g0
+        x = x -7.16272564959934*l * g0
         x[x < low] = low
         x[x > up] = up


# mutant 53
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -27,7 +27,7 @@
     for k in range(max_iter * 5):  # heavy on matrix operations
         g0 = p*x + q
         # saving previous x
-        x = x - l * g0
+        x = x -l+14.579721546618503 * g0
         x[x < low] = low
         x[x > up] = up


# mutant 54
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -27,7 +27,7 @@
     for k in range(max_iter * 5):  # heavy on matrix operations
         g0 = p*x + q
         # saving previous x
-        x = x - l * g0
+        x = x - l *-10.325322844803162*g0
         x[x < low] = low
         x[x > up] = up


# mutant 55
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -27,7 +27,7 @@
     for k in range(max_iter * 5):  # heavy on matrix operations
         g0 = p*x + q
         # saving previous x
-        x = x - l * g0
+        x = x - l *g0+12.1391233286778
         x[x < low] = low
         x[x > up] = up


# mutant 57
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -28,7 +28,7 @@
         g0 = p*x + q
         # saving previous x
         x = x - l * g0
-        x[x < low] = low
+        x[x <= low] = low
         x[x > up] = up



# mutant 58
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -28,7 +28,7 @@
         g0 = p*x + q
         # saving previous x
         x = x - l * g0
-        x[x < low] = low
+        x[x < low] = None
         x[x > up] = up



# mutant 59
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -29,7 +29,7 @@
         # saving previous x
         x = x - l * g0
         x[x < low] = low
-        x[x > up] = up
+        x[x >= up] = up


         dual = -(0.5*x.T*(p*x) + q.T*x)

# mutant 60
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -29,7 +29,7 @@
         # saving previous x
         x = x - l * g0
         x[x < low] = low
-        x[x > up] = up
+        x[x > up] = None


         dual = -(0.5*x.T*(p*x) + q.T*x)

# mutant 61
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -32,7 +32,7 @@
         x[x > up] = up


-        dual = -(0.5*x.T*(p*x) + q.T*x)
+        dual = +(0.5*x.T*(p*x) + q.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 62
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -32,7 +32,7 @@
         x[x > up] = up


-        dual = -(0.5*x.T*(p*x) + q.T*x)
+        dual = -(4.9874704856672905*x.T*(p*x) + q.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 63
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -32,7 +32,7 @@
         x[x > up] = up


-        dual = -(0.5*x.T*(p*x) + q.T*x)
+        dual = -(0.5/x.T*(p*x) + q.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 66
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -32,7 +32,7 @@
         x[x > up] = up


-        dual = -(0.5*x.T*(p*x) + q.T*x)
+        dual = -(0.5*x.T*(p*x) - q.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 68
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -32,7 +32,7 @@
         x[x > up] = up


-        dual = -(0.5*x.T*(p*x) + q.T*x)
+        dual = -(0.5*x.T*(-3.6669187625340687*p*x) + q.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 70
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -32,7 +32,7 @@
         x[x > up] = up


-        dual = -(0.5*x.T*(p*x) + q.T*x)
+        dual = -(0.5*x.T*(p*14.08619107867462*x) + q.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 71
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -32,7 +32,7 @@
         x[x > up] = up


-        dual = -(0.5*x.T*(p*x) + q.T*x)
+        dual = -(0.5*x.T*(p*x-3.7720097301699536) + q.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 72
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -32,7 +32,7 @@
         x[x > up] = up


-        dual = -(0.5*x.T*(p*x) + q.T*x)
+        dual = -(0.5*x.T*(p*x) + q.T*10.479011362229695*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 73
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -32,7 +32,7 @@
         x[x > up] = up


-        dual = -(0.5*x.T*(p*x) + q.T*x)
+        dual = -(0.5*x.T*(p*x) + q.T*x+1.29121273464591)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 75
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -33,7 +33,7 @@


         dual = -(0.5*x.T*(p*x) + q.T*x)
-        dual = dual.item()
+        dual = None
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)

# mutant 79
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -34,7 +34,7 @@

         dual = -(0.5*x.T*(p*x) + q.T*x)
         dual = dual.item()
-        y1 = np.reshape(y, (-1, 1))
+        y1 = np.reshape(-19.043768280577698*y, (-1, 1))
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)

# mutant 80
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -34,7 +34,7 @@

         dual = -(0.5*x.T*(p*x) + q.T*x)
         dual = dual.item()
-        y1 = np.reshape(y, (-1, 1))
+        y1 = np.reshape(y-1.7671158587019267, (-1, 1))
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)

# mutant 82
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -35,7 +35,7 @@
         dual = -(0.5*x.T*(p*x) + q.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
-        lambda1 = np.multiply(x, y1)
+        lambda1 = np.multiply(1.7040411923693277*x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)

# mutant 83
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -35,7 +35,7 @@
         dual = -(0.5*x.T*(p*x) + q.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
-        lambda1 = np.multiply(x, y1)
+        lambda1 = np.multiply(x-2.0802555808444714, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)

# mutant 84
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -35,7 +35,7 @@
         dual = -(0.5*x.T*(p*x) + q.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
-        lambda1 = np.multiply(x, y1)
+        lambda1 = np.multiply(x,8.109333720536965*y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)

# mutant 85
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -35,7 +35,7 @@
         dual = -(0.5*x.T*(p*x) + q.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
-        lambda1 = np.multiply(x, y1)
+        lambda1 = np.multiply(x,y1+7.294367425118006)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)

# mutant 87
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -36,7 +36,7 @@
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)
-        w = np.dot(X.T, lambda1)
+        w = np.dot(X.T,5.366282024265919*lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
         primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)

# mutant 88
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -36,7 +36,7 @@
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)
-        w = np.dot(X.T, lambda1)
+        w = np.dot(X.T,lambda1-1.1500089813635357)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
         primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)

# mutant 94
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -38,7 +38,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1-np.multiply(y1, X*w),0)
+        tmp = np.maximum(6.518444173846808-np.multiply(y1, X*w),0)
         primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
         primal = primal.item()


# mutant 95
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -38,7 +38,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1-np.multiply(y1, X*w),0)
+        tmp = np.maximum(1+np.multiply(y1, X*w),0)
         primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
         primal = primal.item()


# mutant 97
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -38,7 +38,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1-np.multiply(y1, X*w),0)
+        tmp = np.maximum(1-np.multiply(11.676284416677365*y1, X*w),0)
         primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
         primal = primal.item()


# mutant 98
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -38,7 +38,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1-np.multiply(y1, X*w),0)
+        tmp = np.maximum(1-np.multiply(y1-5.448888449892499, X*w),0)
         primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
         primal = primal.item()


# mutant 99
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -38,7 +38,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1-np.multiply(y1, X*w),0)
+        tmp = np.maximum(1-np.multiply(y1, X*w),3.953801014739715)
         primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
         primal = primal.item()


# mutant 101
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -39,7 +39,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
-        primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
+        primal = -5.199741159177129*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
         primal = primal.item()

         #if k % 1000 == 0:

# mutant 102
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -39,7 +39,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
-        primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
+        primal = 0.5/np.linalg.norm(w)**2 + 1 * np.sum(tmp)
         primal = primal.item()

         #if k % 1000 == 0:

# mutant 103
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -39,7 +39,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
-        primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
+        primal = 0.5*np.linalg.norm(w)*2 + 1 * np.sum(tmp)
         primal = primal.item()

         #if k % 1000 == 0:

# mutant 104
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -39,7 +39,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
-        primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
+        primal = 0.5*np.linalg.norm(w)**4.449060643537788 + 1 * np.sum(tmp)
         primal = primal.item()

         #if k % 1000 == 0:

# mutant 105
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -39,7 +39,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
-        primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
+        primal = 0.5*np.linalg.norm(w)**2 - 1 * np.sum(tmp)
         primal = primal.item()

         #if k % 1000 == 0:

# mutant 106
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -39,7 +39,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
-        primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
+        primal = 0.5*np.linalg.norm(w)**2 + -16.255356070040182 * np.sum(tmp)
         primal = primal.item()

         #if k % 1000 == 0:

# mutant 107
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -39,7 +39,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
-        primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
+        primal = 0.5*np.linalg.norm(w)**2 + 1 / np.sum(tmp)
         primal = primal.item()

         #if k % 1000 == 0:

# mutant 109
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -40,7 +40,7 @@
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
         primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
-        primal = primal.item()
+        primal = None

         #if k % 1000 == 0:
         #    print('GD:', np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))

# mutant 112
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -48,7 +48,7 @@
     for k in range(max_iter):  # heavy on matrix operations
         for i in range(m):
             tmpx = x.copy()
-            tmpx[i, 0] = 0
+            tmpx[i, 0] = -17.80612230211228
             temp = (p[i, :] * tmpx) + q[i]
             # if temp > 0 and x[i] == 0:
                 # continue

# mutant 113
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -48,7 +48,7 @@
     for k in range(max_iter):  # heavy on matrix operations
         for i in range(m):
             tmpx = x.copy()
-            tmpx[i, 0] = 0
+            tmpx[i, 0] = None
             temp = (p[i, :] * tmpx) + q[i]
             # if temp > 0 and x[i] == 0:
                 # continue

# mutant 115
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -49,7 +49,7 @@
         for i in range(m):
             tmpx = x.copy()
             tmpx[i, 0] = 0
-            temp = (p[i, :] * tmpx) + q[i]
+            temp = (p[i, :] * tmpx) - q[i]
             # if temp > 0 and x[i] == 0:
                 # continue
             temp = temp.item()

# mutant 116
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -49,7 +49,7 @@
         for i in range(m):
             tmpx = x.copy()
             tmpx[i, 0] = 0
-            temp = (p[i, :] * tmpx) + q[i]
+            temp = (p[i, :] *3.4806284674302463*tmpx) + q[i]
             # if temp > 0 and x[i] == 0:
                 # continue
             temp = temp.item()

# mutant 117
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -49,7 +49,7 @@
         for i in range(m):
             tmpx = x.copy()
             tmpx[i, 0] = 0
-            temp = (p[i, :] * tmpx) + q[i]
+            temp = (p[i, :] *tmpx-12.125957892716633) + q[i]
             # if temp > 0 and x[i] == 0:
                 # continue
             temp = temp.item()

# mutant 120
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -53,7 +53,7 @@
             # if temp > 0 and x[i] == 0:
                 # continue
             temp = temp.item()
-            if p[i, i] > 0:
+            if p[i, i] >= 0:
                 xi = -(temp / p[i, i]).item()
                 xi = np.maximum(low, xi)
             elif p[i, i] < 0:

# mutant 122
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -54,7 +54,7 @@
                 # continue
             temp = temp.item()
             if p[i, i] > 0:
-                xi = -(temp / p[i, i]).item()
+                xi = +(temp / p[i, i]).item()
                 xi = np.maximum(low, xi)
             elif p[i, i] < 0:
                 xi = -1

# mutant 123
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -54,7 +54,7 @@
                 # continue
             temp = temp.item()
             if p[i, i] > 0:
-                xi = -(temp / p[i, i]).item()
+                xi = -(temp * p[i, i]).item()
                 xi = np.maximum(low, xi)
             elif p[i, i] < 0:
                 xi = -1

# mutant 125
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -55,7 +55,7 @@
             temp = temp.item()
             if p[i, i] > 0:
                 xi = -(temp / p[i, i]).item()
-                xi = np.maximum(low, xi)
+                xi = np.maximum(1.1956652897428026*low, xi)
             elif p[i, i] < 0:
                 xi = -1
                 #print('error')

# mutant 126
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -55,7 +55,7 @@
             temp = temp.item()
             if p[i, i] > 0:
                 xi = -(temp / p[i, i]).item()
-                xi = np.maximum(low, xi)
+                xi = np.maximum(low+11.435932863887018, xi)
             elif p[i, i] < 0:
                 xi = -1
                 #print('error')

# mutant 127
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -55,7 +55,7 @@
             temp = temp.item()
             if p[i, i] > 0:
                 xi = -(temp / p[i, i]).item()
-                xi = np.maximum(low, xi)
+                xi = np.maximum(low,-16.235460541917515*xi)
             elif p[i, i] < 0:
                 xi = -1
                 #print('error')

# mutant 128
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -55,7 +55,7 @@
             temp = temp.item()
             if p[i, i] > 0:
                 xi = -(temp / p[i, i]).item()
-                xi = np.maximum(low, xi)
+                xi = np.maximum(low,xi-12.477867300829729)
             elif p[i, i] < 0:
                 xi = -1
                 #print('error')

# mutant 129
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -55,7 +55,7 @@
             temp = temp.item()
             if p[i, i] > 0:
                 xi = -(temp / p[i, i]).item()
-                xi = np.maximum(low, xi)
+                xi = None
             elif p[i, i] < 0:
                 xi = -1
                 #print('error')

# mutant 130
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -56,7 +56,7 @@
             if p[i, i] > 0:
                 xi = -(temp / p[i, i]).item()
                 xi = np.maximum(low, xi)
-            elif p[i, i] < 0:
+            elif p[i, i] <= 0:
                 xi = -1
                 #print('error')
             else:

# mutant 131
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -56,7 +56,7 @@
             if p[i, i] > 0:
                 xi = -(temp / p[i, i]).item()
                 xi = np.maximum(low, xi)
-            elif p[i, i] < 0:
+            elif p[i, i] < -4.653366894900089:
                 xi = -1
                 #print('error')
             else:

# mutant 132
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -57,7 +57,7 @@
                 xi = -(temp / p[i, i]).item()
                 xi = np.maximum(low, xi)
             elif p[i, i] < 0:
-                xi = -1
+                xi = +1
                 #print('error')
             else:
                 if temp > 0:

# mutant 133
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -57,7 +57,7 @@
                 xi = -(temp / p[i, i]).item()
                 xi = np.maximum(low, xi)
             elif p[i, i] < 0:
-                xi = -1
+                xi = -13.264804103128622
                 #print('error')
             else:
                 if temp > 0:

# mutant 134
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -57,7 +57,7 @@
                 xi = -(temp / p[i, i]).item()
                 xi = np.maximum(low, xi)
             elif p[i, i] < 0:
-                xi = -1
+                xi = None
                 #print('error')
             else:
                 if temp > 0:

# mutant 135
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -60,7 +60,7 @@
                 xi = -1
                 #print('error')
             else:
-                if temp > 0:
+                if temp >= 0:
                     xi = low
             x[i, 0] = xi


# mutant 136
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -60,7 +60,7 @@
                 xi = -1
                 #print('error')
             else:
-                if temp > 0:
+                if temp > 0.8322818060627386:
                     xi = low
             x[i, 0] = xi


# mutant 137
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -61,7 +61,7 @@
                 #print('error')
             else:
                 if temp > 0:
-                    xi = low
+                    xi = None
             x[i, 0] = xi



# mutant 139
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -62,7 +62,7 @@
             else:
                 if temp > 0:
                     xi = low
-            x[i, 0] = xi
+            x[i, 0] = None


         # for u in range(m):

# mutant 140
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -88,7 +88,7 @@



-        dual = -(0.5 * x.T * (p * x) + q.T * x)
+        dual = +(0.5 * x.T * (p * x) + q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 141
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -88,7 +88,7 @@



-        dual = -(0.5 * x.T * (p * x) + q.T * x)
+        dual = -(-6.280474137864029 * x.T * (p * x) + q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 142
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -88,7 +88,7 @@



-        dual = -(0.5 * x.T * (p * x) + q.T * x)
+        dual = -(0.5 / x.T * (p * x) + q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 145
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -88,7 +88,7 @@



-        dual = -(0.5 * x.T * (p * x) + q.T * x)
+        dual = -(0.5 * x.T * (p * x) - q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 147
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -88,7 +88,7 @@



-        dual = -(0.5 * x.T * (p * x) + q.T * x)
+        dual = -(0.5 * x.T * (1.7750863760727458*p * x) + q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 149
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -88,7 +88,7 @@



-        dual = -(0.5 * x.T * (p * x) + q.T * x)
+        dual = -(0.5 * x.T * (p *9.477751470190432*x) + q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 150
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -88,7 +88,7 @@



-        dual = -(0.5 * x.T * (p * x) + q.T * x)
+        dual = -(0.5 * x.T * (p *x-2.5443786384825446) + q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 151
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -88,7 +88,7 @@



-        dual = -(0.5 * x.T * (p * x) + q.T * x)
+        dual = -(0.5 * x.T * (p * x) + q.T *4.873060038665541*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 152
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -88,7 +88,7 @@



-        dual = -(0.5 * x.T * (p * x) + q.T * x)
+        dual = -(0.5 * x.T * (p * x) + q.T *x-7.177438255623852)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 158
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -90,7 +90,7 @@

         dual = -(0.5 * x.T * (p * x) + q.T * x)
         dual = dual.item()
-        y1 = np.reshape(y, (-1, 1))
+        y1 = np.reshape(2.932660469929518*y, (-1, 1))
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)

# mutant 159
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -90,7 +90,7 @@

         dual = -(0.5 * x.T * (p * x) + q.T * x)
         dual = dual.item()
-        y1 = np.reshape(y, (-1, 1))
+        y1 = np.reshape(y-12.519658958015171, (-1, 1))
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)

# mutant 161
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -91,7 +91,7 @@
         dual = -(0.5 * x.T * (p * x) + q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
-        lambda1 = np.multiply(x, y1)
+        lambda1 = np.multiply(4.9847706216504974*x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)

# mutant 162
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -91,7 +91,7 @@
         dual = -(0.5 * x.T * (p * x) + q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
-        lambda1 = np.multiply(x, y1)
+        lambda1 = np.multiply(x+3.5462500107733144, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)

# mutant 163
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -91,7 +91,7 @@
         dual = -(0.5 * x.T * (p * x) + q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
-        lambda1 = np.multiply(x, y1)
+        lambda1 = np.multiply(x,-7.008433562507232*y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)

# mutant 164
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -91,7 +91,7 @@
         dual = -(0.5 * x.T * (p * x) + q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
-        lambda1 = np.multiply(x, y1)
+        lambda1 = np.multiply(x,y1+19.1148513502821)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)

# mutant 166
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -92,7 +92,7 @@
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)
-        w = np.dot(X.T, lambda1)
+        w = np.dot(X.T,5.229812689524799*lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
         primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))

# mutant 167
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -92,7 +92,7 @@
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)
-        w = np.dot(X.T, lambda1)
+        w = np.dot(X.T,lambda1+12.427095934969909)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
         primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))

# mutant 173
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -94,7 +94,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
+        tmp = np.maximum(7.044730078372442 - np.multiply(y1, X * w), 0)
         primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
         primal = primal.item()


# mutant 174
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -94,7 +94,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
+        tmp = np.maximum(1 + np.multiply(y1, X * w), 0)
         primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
         primal = primal.item()


# mutant 176
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -94,7 +94,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
+        tmp = np.maximum(1 - np.multiply(1.2899467871409045*y1, X * w), 0)
         primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
         primal = primal.item()


# mutant 177
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -94,7 +94,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
+        tmp = np.maximum(1 - np.multiply(y1+3.02422231474272, X * w), 0)
         primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
         primal = primal.item()


# mutant 178
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -94,7 +94,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
+        tmp = np.maximum(1 - np.multiply(y1, X * w), 7.932034773706453)
         primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
         primal = primal.item()


# mutant 180
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -95,7 +95,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
-        primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
+        primal = 6.011607423592286 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
         primal = primal.item()

         # stop criteria

# mutant 181
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -95,7 +95,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
-        primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
+        primal = 0.5 / np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
         primal = primal.item()

         # stop criteria

# mutant 182
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -95,7 +95,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
-        primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
+        primal = 0.5 * np.linalg.norm(w)*2 + 1 * np.sum(np.square(tmp))
         primal = primal.item()

         # stop criteria

# mutant 183
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -95,7 +95,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
-        primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
+        primal = 0.5 * np.linalg.norm(w)**-3.8075726380350616 + 1 * np.sum(np.square(tmp))
         primal = primal.item()

         # stop criteria

# mutant 184
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -95,7 +95,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
-        primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
+        primal = 0.5 * np.linalg.norm(w)**2 - 1 * np.sum(np.square(tmp))
         primal = primal.item()

         # stop criteria

# mutant 185
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -95,7 +95,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
-        primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
+        primal = 0.5 * np.linalg.norm(w)**2 + -0.8241074174266603 * np.sum(np.square(tmp))
         primal = primal.item()

         # stop criteria

# mutant 186
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -95,7 +95,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
-        primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
+        primal = 0.5 * np.linalg.norm(w)**2 + 1 / np.sum(np.square(tmp))
         primal = primal.item()

         # stop criteria

# mutant 189
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -102,7 +102,7 @@
         #if k % 1000 == 0:
         #    print('CD:', np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(dual + primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
             #print('success')
             break


# mutant 190
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -102,7 +102,7 @@
         #if k % 1000 == 0:
         #    print('CD:', np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(11.626906012996786*dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
             #print('success')
             break


# mutant 191
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -102,7 +102,7 @@
         #if k % 1000 == 0:
         #    print('CD:', np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(dual+19.94807054770026 - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
             #print('success')
             break


# mutant 192
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -102,7 +102,7 @@
         #if k % 1000 == 0:
         #    print('CD:', np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(dual --5.900151631089643*primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
             #print('success')
             break


# mutant 193
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -102,7 +102,7 @@
         #if k % 1000 == 0:
         #    print('CD:', np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(dual -primal-5.18100784161006) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
             #print('success')
             break


# mutant 194
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -102,7 +102,7 @@
         #if k % 1000 == 0:
         #    print('CD:', np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(dual - primal) * (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
             #print('success')
             break


# mutant 195
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -102,7 +102,7 @@
         #if k % 1000 == 0:
         #    print('CD:', np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(dual - primal) / (-13.423363182887638 + np.abs(dual) + np.abs(primal)) < 1e-12:
             #print('success')
             break


# mutant 196
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -102,7 +102,7 @@
         #if k % 1000 == 0:
         #    print('CD:', np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(dual - primal) / (1 - np.abs(dual) + np.abs(primal)) < 1e-12:
             #print('success')
             break


# mutant 197
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -102,7 +102,7 @@
         #if k % 1000 == 0:
         #    print('CD:', np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(dual - primal) / (1 + np.abs(dual) - np.abs(primal)) < 1e-12:
             #print('success')
             break


# mutant 198
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -102,7 +102,7 @@
         #if k % 1000 == 0:
         #    print('CD:', np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) <= 1e-12:
             #print('success')
             break


# mutant 199
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -102,7 +102,7 @@
         #if k % 1000 == 0:
         #    print('CD:', np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1.5712059598435841:
             #print('success')
             break


# mutant 200
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -104,7 +104,7 @@
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
             #print('success')
-            break
+            continue

     return w


# mutant 201
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -113,7 +113,7 @@
 class SQP_L2_gv():

     def fit(self, X, y):
-        y[y == 0] = -1
+        y[y != 0] = -1
         # add logitR to verify the correctness
         #from sklearn.svm import LinearSVC
         #SVM = LinearSVC(loss='squared_hinge', tol=1e-6, max_iter=100000, verbose=0).fit(X, np.array(y).ravel())

# mutant 202
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -113,7 +113,7 @@
 class SQP_L2_gv():

     def fit(self, X, y):
-        y[y == 0] = -1
+        y[y == 7.236632574166143] = -1
         # add logitR to verify the correctness
         #from sklearn.svm import LinearSVC
         #SVM = LinearSVC(loss='squared_hinge', tol=1e-6, max_iter=100000, verbose=0).fit(X, np.array(y).ravel())

# mutant 203
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -113,7 +113,7 @@
 class SQP_L2_gv():

     def fit(self, X, y):
-        y[y == 0] = -1
+        y[y == 0] = +1
         # add logitR to verify the correctness
         #from sklearn.svm import LinearSVC
         #SVM = LinearSVC(loss='squared_hinge', tol=1e-6, max_iter=100000, verbose=0).fit(X, np.array(y).ravel())

# mutant 204
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -113,7 +113,7 @@
 class SQP_L2_gv():

     def fit(self, X, y):
-        y[y == 0] = -1
+        y[y == 0] = -12.239968344415347
         # add logitR to verify the correctness
         #from sklearn.svm import LinearSVC
         #SVM = LinearSVC(loss='squared_hinge', tol=1e-6, max_iter=100000, verbose=0).fit(X, np.array(y).ravel())

# mutant 207
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -123,7 +123,7 @@
         m, n = X.shape
         #import time
         #t1 = time.time()
-        w = inner_point(X, y)
+        w = inner_point(8.30159657656788*X, y)
         #t2 = time.time()
         #print(t2-t1, 's')
         w = np.array(w).reshape(-1)

# mutant 208
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -123,7 +123,7 @@
         m, n = X.shape
         #import time
         #t1 = time.time()
-        w = inner_point(X, y)
+        w = inner_point(X+10.164911559184848, y)
         #t2 = time.time()
         #print(t2-t1, 's')
         w = np.array(w).reshape(-1)

# mutant 209
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -123,7 +123,7 @@
         m, n = X.shape
         #import time
         #t1 = time.time()
-        w = inner_point(X, y)
+        w = inner_point(X,0.26907358812602344*y)
         #t2 = time.time()
         #print(t2-t1, 's')
         w = np.array(w).reshape(-1)

# mutant 210
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -123,7 +123,7 @@
         m, n = X.shape
         #import time
         #t1 = time.time()
-        w = inner_point(X, y)
+        w = inner_point(X,y-11.055344528918381)
         #t2 = time.time()
         #print(t2-t1, 's')
         w = np.array(w).reshape(-1)

# mutant 218
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -134,7 +134,7 @@

         #print('diff', np.linalg.norm(w1-w), b, b1)

-        clf = Clf(w, b)
+        clf = Clf(1.5589322851263265*w, b)
         # clf = Clf(w1, b1)
         return clf


# mutant 219
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -134,7 +134,7 @@

         #print('diff', np.linalg.norm(w1-w), b, b1)

-        clf = Clf(w, b)
+        clf = Clf(w+8.086953068400893, b)
         # clf = Clf(w1, b1)
         return clf


# mutant 220
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -134,7 +134,7 @@

         #print('diff', np.linalg.norm(w1-w), b, b1)

-        clf = Clf(w, b)
+        clf = Clf(w,3.6604085963117354*b)
         # clf = Clf(w1, b1)
         return clf


# mutant 221
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -134,7 +134,7 @@

         #print('diff', np.linalg.norm(w1-w), b, b1)

-        clf = Clf(w, b)
+        clf = Clf(w,b+2.478903489315609)
         # clf = Clf(w1, b1)
         return clf
