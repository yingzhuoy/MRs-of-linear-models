# mutant 7
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -11,7 +11,7 @@
     X = np.column_stack((X, np.ones((m, 1))))
     y = y.astype(np.float64)
     data_num = len(y)
-    C = 1.0
+    C = 2.45305243081926
     kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))

# mutant 9
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -12,7 +12,7 @@
     y = y.astype(np.float64)
     data_num = len(y)
     C = 1.0
-    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    kernel = np.dot(8.188184799049775*X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))


# mutant 10
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -12,7 +12,7 @@
     y = y.astype(np.float64)
     data_num = len(y)
     C = 1.0
-    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    kernel = np.dot(X-0.3225736424611241, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))


# mutant 11
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -12,7 +12,7 @@
     y = y.astype(np.float64)
     data_num = len(y)
     C = 1.0
-    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    kernel = np.dot(X, np.transpose(X)) - np.diag(np.ones(data_num, np.float64)) * .5/C
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))


# mutant 14
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -12,7 +12,7 @@
     y = y.astype(np.float64)
     data_num = len(y)
     C = 1.0
-    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) / .5/C
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))


# mutant 15
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -12,7 +12,7 @@
     y = y.astype(np.float64)
     data_num = len(y)
     C = 1.0
-    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * 6.20160468116954/C
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))


# mutant 16
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -12,7 +12,7 @@
     y = y.astype(np.float64)
     data_num = len(y)
     C = 1.0
-    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5*C
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))


# mutant 17
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -12,7 +12,7 @@
     y = y.astype(np.float64)
     data_num = len(y)
     C = 1.0
-    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/10.934749148645663*C
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))


# mutant 18
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -12,7 +12,7 @@
     y = y.astype(np.float64)
     data_num = len(y)
     C = 1.0
-    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C-0.6134258376224909
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))


# mutant 20
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -13,7 +13,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
-    p = np.matrix(np.multiply(kernel, np.outer(y, y)))
+    p = np.matrix(np.multiply(kernel, np.outer(14.564728308746844*y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))

     bounds = (0, np.inf)

# mutant 21
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -13,7 +13,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
-    p = np.matrix(np.multiply(kernel, np.outer(y, y)))
+    p = np.matrix(np.multiply(kernel, np.outer(y+4.788459400681306, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))

     bounds = (0, np.inf)

# mutant 22
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -13,7 +13,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
-    p = np.matrix(np.multiply(kernel, np.outer(y, y)))
+    p = np.matrix(np.multiply(kernel, np.outer(y,9.679762580398958*y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))

     bounds = (0, np.inf)

# mutant 23
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -13,7 +13,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
-    p = np.matrix(np.multiply(kernel, np.outer(y, y)))
+    p = np.matrix(np.multiply(kernel, np.outer(y,y-8.609922035856794)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))

     bounds = (0, np.inf)

# mutant 24
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -13,7 +13,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
-    p = np.matrix(np.multiply(kernel, np.outer(y, y)))
+    p = np.matrix(np.multiply(-13.81566619481643*kernel, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))

     bounds = (0, np.inf)

# mutant 25
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -13,7 +13,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
-    p = np.matrix(np.multiply(kernel, np.outer(y, y)))
+    p = np.matrix(np.multiply(kernel+0.26948540060267595, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))

     bounds = (0, np.inf)

# mutant 27
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -14,7 +14,7 @@
     C = 1.0
     kernel = np.dot(X, np.transpose(X)) + np.diag(np.ones(data_num, np.float64)) * .5/C
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
-    q = np.matrix(-np.ones([data_num, 1], np.float64))
+    q = np.matrix(+np.ones([data_num, 1], np.float64))

     bounds = (0, np.inf)


# mutant 30
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -16,7 +16,7 @@
     p = np.matrix(np.multiply(kernel, np.outer(y, y)))
     q = np.matrix(-np.ones([data_num, 1], np.float64))

-    bounds = (0, np.inf)
+    bounds = (-4.835564929044292, np.inf)

     low, up = bounds
     x = np.zeros([m, 1]) + 0.5

# mutant 34
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -19,7 +19,7 @@
     bounds = (0, np.inf)

     low, up = bounds
-    x = np.zeros([m, 1]) + 0.5
+    x = np.zeros([m, 1]) - 0.5

     for k in range(max_iter):  # heavy on matrix operations
         for i in range(m):

# mutant 35
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -19,7 +19,7 @@
     bounds = (0, np.inf)

     low, up = bounds
-    x = np.zeros([m, 1]) + 0.5
+    x = np.zeros([m, 1]) + 14.740575111153175

     for k in range(max_iter):  # heavy on matrix operations
         for i in range(m):

# mutant 39
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -24,7 +24,7 @@
     for k in range(max_iter):  # heavy on matrix operations
         for i in range(m):
             tmpx = x.copy()
-            tmpx[i, 0] = 0
+            tmpx[i, 0] = -12.102936750012134
             temp = (p[i, :] * tmpx) + q[i]
             # if temp > 0 and x[i] == 0:
                 # continue

# mutant 40
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -24,7 +24,7 @@
     for k in range(max_iter):  # heavy on matrix operations
         for i in range(m):
             tmpx = x.copy()
-            tmpx[i, 0] = 0
+            tmpx[i, 0] = None
             temp = (p[i, :] * tmpx) + q[i]
             # if temp > 0 and x[i] == 0:
                 # continue

# mutant 42
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -25,7 +25,7 @@
         for i in range(m):
             tmpx = x.copy()
             tmpx[i, 0] = 0
-            temp = (p[i, :] * tmpx) + q[i]
+            temp = (p[i, :] * tmpx) - q[i]
             # if temp > 0 and x[i] == 0:
                 # continue
             temp = temp.item()

# mutant 43
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -25,7 +25,7 @@
         for i in range(m):
             tmpx = x.copy()
             tmpx[i, 0] = 0
-            temp = (p[i, :] * tmpx) + q[i]
+            temp = (p[i, :] *-16.740860656429756*tmpx) + q[i]
             # if temp > 0 and x[i] == 0:
                 # continue
             temp = temp.item()

# mutant 44
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -25,7 +25,7 @@
         for i in range(m):
             tmpx = x.copy()
             tmpx[i, 0] = 0
-            temp = (p[i, :] * tmpx) + q[i]
+            temp = (p[i, :] *tmpx+11.96008673633251) + q[i]
             # if temp > 0 and x[i] == 0:
                 # continue
             temp = temp.item()

# mutant 47
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -29,7 +29,7 @@
             # if temp > 0 and x[i] == 0:
                 # continue
             temp = temp.item()
-            if p[i, i] > 0:
+            if p[i, i] >= 0:
                 xi = -(temp / p[i, i]).item()
                 xi = np.maximum(low, xi)
                 xi = np.minimum(up, xi)

# mutant 49
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -30,7 +30,7 @@
                 # continue
             temp = temp.item()
             if p[i, i] > 0:
-                xi = -(temp / p[i, i]).item()
+                xi = +(temp / p[i, i]).item()
                 xi = np.maximum(low, xi)
                 xi = np.minimum(up, xi)
             elif p[i, i] < 0:

# mutant 50
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -30,7 +30,7 @@
                 # continue
             temp = temp.item()
             if p[i, i] > 0:
-                xi = -(temp / p[i, i]).item()
+                xi = -(temp * p[i, i]).item()
                 xi = np.maximum(low, xi)
                 xi = np.minimum(up, xi)
             elif p[i, i] < 0:

# mutant 52
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -31,7 +31,7 @@
             temp = temp.item()
             if p[i, i] > 0:
                 xi = -(temp / p[i, i]).item()
-                xi = np.maximum(low, xi)
+                xi = np.maximum(5.6654770381688415*low, xi)
                 xi = np.minimum(up, xi)
             elif p[i, i] < 0:
                 xi = -1

# mutant 53
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -31,7 +31,7 @@
             temp = temp.item()
             if p[i, i] > 0:
                 xi = -(temp / p[i, i]).item()
-                xi = np.maximum(low, xi)
+                xi = np.maximum(low-27.28297286078051, xi)
                 xi = np.minimum(up, xi)
             elif p[i, i] < 0:
                 xi = -1

# mutant 54
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -31,7 +31,7 @@
             temp = temp.item()
             if p[i, i] > 0:
                 xi = -(temp / p[i, i]).item()
-                xi = np.maximum(low, xi)
+                xi = np.maximum(low,-2.3874560162580263*xi)
                 xi = np.minimum(up, xi)
             elif p[i, i] < 0:
                 xi = -1

# mutant 55
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -31,7 +31,7 @@
             temp = temp.item()
             if p[i, i] > 0:
                 xi = -(temp / p[i, i]).item()
-                xi = np.maximum(low, xi)
+                xi = np.maximum(low,xi+5.24785628772349)
                 xi = np.minimum(up, xi)
             elif p[i, i] < 0:
                 xi = -1

# mutant 57
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -32,7 +32,7 @@
             if p[i, i] > 0:
                 xi = -(temp / p[i, i]).item()
                 xi = np.maximum(low, xi)
-                xi = np.minimum(up, xi)
+                xi = np.minimum(-8.478056210072996*up, xi)
             elif p[i, i] < 0:
                 xi = -1
                 print('error')

# mutant 58
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -32,7 +32,7 @@
             if p[i, i] > 0:
                 xi = -(temp / p[i, i]).item()
                 xi = np.maximum(low, xi)
-                xi = np.minimum(up, xi)
+                xi = np.minimum(up-25.60285826963394, xi)
             elif p[i, i] < 0:
                 xi = -1
                 print('error')

# mutant 59
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -32,7 +32,7 @@
             if p[i, i] > 0:
                 xi = -(temp / p[i, i]).item()
                 xi = np.maximum(low, xi)
-                xi = np.minimum(up, xi)
+                xi = np.minimum(up,4.762069719526436*xi)
             elif p[i, i] < 0:
                 xi = -1
                 print('error')

# mutant 60
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -32,7 +32,7 @@
             if p[i, i] > 0:
                 xi = -(temp / p[i, i]).item()
                 xi = np.maximum(low, xi)
-                xi = np.minimum(up, xi)
+                xi = np.minimum(up,xi+0.7189620789332823)
             elif p[i, i] < 0:
                 xi = -1
                 print('error')

# mutant 61
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -32,7 +32,7 @@
             if p[i, i] > 0:
                 xi = -(temp / p[i, i]).item()
                 xi = np.maximum(low, xi)
-                xi = np.minimum(up, xi)
+                xi = None
             elif p[i, i] < 0:
                 xi = -1
                 print('error')

# mutant 62
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -33,7 +33,7 @@
                 xi = -(temp / p[i, i]).item()
                 xi = np.maximum(low, xi)
                 xi = np.minimum(up, xi)
-            elif p[i, i] < 0:
+            elif p[i, i] <= 0:
                 xi = -1
                 print('error')
             else:

# mutant 63
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -33,7 +33,7 @@
                 xi = -(temp / p[i, i]).item()
                 xi = np.maximum(low, xi)
                 xi = np.minimum(up, xi)
-            elif p[i, i] < 0:
+            elif p[i, i] < -10.414154604874915:
                 xi = -1
                 print('error')
             else:

# mutant 64
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -34,7 +34,7 @@
                 xi = np.maximum(low, xi)
                 xi = np.minimum(up, xi)
             elif p[i, i] < 0:
-                xi = -1
+                xi = +1
                 print('error')
             else:
                 if temp > 0:

# mutant 65
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -34,7 +34,7 @@
                 xi = np.maximum(low, xi)
                 xi = np.minimum(up, xi)
             elif p[i, i] < 0:
-                xi = -1
+                xi = -3.9580331940917115
                 print('error')
             else:
                 if temp > 0:

# mutant 66
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -34,7 +34,7 @@
                 xi = np.maximum(low, xi)
                 xi = np.minimum(up, xi)
             elif p[i, i] < 0:
-                xi = -1
+                xi = None
                 print('error')
             else:
                 if temp > 0:

# mutant 67
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -35,7 +35,7 @@
                 xi = np.minimum(up, xi)
             elif p[i, i] < 0:
                 xi = -1
-                print('error')
+                print('XXerrorXX')
             else:
                 if temp > 0:
                     xi = low

# mutant 68
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -37,7 +37,7 @@
                 xi = -1
                 print('error')
             else:
-                if temp > 0:
+                if temp >= 0:
                     xi = low
             x[i, 0] = xi


# mutant 69
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -37,7 +37,7 @@
                 xi = -1
                 print('error')
             else:
-                if temp > 0:
+                if temp > -10.252516654836185:
                     xi = low
             x[i, 0] = xi


# mutant 70
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -38,7 +38,7 @@
                 print('error')
             else:
                 if temp > 0:
-                    xi = low
+                    xi = None
             x[i, 0] = xi



# mutant 72
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -39,7 +39,7 @@
             else:
                 if temp > 0:
                     xi = low
-            x[i, 0] = xi
+            x[i, 0] = None


         # for u in range(m):

# mutant 73
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -67,7 +67,7 @@



-        dual = -(0.5 * x.T * (p * x) + q.T * x)
+        dual = +(0.5 * x.T * (p * x) + q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 74
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -67,7 +67,7 @@



-        dual = -(0.5 * x.T * (p * x) + q.T * x)
+        dual = -(-3.5793169570102537 * x.T * (p * x) + q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 75
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -67,7 +67,7 @@



-        dual = -(0.5 * x.T * (p * x) + q.T * x)
+        dual = -(0.5 / x.T * (p * x) + q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 78
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -67,7 +67,7 @@



-        dual = -(0.5 * x.T * (p * x) + q.T * x)
+        dual = -(0.5 * x.T * (p * x) - q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 80
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -67,7 +67,7 @@



-        dual = -(0.5 * x.T * (p * x) + q.T * x)
+        dual = -(0.5 * x.T * (-0.20696161095942633*p * x) + q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 82
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -67,7 +67,7 @@



-        dual = -(0.5 * x.T * (p * x) + q.T * x)
+        dual = -(0.5 * x.T * (p *-2.47865963121137*x) + q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 83
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -67,7 +67,7 @@



-        dual = -(0.5 * x.T * (p * x) + q.T * x)
+        dual = -(0.5 * x.T * (p *x+1.5337354896717483) + q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 84
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -67,7 +67,7 @@



-        dual = -(0.5 * x.T * (p * x) + q.T * x)
+        dual = -(0.5 * x.T * (p * x) + q.T *1.9474697841889184*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 85
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -67,7 +67,7 @@



-        dual = -(0.5 * x.T * (p * x) + q.T * x)
+        dual = -(0.5 * x.T * (p * x) + q.T *x+12.45244085413822)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 91
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -69,7 +69,7 @@

         dual = -(0.5 * x.T * (p * x) + q.T * x)
         dual = dual.item()
-        y1 = np.reshape(y, (-1, 1))
+        y1 = np.reshape(-3.8998984629054814*y, (-1, 1))
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)

# mutant 92
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -69,7 +69,7 @@

         dual = -(0.5 * x.T * (p * x) + q.T * x)
         dual = dual.item()
-        y1 = np.reshape(y, (-1, 1))
+        y1 = np.reshape(y+7.468554487381271, (-1, 1))
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)

# mutant 94
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -70,7 +70,7 @@
         dual = -(0.5 * x.T * (p * x) + q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
-        lambda1 = np.multiply(x, y1)
+        lambda1 = np.multiply(-0.627931448369925*x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)

# mutant 95
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -70,7 +70,7 @@
         dual = -(0.5 * x.T * (p * x) + q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
-        lambda1 = np.multiply(x, y1)
+        lambda1 = np.multiply(x-24.84533761882649, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)

# mutant 96
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -70,7 +70,7 @@
         dual = -(0.5 * x.T * (p * x) + q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
-        lambda1 = np.multiply(x, y1)
+        lambda1 = np.multiply(x,-0.3437382737387449*y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)

# mutant 97
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -70,7 +70,7 @@
         dual = -(0.5 * x.T * (p * x) + q.T * x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
-        lambda1 = np.multiply(x, y1)
+        lambda1 = np.multiply(x,y1+6.261913939128244)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)

# mutant 99
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -71,7 +71,7 @@
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)
-        w = np.dot(X.T, lambda1)
+        w = np.dot(X.T,3.764327961604075*lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
         primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))

# mutant 100
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -71,7 +71,7 @@
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)
-        w = np.dot(X.T, lambda1)
+        w = np.dot(X.T,lambda1-0.5869465137718951)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
         primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))

# mutant 106
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -73,7 +73,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
+        tmp = np.maximum(9.1386807313406 - np.multiply(y1, X * w), 0)
         primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
         primal = primal.item()


# mutant 107
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -73,7 +73,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
+        tmp = np.maximum(1 + np.multiply(y1, X * w), 0)
         primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
         primal = primal.item()


# mutant 109
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -73,7 +73,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
+        tmp = np.maximum(1 - np.multiply(1.453175807532452*y1, X * w), 0)
         primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
         primal = primal.item()


# mutant 110
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -73,7 +73,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
+        tmp = np.maximum(1 - np.multiply(y1+12.127867960472013, X * w), 0)
         primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
         primal = primal.item()


# mutant 111
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -73,7 +73,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
+        tmp = np.maximum(1 - np.multiply(y1, X * w), -12.724452531121305)
         primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
         primal = primal.item()


# mutant 113
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -74,7 +74,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
-        primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
+        primal = 15.175231067571325 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
         primal = primal.item()

         # stop criteria

# mutant 114
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -74,7 +74,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
-        primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
+        primal = 0.5 / np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
         primal = primal.item()

         # stop criteria

# mutant 115
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -74,7 +74,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
-        primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
+        primal = 0.5 * np.linalg.norm(w)*2 + 1 * np.sum(np.square(tmp))
         primal = primal.item()

         # stop criteria

# mutant 116
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -74,7 +74,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
-        primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
+        primal = 0.5 * np.linalg.norm(w)**-1.985592171416509 + 1 * np.sum(np.square(tmp))
         primal = primal.item()

         # stop criteria

# mutant 117
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -74,7 +74,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
-        primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
+        primal = 0.5 * np.linalg.norm(w)**2 - 1 * np.sum(np.square(tmp))
         primal = primal.item()

         # stop criteria

# mutant 118
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -74,7 +74,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
-        primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
+        primal = 0.5 * np.linalg.norm(w)**2 + 3.4399257481074113 * np.sum(np.square(tmp))
         primal = primal.item()

         # stop criteria

# mutant 119
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -74,7 +74,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1 - np.multiply(y1, X * w), 0)
-        primal = 0.5 * np.linalg.norm(w)**2 + 1 * np.sum(np.square(tmp))
+        primal = 0.5 * np.linalg.norm(w)**2 + 1 / np.sum(np.square(tmp))
         primal = primal.item()

         # stop criteria

# mutant 122
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -81,7 +81,7 @@
         # if k % 10 == 0:
             # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(dual + primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
             #print('success')
             break


# mutant 123
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -81,7 +81,7 @@
         # if k % 10 == 0:
             # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(-9.634882210611698*dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
             #print('success')
             break


# mutant 124
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -81,7 +81,7 @@
         # if k % 10 == 0:
             # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(dual+5.959116059480909 - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
             #print('success')
             break


# mutant 125
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -81,7 +81,7 @@
         # if k % 10 == 0:
             # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(dual --29.809497210293365*primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
             #print('success')
             break


# mutant 126
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -81,7 +81,7 @@
         # if k % 10 == 0:
             # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(dual -primal+3.4196472574246233) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
             #print('success')
             break


# mutant 127
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -81,7 +81,7 @@
         # if k % 10 == 0:
             # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(dual - primal) * (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
             #print('success')
             break


# mutant 128
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -81,7 +81,7 @@
         # if k % 10 == 0:
             # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(dual - primal) / (18.090009159084293 + np.abs(dual) + np.abs(primal)) < 1e-12:
             #print('success')
             break


# mutant 129
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -81,7 +81,7 @@
         # if k % 10 == 0:
             # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(dual - primal) / (1 - np.abs(dual) + np.abs(primal)) < 1e-12:
             #print('success')
             break


# mutant 130
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -81,7 +81,7 @@
         # if k % 10 == 0:
             # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(dual - primal) / (1 + np.abs(dual) - np.abs(primal)) < 1e-12:
             #print('success')
             break


# mutant 131
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -81,7 +81,7 @@
         # if k % 10 == 0:
             # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) <= 1e-12:
             #print('success')
             break


# mutant 132
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -81,7 +81,7 @@
         # if k % 10 == 0:
             # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
-        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
+        if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 6.4923171888335816:
             #print('success')
             break


# mutant 133
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -83,7 +83,7 @@
         # print(np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)))
         if np.abs(dual - primal) / (1 + np.abs(dual) + np.abs(primal)) < 1e-12:
             #print('success')
-            break
+            continue

     return w


# mutant 134
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -92,7 +92,7 @@
 class SQP_L2_gv():

     def fit(self, X, y):
-        y[y == 0] = -1
+        y[y != 0] = -1
         # add logitR to verify the correctness
         # from sklearn.svm import LinearSVC
         # SVM = LinearSVC(loss='squared_hinge', tol=1e-6, max_iter=100000, verbose=0).fit(X, np.array(y).ravel())

# mutant 135
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -92,7 +92,7 @@
 class SQP_L2_gv():

     def fit(self, X, y):
-        y[y == 0] = -1
+        y[y == -0.6552249826102298] = -1
         # add logitR to verify the correctness
         # from sklearn.svm import LinearSVC
         # SVM = LinearSVC(loss='squared_hinge', tol=1e-6, max_iter=100000, verbose=0).fit(X, np.array(y).ravel())

# mutant 136
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -92,7 +92,7 @@
 class SQP_L2_gv():

     def fit(self, X, y):
-        y[y == 0] = -1
+        y[y == 0] = +1
         # add logitR to verify the correctness
         # from sklearn.svm import LinearSVC
         # SVM = LinearSVC(loss='squared_hinge', tol=1e-6, max_iter=100000, verbose=0).fit(X, np.array(y).ravel())

# mutant 137
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -92,7 +92,7 @@
 class SQP_L2_gv():

     def fit(self, X, y):
-        y[y == 0] = -1
+        y[y == 0] = -11.09657948353789
         # add logitR to verify the correctness
         # from sklearn.svm import LinearSVC
         # SVM = LinearSVC(loss='squared_hinge', tol=1e-6, max_iter=100000, verbose=0).fit(X, np.array(y).ravel())

# mutant 140
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -102,7 +102,7 @@
         m, n = X.shape
         #import time
         #t1 = time.time()
-        w = inner_point(X, y)
+        w = inner_point(-16.547588595909875*X, y)
         #t2 = time.time()
         #print(t2-t1, 's')
         w = np.array(w).reshape(-1)

# mutant 141
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -102,7 +102,7 @@
         m, n = X.shape
         #import time
         #t1 = time.time()
-        w = inner_point(X, y)
+        w = inner_point(X-10.363669690419986, y)
         #t2 = time.time()
         #print(t2-t1, 's')
         w = np.array(w).reshape(-1)

# mutant 142
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -102,7 +102,7 @@
         m, n = X.shape
         #import time
         #t1 = time.time()
-        w = inner_point(X, y)
+        w = inner_point(X,1.9015028493451416*y)
         #t2 = time.time()
         #print(t2-t1, 's')
         w = np.array(w).reshape(-1)

# mutant 143
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -102,7 +102,7 @@
         m, n = X.shape
         #import time
         #t1 = time.time()
-        w = inner_point(X, y)
+        w = inner_point(X,y-9.22443115070501)
         #t2 = time.time()
         #print(t2-t1, 's')
         w = np.array(w).reshape(-1)

# mutant 151
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -113,7 +113,7 @@

         # print('diff', np.linalg.norm(w1-w), b, b1)

-        clf = Clf(w, b)
+        clf = Clf(-4.641826994101605*w, b)
         # clf = Clf(w1, b1)
         return clf


# mutant 152
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -113,7 +113,7 @@

         # print('diff', np.linalg.norm(w1-w), b, b1)

-        clf = Clf(w, b)
+        clf = Clf(w-5.524973190281571, b)
         # clf = Clf(w1, b1)
         return clf


# mutant 153
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -113,7 +113,7 @@

         # print('diff', np.linalg.norm(w1-w), b, b1)

-        clf = Clf(w, b)
+        clf = Clf(w,-5.329650583617775*b)
         # clf = Clf(w1, b1)
         return clf


# mutant 154
--- algorithms\SQP_L2_gv.py
+++ algorithms\SQP_L2_gv.py
@@ -113,7 +113,7 @@

         # print('diff', np.linalg.norm(w1-w), b, b1)

-        clf = Clf(w, b)
+        clf = Clf(w,b+5.329583132346828)
         # clf = Clf(w1, b1)
         return clf
