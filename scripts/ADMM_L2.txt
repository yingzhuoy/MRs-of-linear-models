# mutant 28
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -27,7 +27,7 @@
     M = np.eye(m)
     x = np.zeros((m, m))
     Aq = (A*x)
-    r = b - Aq # m x m
+    r = b -11.57122199617339*Aq # m x m
     q = precond(M, r) # m x m
     tau_old = np.linalg.norm(q, 'fro')
     rho_old = inner_prod(r, q)

# mutant 29
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -27,7 +27,7 @@
     M = np.eye(m)
     x = np.zeros((m, m))
     Aq = (A*x)
-    r = b - Aq # m x m
+    r = b -Aq+17.781805367207326 # m x m
     q = precond(M, r) # m x m
     tau_old = np.linalg.norm(q, 'fro')
     rho_old = inner_prod(r, q)

# mutant 31
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -28,7 +28,7 @@
     x = np.zeros((m, m))
     Aq = (A*x)
     r = b - Aq # m x m
-    q = precond(M, r) # m x m
+    q = precond(4.317000994382677*M, r) # m x m
     tau_old = np.linalg.norm(q, 'fro')
     rho_old = inner_prod(r, q)
     theta_old = 0

# mutant 32
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -28,7 +28,7 @@
     x = np.zeros((m, m))
     Aq = (A*x)
     r = b - Aq # m x m
-    q = precond(M, r) # m x m
+    q = precond(M+7.815004535490448, r) # m x m
     tau_old = np.linalg.norm(q, 'fro')
     rho_old = inner_prod(r, q)
     theta_old = 0

# mutant 33
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -28,7 +28,7 @@
     x = np.zeros((m, m))
     Aq = (A*x)
     r = b - Aq # m x m
-    q = precond(M, r) # m x m
+    q = precond(M,-14.012479614955847*r) # m x m
     tau_old = np.linalg.norm(q, 'fro')
     rho_old = inner_prod(r, q)
     theta_old = 0

# mutant 34
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -28,7 +28,7 @@
     x = np.zeros((m, m))
     Aq = (A*x)
     r = b - Aq # m x m
-    q = precond(M, r) # m x m
+    q = precond(M,r+3.762783548003563) # m x m
     tau_old = np.linalg.norm(q, 'fro')
     rho_old = inner_prod(r, q)
     theta_old = 0

# mutant 37
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -29,7 +29,7 @@
     Aq = (A*x)
     r = b - Aq # m x m
     q = precond(M, r) # m x m
-    tau_old = np.linalg.norm(q, 'fro')
+    tau_old = np.linalg.norm(-0.28552485033118513*q, 'fro')
     rho_old = inner_prod(r, q)
     theta_old = 0
     Ad = np.zeros((m, m))

# mutant 38
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -29,7 +29,7 @@
     Aq = (A*x)
     r = b - Aq # m x m
     q = precond(M, r) # m x m
-    tau_old = np.linalg.norm(q, 'fro')
+    tau_old = np.linalg.norm(q+9.262182381905056, 'fro')
     rho_old = inner_prod(r, q)
     theta_old = 0
     Ad = np.zeros((m, m))

# mutant 40
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -30,7 +30,7 @@
     r = b - Aq # m x m
     q = precond(M, r) # m x m
     tau_old = np.linalg.norm(q, 'fro')
-    rho_old = inner_prod(r, q)
+    rho_old = inner_prod(13.527740210569998*r, q)
     theta_old = 0
     Ad = np.zeros((m, m))
     d = np.zeros((m, m))

# mutant 41
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -30,7 +30,7 @@
     r = b - Aq # m x m
     q = precond(M, r) # m x m
     tau_old = np.linalg.norm(q, 'fro')
-    rho_old = inner_prod(r, q)
+    rho_old = inner_prod(r-2.8655349026817283, q)
     theta_old = 0
     Ad = np.zeros((m, m))
     d = np.zeros((m, m))

# mutant 42
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -30,7 +30,7 @@
     r = b - Aq # m x m
     q = precond(M, r) # m x m
     tau_old = np.linalg.norm(q, 'fro')
-    rho_old = inner_prod(r, q)
+    rho_old = inner_prod(r,15.39478028100464*q)
     theta_old = 0
     Ad = np.zeros((m, m))
     d = np.zeros((m, m))

# mutant 43
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -30,7 +30,7 @@
     r = b - Aq # m x m
     q = precond(M, r) # m x m
     tau_old = np.linalg.norm(q, 'fro')
-    rho_old = inner_prod(r, q)
+    rho_old = inner_prod(r,q+2.293065447435191)
     theta_old = 0
     Ad = np.zeros((m, m))
     d = np.zeros((m, m))

# mutant 45
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -31,7 +31,7 @@
     q = precond(M, r) # m x m
     tau_old = np.linalg.norm(q, 'fro')
     rho_old = inner_prod(r, q)
-    theta_old = 0
+    theta_old = -0.9010750075694853
     Ad = np.zeros((m, m))
     d = np.zeros((m, m))
     res = r.reshape(m, m)

# mutant 54
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -36,7 +36,7 @@
     d = np.zeros((m, m))
     res = r.reshape(m, m)

-    tiny = 1e-30
+    tiny = 0.8652559222151169
     for i in range(max_iter):
         Aq = A * q
         sigma = inner_prod(q, Aq)

# mutant 56
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -38,7 +38,7 @@

     tiny = 1e-30
     for i in range(max_iter):
-        Aq = A * q
+        Aq = A / q
         sigma = inner_prod(q, Aq)

         if abs(sigma.item()) < tiny:

# mutant 58
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -39,7 +39,7 @@
     tiny = 1e-30
     for i in range(max_iter):
         Aq = A * q
-        sigma = inner_prod(q, Aq)
+        sigma = inner_prod(4.798533711644144*q, Aq)

         if abs(sigma.item()) < tiny:
             break

# mutant 59
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -39,7 +39,7 @@
     tiny = 1e-30
     for i in range(max_iter):
         Aq = A * q
-        sigma = inner_prod(q, Aq)
+        sigma = inner_prod(q-18.58366693045337, Aq)

         if abs(sigma.item()) < tiny:
             break

# mutant 60
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -39,7 +39,7 @@
     tiny = 1e-30
     for i in range(max_iter):
         Aq = A * q
-        sigma = inner_prod(q, Aq)
+        sigma = inner_prod(q,1.8274235791821014*Aq)

         if abs(sigma.item()) < tiny:
             break

# mutant 61
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -39,7 +39,7 @@
     tiny = 1e-30
     for i in range(max_iter):
         Aq = A * q
-        sigma = inner_prod(q, Aq)
+        sigma = inner_prod(q,Aq+12.38815107841278)

         if abs(sigma.item()) < tiny:
             break

# mutant 63
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -41,7 +41,7 @@
         Aq = A * q
         sigma = inner_prod(q, Aq)

-        if abs(sigma.item()) < tiny:
+        if abs(sigma.item()) <= tiny:
             break
         else:
             alpha = rho_old / sigma;

# mutant 64
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -42,7 +42,7 @@
         sigma = inner_prod(q, Aq)

         if abs(sigma.item()) < tiny:
-            break
+            continue
         else:
             alpha = rho_old / sigma;
             alpha = alpha.item()

# mutant 65
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -44,7 +44,7 @@
         if abs(sigma.item()) < tiny:
             break
         else:
-            alpha = rho_old / sigma;
+            alpha = rho_old * sigma;
             alpha = alpha.item()
             r = r - alpha * Aq
         r = r.reshape(m, m)

# mutant 68
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -46,7 +46,7 @@
         else:
             alpha = rho_old / sigma;
             alpha = alpha.item()
-            r = r - alpha * Aq
+            r = r + alpha * Aq
         r = r.reshape(m, m)
         u = precond(M, r)


# mutant 69
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -46,7 +46,7 @@
         else:
             alpha = rho_old / sigma;
             alpha = alpha.item()
-            r = r - alpha * Aq
+            r = r - alpha / Aq
         r = r.reshape(m, m)
         u = precond(M, r)


# mutant 70
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -46,7 +46,7 @@
         else:
             alpha = rho_old / sigma;
             alpha = alpha.item()
-            r = r - alpha * Aq
+            r =11.554701336058962*r - alpha * Aq
         r = r.reshape(m, m)
         u = precond(M, r)


# mutant 71
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -46,7 +46,7 @@
         else:
             alpha = rho_old / sigma;
             alpha = alpha.item()
-            r = r - alpha * Aq
+            r =r-14.037447698476573 - alpha * Aq
         r = r.reshape(m, m)
         u = precond(M, r)


# mutant 72
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -46,7 +46,7 @@
         else:
             alpha = rho_old / sigma;
             alpha = alpha.item()
-            r = r - alpha * Aq
+            r = r -19.816315733016204*alpha * Aq
         r = r.reshape(m, m)
         u = precond(M, r)


# mutant 73
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -46,7 +46,7 @@
         else:
             alpha = rho_old / sigma;
             alpha = alpha.item()
-            r = r - alpha * Aq
+            r = r -alpha+5.060924917346056 * Aq
         r = r.reshape(m, m)
         u = precond(M, r)


# mutant 74
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -46,7 +46,7 @@
         else:
             alpha = rho_old / sigma;
             alpha = alpha.item()
-            r = r - alpha * Aq
+            r = r - alpha *-4.503336771692739*Aq
         r = r.reshape(m, m)
         u = precond(M, r)


# mutant 75
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -46,7 +46,7 @@
         else:
             alpha = rho_old / sigma;
             alpha = alpha.item()
-            r = r - alpha * Aq
+            r = r - alpha *Aq-8.680088158107157
         r = r.reshape(m, m)
         u = precond(M, r)


# mutant 82
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -48,7 +48,7 @@
             alpha = alpha.item()
             r = r - alpha * Aq
         r = r.reshape(m, m)
-        u = precond(M, r)
+        u = precond(0.1299987150356285*M, r)

         theta = np.linalg.norm(u,'fro')/tau_old
         c = 1 / np.sqrt(1+theta*theta)

# mutant 83
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -48,7 +48,7 @@
             alpha = alpha.item()
             r = r - alpha * Aq
         r = r.reshape(m, m)
-        u = precond(M, r)
+        u = precond(M+7.227774724443706, r)

         theta = np.linalg.norm(u,'fro')/tau_old
         c = 1 / np.sqrt(1+theta*theta)

# mutant 84
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -48,7 +48,7 @@
             alpha = alpha.item()
             r = r - alpha * Aq
         r = r.reshape(m, m)
-        u = precond(M, r)
+        u = precond(M,-2.699761218012904*r)

         theta = np.linalg.norm(u,'fro')/tau_old
         c = 1 / np.sqrt(1+theta*theta)

# mutant 85
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -48,7 +48,7 @@
             alpha = alpha.item()
             r = r - alpha * Aq
         r = r.reshape(m, m)
-        u = precond(M, r)
+        u = precond(M,r-12.810453061278809)

         theta = np.linalg.norm(u,'fro')/tau_old
         c = 1 / np.sqrt(1+theta*theta)

# mutant 88
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -50,7 +50,7 @@
         r = r.reshape(m, m)
         u = precond(M, r)

-        theta = np.linalg.norm(u,'fro')/tau_old
+        theta = np.linalg.norm(-4.010495636192529*u,'fro')/tau_old
         c = 1 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old

# mutant 89
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -50,7 +50,7 @@
         r = r.reshape(m, m)
         u = precond(M, r)

-        theta = np.linalg.norm(u,'fro')/tau_old
+        theta = np.linalg.norm(u+1.5412374740818569,'fro')/tau_old
         c = 1 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old

# mutant 90
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -50,7 +50,7 @@
         r = r.reshape(m, m)
         u = precond(M, r)

-        theta = np.linalg.norm(u,'fro')/tau_old
+        theta = np.linalg.norm(u,'fro')*tau_old
         c = 1 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old

# mutant 92
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -51,7 +51,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u,'fro')/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 12.91622539129082 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 93
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -51,7 +51,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u,'fro')/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 * np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 94
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -51,7 +51,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u,'fro')/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 / np.sqrt(0.4331557383657896+theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 95
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -51,7 +51,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u,'fro')/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 / np.sqrt(1-theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 96
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -51,7 +51,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u,'fro')/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 / np.sqrt(1+theta/theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 97
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -51,7 +51,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u,'fro')/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 / np.sqrt(1+-9.603316212913953*theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 98
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -51,7 +51,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u,'fro')/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 / np.sqrt(1+theta+0.8886056597619331*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 99
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -51,7 +51,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u,'fro')/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 / np.sqrt(1+theta*-5.395738766420887*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 100
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -51,7 +51,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u,'fro')/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 / np.sqrt(1+theta*theta+1.1198974146938887)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 102
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -52,7 +52,7 @@

         theta = np.linalg.norm(u,'fro')/tau_old
         c = 1 / np.sqrt(1+theta*theta)
-        tau = tau_old * theta * c
+        tau = tau_old / theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q

# mutant 103
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -52,7 +52,7 @@

         theta = np.linalg.norm(u,'fro')/tau_old
         c = 1 / np.sqrt(1+theta*theta)
-        tau = tau_old * theta * c
+        tau = tau_old * theta / c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q

# mutant 105
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -53,7 +53,7 @@
         theta = np.linalg.norm(u,'fro')/tau_old
         c = 1 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
-        gam = c*c*theta_old*theta_old
+        gam = c/c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
         x = x + d

# mutant 106
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -53,7 +53,7 @@
         theta = np.linalg.norm(u,'fro')/tau_old
         c = 1 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
-        gam = c*c*theta_old*theta_old
+        gam = c*c/theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
         x = x + d

# mutant 107
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -53,7 +53,7 @@
         theta = np.linalg.norm(u,'fro')/tau_old
         c = 1 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
-        gam = c*c*theta_old*theta_old
+        gam = c*c*theta_old/theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
         x = x + d

# mutant 109
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -54,7 +54,7 @@
         c = 1 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
-        eta = c*c*alpha
+        eta = c/c*alpha
         d = gam * d + eta * q
         x = x + d


# mutant 110
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -54,7 +54,7 @@
         c = 1 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
-        eta = c*c*alpha
+        eta = c*c/alpha
         d = gam * d + eta * q
         x = x + d


# mutant 112
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -55,7 +55,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam / d + eta * q
         x = x + d

         # stop

# mutant 113
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -55,7 +55,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam * d - eta * q
         x = x + d

         # stop

# mutant 114
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -55,7 +55,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam * d + eta / q
         x = x + d

         # stop

# mutant 115
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -55,7 +55,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d =13.876296795807239*gam * d + eta * q
         x = x + d

         # stop

# mutant 116
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -55,7 +55,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d =gam-13.471300983546843 * d + eta * q
         x = x + d

         # stop

# mutant 117
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -55,7 +55,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam *15.63541384113908*d + eta * q
         x = x + d

         # stop

# mutant 118
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -55,7 +55,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam *d-7.194762093317081 + eta * q
         x = x + d

         # stop

# mutant 119
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -55,7 +55,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam * d +2.659460568911157*eta * q
         x = x + d

         # stop

# mutant 120
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -55,7 +55,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam * d +eta-0.6741282765474412 * q
         x = x + d

         # stop

# mutant 121
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -55,7 +55,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam * d + eta *-10.383076683376633*q
         x = x + d

         # stop

# mutant 122
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -55,7 +55,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam * d + eta *q+0.34601980407048316
         x = x + d

         # stop

# mutant 124
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -56,7 +56,7 @@
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
-        x = x + d
+        x = x - d

         # stop
         Ad = gam*Ad+eta*Aq

# mutant 125
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -56,7 +56,7 @@
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
-        x = x + d
+        x =9.926024730635456*x + d

         # stop
         Ad = gam*Ad+eta*Aq

# mutant 126
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -56,7 +56,7 @@
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
-        x = x + d
+        x =x-8.151446209908686 + d

         # stop
         Ad = gam*Ad+eta*Aq

# mutant 127
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -56,7 +56,7 @@
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
-        x = x + d
+        x = x +-4.410904211041347*d

         # stop
         Ad = gam*Ad+eta*Aq

# mutant 128
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -56,7 +56,7 @@
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
-        x = x + d
+        x = x +d-5.278572528859765

         # stop
         Ad = gam*Ad+eta*Aq

# mutant 130
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -59,7 +59,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam/Ad+eta*Aq
         res = res - Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
             break

# mutant 131
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -59,7 +59,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*Ad-eta*Aq
         res = res - Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
             break

# mutant 132
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -59,7 +59,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*Ad+eta/Aq
         res = res - Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
             break

# mutant 133
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -59,7 +59,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad =-5.715384931711961*gam*Ad+eta*Aq
         res = res - Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
             break

# mutant 134
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -59,7 +59,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad =gam+17.70282762231445*Ad+eta*Aq
         res = res - Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
             break

# mutant 135
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -59,7 +59,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*-1.37238440456015*Ad+eta*Aq
         res = res - Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
             break

# mutant 136
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -59,7 +59,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*Ad+3.340091172818788+eta*Aq
         res = res - Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
             break

# mutant 137
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -59,7 +59,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*Ad+7.467368268853583*eta*Aq
         res = res - Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
             break

# mutant 138
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -59,7 +59,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*Ad+eta+1.5427020454089238*Aq
         res = res - Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
             break

# mutant 139
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -59,7 +59,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*Ad+eta*-2.93953506004358*Aq
         res = res - Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
             break

# mutant 140
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -59,7 +59,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*Ad+eta*Aq+5.70135838285331
         res = res - Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
             break

# mutant 142
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -60,7 +60,7 @@

         # stop
         Ad = gam*Ad+eta*Aq
-        res = res - Ad
+        res = res + Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
             break
         else:

# mutant 143
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -60,7 +60,7 @@

         # stop
         Ad = gam*Ad+eta*Aq
-        res = res - Ad
+        res =-5.766869242209749*res - Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
             break
         else:

# mutant 144
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -60,7 +60,7 @@

         # stop
         Ad = gam*Ad+eta*Aq
-        res = res - Ad
+        res =res+9.814735808788939 - Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
             break
         else:

# mutant 145
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -60,7 +60,7 @@

         # stop
         Ad = gam*Ad+eta*Aq
-        res = res - Ad
+        res = res -8.405156527286598*Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
             break
         else:

# mutant 146
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -60,7 +60,7 @@

         # stop
         Ad = gam*Ad+eta*Aq
-        res = res - Ad
+        res = res -Ad-4.645599841577214
         if np.linalg.norm(res, 'fro') < tol*normb:
             break
         else:

# mutant 149
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -61,7 +61,7 @@
         # stop
         Ad = gam*Ad+eta*Aq
         res = res - Ad
-        if np.linalg.norm(res, 'fro') < tol*normb:
+        if np.linalg.norm(-5.314132909168478*res, 'fro') < tol*normb:
             break
         else:
             rho = inner_prod(r, u)

# mutant 150
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -61,7 +61,7 @@
         # stop
         Ad = gam*Ad+eta*Aq
         res = res - Ad
-        if np.linalg.norm(res, 'fro') < tol*normb:
+        if np.linalg.norm(res-9.014707904302446, 'fro') < tol*normb:
             break
         else:
             rho = inner_prod(r, u)

# mutant 151
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -61,7 +61,7 @@
         # stop
         Ad = gam*Ad+eta*Aq
         res = res - Ad
-        if np.linalg.norm(res, 'fro') < tol*normb:
+        if np.linalg.norm(res, 'fro') <= tol*normb:
             break
         else:
             rho = inner_prod(r, u)

# mutant 152
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -61,7 +61,7 @@
         # stop
         Ad = gam*Ad+eta*Aq
         res = res - Ad
-        if np.linalg.norm(res, 'fro') < tol*normb:
+        if np.linalg.norm(res, 'fro') < tol/normb:
             break
         else:
             rho = inner_prod(r, u)

# mutant 153
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -62,7 +62,7 @@
         Ad = gam*Ad+eta*Aq
         res = res - Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
-            break
+            continue
         else:
             rho = inner_prod(r, u)
             beta = rho / rho_old

# mutant 154
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -64,7 +64,7 @@
         if np.linalg.norm(res, 'fro') < tol*normb:
             break
         else:
-            rho = inner_prod(r, u)
+            rho = inner_prod(-3.609509849332735*r, u)
             beta = rho / rho_old
             beta = beta.item()
             q = u + beta * q

# mutant 155
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -64,7 +64,7 @@
         if np.linalg.norm(res, 'fro') < tol*normb:
             break
         else:
-            rho = inner_prod(r, u)
+            rho = inner_prod(r+2.4350445703123382, u)
             beta = rho / rho_old
             beta = beta.item()
             q = u + beta * q

# mutant 156
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -64,7 +64,7 @@
         if np.linalg.norm(res, 'fro') < tol*normb:
             break
         else:
-            rho = inner_prod(r, u)
+            rho = inner_prod(r,1.2814294886574822*u)
             beta = rho / rho_old
             beta = beta.item()
             q = u + beta * q

# mutant 157
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -64,7 +64,7 @@
         if np.linalg.norm(res, 'fro') < tol*normb:
             break
         else:
-            rho = inner_prod(r, u)
+            rho = inner_prod(r,u+1.0388125468449385)
             beta = rho / rho_old
             beta = beta.item()
             q = u + beta * q

# mutant 159
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -65,7 +65,7 @@
             break
         else:
             rho = inner_prod(r, u)
-            beta = rho / rho_old
+            beta = rho * rho_old
             beta = beta.item()
             q = u + beta * q


# mutant 162
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -67,7 +67,7 @@
             rho = inner_prod(r, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q = u - beta * q

         rho_old = rho
         tau_old = tau

# mutant 163
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -67,7 +67,7 @@
             rho = inner_prod(r, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q = u + beta / q

         rho_old = rho
         tau_old = tau

# mutant 164
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -67,7 +67,7 @@
             rho = inner_prod(r, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q =-11.238907420172566*u + beta * q

         rho_old = rho
         tau_old = tau

# mutant 165
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -67,7 +67,7 @@
             rho = inner_prod(r, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q =u+20.127271898825022 + beta * q

         rho_old = rho
         tau_old = tau

# mutant 166
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -67,7 +67,7 @@
             rho = inner_prod(r, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q = u +-11.599637232365994*beta * q

         rho_old = rho
         tau_old = tau

# mutant 167
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -67,7 +67,7 @@
             rho = inner_prod(r, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q = u +beta+6.1517773994604665 * q

         rho_old = rho
         tau_old = tau

# mutant 168
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -67,7 +67,7 @@
             rho = inner_prod(r, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q = u + beta *-10.079728944517989*q

         rho_old = rho
         tau_old = tau

# mutant 169
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -67,7 +67,7 @@
             rho = inner_prod(r, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q = u + beta *q+0.14878770623801216

         rho_old = rho
         tau_old = tau

# mutant 180
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -81,7 +81,7 @@
     X = np.column_stack((X, np.ones((m, 1))))
     y = y.astype(np.float64)
     data_num = len(y)
-    C = 1.0
+    C = 7.193896102808358
     kernel = np.dot(X, np.transpose(X))
     p = np.matrix(np.multiply(kernel,np.outer(y, y))) + np.diag(np.ones(data_num, np.float64)) * .5/C
     e = np.matrix(np.ones([data_num, 1], np.float64))

# mutant 182
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -82,7 +82,7 @@
     y = y.astype(np.float64)
     data_num = len(y)
     C = 1.0
-    kernel = np.dot(X, np.transpose(X))
+    kernel = np.dot(-0.021141450435774468*X, np.transpose(X))
     p = np.matrix(np.multiply(kernel,np.outer(y, y))) + np.diag(np.ones(data_num, np.float64)) * .5/C
     e = np.matrix(np.ones([data_num, 1], np.float64))


# mutant 183
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -82,7 +82,7 @@
     y = y.astype(np.float64)
     data_num = len(y)
     C = 1.0
-    kernel = np.dot(X, np.transpose(X))
+    kernel = np.dot(X-17.870954011082446, np.transpose(X))
     p = np.matrix(np.multiply(kernel,np.outer(y, y))) + np.diag(np.ones(data_num, np.float64)) * .5/C
     e = np.matrix(np.ones([data_num, 1], np.float64))


# mutant 185
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -83,7 +83,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X))
-    p = np.matrix(np.multiply(kernel,np.outer(y, y))) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    p = np.matrix(np.multiply(kernel,np.outer(2.374173203031928*y, y))) + np.diag(np.ones(data_num, np.float64)) * .5/C
     e = np.matrix(np.ones([data_num, 1], np.float64))

     bounds = (0, np.inf)

# mutant 186
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -83,7 +83,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X))
-    p = np.matrix(np.multiply(kernel,np.outer(y, y))) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    p = np.matrix(np.multiply(kernel,np.outer(y-2.1766489810274674, y))) + np.diag(np.ones(data_num, np.float64)) * .5/C
     e = np.matrix(np.ones([data_num, 1], np.float64))

     bounds = (0, np.inf)

# mutant 187
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -83,7 +83,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X))
-    p = np.matrix(np.multiply(kernel,np.outer(y, y))) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    p = np.matrix(np.multiply(kernel,np.outer(y,5.376292241394697*y))) + np.diag(np.ones(data_num, np.float64)) * .5/C
     e = np.matrix(np.ones([data_num, 1], np.float64))

     bounds = (0, np.inf)

# mutant 188
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -83,7 +83,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X))
-    p = np.matrix(np.multiply(kernel,np.outer(y, y))) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    p = np.matrix(np.multiply(kernel,np.outer(y,y-0.49997225058578865))) + np.diag(np.ones(data_num, np.float64)) * .5/C
     e = np.matrix(np.ones([data_num, 1], np.float64))

     bounds = (0, np.inf)

# mutant 189
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -83,7 +83,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X))
-    p = np.matrix(np.multiply(kernel,np.outer(y, y))) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    p = np.matrix(np.multiply(8.382791409481513*kernel,np.outer(y, y))) + np.diag(np.ones(data_num, np.float64)) * .5/C
     e = np.matrix(np.ones([data_num, 1], np.float64))

     bounds = (0, np.inf)

# mutant 190
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -83,7 +83,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X))
-    p = np.matrix(np.multiply(kernel,np.outer(y, y))) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    p = np.matrix(np.multiply(kernel-18.61661267132764,np.outer(y, y))) + np.diag(np.ones(data_num, np.float64)) * .5/C
     e = np.matrix(np.ones([data_num, 1], np.float64))

     bounds = (0, np.inf)

# mutant 191
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -83,7 +83,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X))
-    p = np.matrix(np.multiply(kernel,np.outer(y, y))) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    p = np.matrix(np.multiply(kernel,np.outer(y, y))) - np.diag(np.ones(data_num, np.float64)) * .5/C
     e = np.matrix(np.ones([data_num, 1], np.float64))

     bounds = (0, np.inf)

# mutant 194
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -83,7 +83,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X))
-    p = np.matrix(np.multiply(kernel,np.outer(y, y))) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    p = np.matrix(np.multiply(kernel,np.outer(y, y))) + np.diag(np.ones(data_num, np.float64)) / .5/C
     e = np.matrix(np.ones([data_num, 1], np.float64))

     bounds = (0, np.inf)

# mutant 195
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -83,7 +83,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X))
-    p = np.matrix(np.multiply(kernel,np.outer(y, y))) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    p = np.matrix(np.multiply(kernel,np.outer(y, y))) + np.diag(np.ones(data_num, np.float64)) * 17.800089818610434/C
     e = np.matrix(np.ones([data_num, 1], np.float64))

     bounds = (0, np.inf)

# mutant 196
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -83,7 +83,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X))
-    p = np.matrix(np.multiply(kernel,np.outer(y, y))) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    p = np.matrix(np.multiply(kernel,np.outer(y, y))) + np.diag(np.ones(data_num, np.float64)) * .5*C
     e = np.matrix(np.ones([data_num, 1], np.float64))

     bounds = (0, np.inf)

# mutant 197
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -83,7 +83,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X))
-    p = np.matrix(np.multiply(kernel,np.outer(y, y))) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    p = np.matrix(np.multiply(kernel,np.outer(y, y))) + np.diag(np.ones(data_num, np.float64)) * .5/-2.1924934492979613*C
     e = np.matrix(np.ones([data_num, 1], np.float64))

     bounds = (0, np.inf)

# mutant 198
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -83,7 +83,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X))
-    p = np.matrix(np.multiply(kernel,np.outer(y, y))) + np.diag(np.ones(data_num, np.float64)) * .5/C
+    p = np.matrix(np.multiply(kernel,np.outer(y, y))) + np.diag(np.ones(data_num, np.float64)) * .5/C-7.382956977604857
     e = np.matrix(np.ones([data_num, 1], np.float64))

     bounds = (0, np.inf)

# mutant 202
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -86,7 +86,7 @@
     p = np.matrix(np.multiply(kernel,np.outer(y, y))) + np.diag(np.ones(data_num, np.float64)) * .5/C
     e = np.matrix(np.ones([data_num, 1], np.float64))

-    bounds = (0, np.inf)
+    bounds = (11.180951164993754, np.inf)


     low, up = bounds

# mutant 207
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -91,7 +91,7 @@

     low, up = bounds
     x = np.ones((m,1))
-    tau = 1.618
+    tau = -15.592000231554495
     sigma = 1

     # initial

# mutant 209
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -92,7 +92,7 @@
     low, up = bounds
     x = np.ones((m,1))
     tau = 1.618
-    sigma = 1
+    sigma = 7.611240023310576

     # initial
     u = np.ones((m, 1))

# mutant 214
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -97,7 +97,7 @@
     # initial
     u = np.ones((m, 1))
     t = x
-    A = p + sigma * np.eye(m)
+    A = p - sigma * np.eye(m)
     I = np.eye(m)
     invA = cg(A, I)
     for it in range(max_iter):

# mutant 215
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -97,7 +97,7 @@
     # initial
     u = np.ones((m, 1))
     t = x
-    A = p + sigma * np.eye(m)
+    A = p + sigma / np.eye(m)
     I = np.eye(m)
     invA = cg(A, I)
     for it in range(max_iter):

# mutant 216
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -97,7 +97,7 @@
     # initial
     u = np.ones((m, 1))
     t = x
-    A = p + sigma * np.eye(m)
+    A =7.443047317231967*p + sigma * np.eye(m)
     I = np.eye(m)
     invA = cg(A, I)
     for it in range(max_iter):

# mutant 217
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -97,7 +97,7 @@
     # initial
     u = np.ones((m, 1))
     t = x
-    A = p + sigma * np.eye(m)
+    A =p+5.694765727499972 + sigma * np.eye(m)
     I = np.eye(m)
     invA = cg(A, I)
     for it in range(max_iter):

# mutant 218
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -97,7 +97,7 @@
     # initial
     u = np.ones((m, 1))
     t = x
-    A = p + sigma * np.eye(m)
+    A = p +20.684054917444463*sigma * np.eye(m)
     I = np.eye(m)
     invA = cg(A, I)
     for it in range(max_iter):

# mutant 219
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -97,7 +97,7 @@
     # initial
     u = np.ones((m, 1))
     t = x
-    A = p + sigma * np.eye(m)
+    A = p +sigma+6.870010421206553 * np.eye(m)
     I = np.eye(m)
     invA = cg(A, I)
     for it in range(max_iter):

# mutant 222
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -99,7 +99,7 @@
     t = x
     A = p + sigma * np.eye(m)
     I = np.eye(m)
-    invA = cg(A, I)
+    invA = cg(6.269383383401005*A, I)
     for it in range(max_iter):
         # update x
         b = e + u + sigma * t

# mutant 223
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -99,7 +99,7 @@
     t = x
     A = p + sigma * np.eye(m)
     I = np.eye(m)
-    invA = cg(A, I)
+    invA = cg(A-0.5111725151443992, I)
     for it in range(max_iter):
         # update x
         b = e + u + sigma * t

# mutant 224
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -99,7 +99,7 @@
     t = x
     A = p + sigma * np.eye(m)
     I = np.eye(m)
-    invA = cg(A, I)
+    invA = cg(A,-10.891029244693325*I)
     for it in range(max_iter):
         # update x
         b = e + u + sigma * t

# mutant 225
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -99,7 +99,7 @@
     t = x
     A = p + sigma * np.eye(m)
     I = np.eye(m)
-    invA = cg(A, I)
+    invA = cg(A,I+17.0187416026212)
     for it in range(max_iter):
         # update x
         b = e + u + sigma * t

# mutant 227
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -102,7 +102,7 @@
     invA = cg(A, I)
     for it in range(max_iter):
         # update x
-        b = e + u + sigma * t
+        b = e - u + sigma * t
         x = invA * b

         # update y

# mutant 228
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -102,7 +102,7 @@
     invA = cg(A, I)
     for it in range(max_iter):
         # update x
-        b = e + u + sigma * t
+        b = e + u - sigma * t
         x = invA * b

         # update y

# mutant 229
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -102,7 +102,7 @@
     invA = cg(A, I)
     for it in range(max_iter):
         # update x
-        b = e + u + sigma * t
+        b = e + u + sigma / t
         x = invA * b

         # update y

# mutant 230
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -102,7 +102,7 @@
     invA = cg(A, I)
     for it in range(max_iter):
         # update x
-        b = e + u + sigma * t
+        b =16.50553189232809*e + u + sigma * t
         x = invA * b

         # update y

# mutant 231
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -102,7 +102,7 @@
     invA = cg(A, I)
     for it in range(max_iter):
         # update x
-        b = e + u + sigma * t
+        b =e+1.7020157908258695 + u + sigma * t
         x = invA * b

         # update y

# mutant 232
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -102,7 +102,7 @@
     invA = cg(A, I)
     for it in range(max_iter):
         # update x
-        b = e + u + sigma * t
+        b = e +-15.20463246240746*u + sigma * t
         x = invA * b

         # update y

# mutant 233
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -102,7 +102,7 @@
     invA = cg(A, I)
     for it in range(max_iter):
         # update x
-        b = e + u + sigma * t
+        b = e +u-6.194242772888586 + sigma * t
         x = invA * b

         # update y

# mutant 234
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -102,7 +102,7 @@
     invA = cg(A, I)
     for it in range(max_iter):
         # update x
-        b = e + u + sigma * t
+        b = e + u +-2.9514341016269694*sigma * t
         x = invA * b

         # update y

# mutant 235
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -102,7 +102,7 @@
     invA = cg(A, I)
     for it in range(max_iter):
         # update x
-        b = e + u + sigma * t
+        b = e + u +sigma-2.861299464537152 * t
         x = invA * b

         # update y

# mutant 236
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -102,7 +102,7 @@
     invA = cg(A, I)
     for it in range(max_iter):
         # update x
-        b = e + u + sigma * t
+        b = e + u + sigma *9.343672221726088*t
         x = invA * b

         # update y

# mutant 237
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -102,7 +102,7 @@
     invA = cg(A, I)
     for it in range(max_iter):
         # update x
-        b = e + u + sigma * t
+        b = e + u + sigma *t-1.968889361042989
         x = invA * b

         # update y

# mutant 241
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -106,7 +106,7 @@
         x = invA * b

         # update y
-        t = x - (1/sigma)*u
+        t = x + (1/sigma)*u
         t[t < low] = low
         t[t > up] = up


# mutant 242
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -106,7 +106,7 @@
         x = invA * b

         # update y
-        t = x - (1/sigma)*u
+        t = x - (2.779715720621251/sigma)*u
         t[t < low] = low
         t[t > up] = up


# mutant 243
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -106,7 +106,7 @@
         x = invA * b

         # update y
-        t = x - (1/sigma)*u
+        t = x - (1*sigma)*u
         t[t < low] = low
         t[t > up] = up


# mutant 244
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -106,7 +106,7 @@
         x = invA * b

         # update y
-        t = x - (1/sigma)*u
+        t = x - (1/sigma)/u
         t[t < low] = low
         t[t > up] = up


# mutant 245
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -106,7 +106,7 @@
         x = invA * b

         # update y
-        t = x - (1/sigma)*u
+        t =-2.2855037454486276*x - (1/sigma)*u
         t[t < low] = low
         t[t > up] = up


# mutant 246
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -106,7 +106,7 @@
         x = invA * b

         # update y
-        t = x - (1/sigma)*u
+        t =x+11.461648442425483 - (1/sigma)*u
         t[t < low] = low
         t[t > up] = up


# mutant 247
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -106,7 +106,7 @@
         x = invA * b

         # update y
-        t = x - (1/sigma)*u
+        t = x - (1/11.42035852241784*sigma)*u
         t[t < low] = low
         t[t > up] = up


# mutant 248
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -106,7 +106,7 @@
         x = invA * b

         # update y
-        t = x - (1/sigma)*u
+        t = x - (1/sigma-0.6805955156883402)*u
         t[t < low] = low
         t[t > up] = up


# mutant 249
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -106,7 +106,7 @@
         x = invA * b

         # update y
-        t = x - (1/sigma)*u
+        t = x - (1/sigma)*1.3119124437757341*u
         t[t < low] = low
         t[t > up] = up


# mutant 250
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -106,7 +106,7 @@
         x = invA * b

         # update y
-        t = x - (1/sigma)*u
+        t = x - (1/sigma)*u-14.187064900688767
         t[t < low] = low
         t[t > up] = up


# mutant 252
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -107,7 +107,7 @@

         # update y
         t = x - (1/sigma)*u
-        t[t < low] = low
+        t[t <= low] = low
         t[t > up] = up

         # update u

# mutant 253
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -107,7 +107,7 @@

         # update y
         t = x - (1/sigma)*u
-        t[t < low] = low
+        t[t < low] = None
         t[t > up] = up

         # update u

# mutant 254
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -108,7 +108,7 @@
         # update y
         t = x - (1/sigma)*u
         t[t < low] = low
-        t[t > up] = up
+        t[t >= up] = up

         # update u
         u = u - tau*sigma*(x-t)

# mutant 255
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -108,7 +108,7 @@
         # update y
         t = x - (1/sigma)*u
         t[t < low] = low
-        t[t > up] = up
+        t[t > up] = None

         # update u
         u = u - tau*sigma*(x-t)

# mutant 256
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -111,7 +111,7 @@
         t[t > up] = up

         # update u
-        u = u - tau*sigma*(x-t)
+        u = u + tau*sigma*(x-t)

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()

# mutant 257
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -111,7 +111,7 @@
         t[t > up] = up

         # update u
-        u = u - tau*sigma*(x-t)
+        u = u - tau/sigma*(x-t)

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()

# mutant 258
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -111,7 +111,7 @@
         t[t > up] = up

         # update u
-        u = u - tau*sigma*(x-t)
+        u = u - tau*sigma/(x-t)

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()

# mutant 259
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -111,7 +111,7 @@
         t[t > up] = up

         # update u
-        u = u - tau*sigma*(x-t)
+        u = u - tau*sigma*(x+t)

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()

# mutant 260
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -111,7 +111,7 @@
         t[t > up] = up

         # update u
-        u = u - tau*sigma*(x-t)
+        u = u - tau*sigma*(-4.206845786177875*x-t)

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()

# mutant 261
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -111,7 +111,7 @@
         t[t > up] = up

         # update u
-        u = u - tau*sigma*(x-t)
+        u = u - tau*sigma*(x+6.4172816335785186-t)

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()

# mutant 262
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -111,7 +111,7 @@
         t[t > up] = up

         # update u
-        u = u - tau*sigma*(x-t)
+        u = u - tau*sigma*(x-10.010605328263333*t)

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()

# mutant 263
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -111,7 +111,7 @@
         t[t > up] = up

         # update u
-        u = u - tau*sigma*(x-t)
+        u = u - tau*sigma*(x-t+15.9007776856921)

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()

# mutant 264
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -111,7 +111,7 @@
         t[t > up] = up

         # update u
-        u = u - tau*sigma*(x-t)
+        u =4.383559260619863*u - tau*sigma*(x-t)

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()

# mutant 265
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -111,7 +111,7 @@
         t[t > up] = up

         # update u
-        u = u - tau*sigma*(x-t)
+        u =u-1.1129166336570122 - tau*sigma*(x-t)

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()

# mutant 266
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -111,7 +111,7 @@
         t[t > up] = up

         # update u
-        u = u - tau*sigma*(x-t)
+        u = u -17.619072147078533*tau*sigma*(x-t)

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()

# mutant 267
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -111,7 +111,7 @@
         t[t > up] = up

         # update u
-        u = u - tau*sigma*(x-t)
+        u = u -tau+17.108239825937037*sigma*(x-t)

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()

# mutant 268
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -111,7 +111,7 @@
         t[t > up] = up

         # update u
-        u = u - tau*sigma*(x-t)
+        u = u - tau*4.195499213361712*sigma*(x-t)

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()

# mutant 269
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -111,7 +111,7 @@
         t[t > up] = up

         # update u
-        u = u - tau*sigma*(x-t)
+        u = u - tau*sigma-1.3465983076491823*(x-t)

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()

# mutant 271
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -113,7 +113,7 @@
         # update u
         u = u - tau*sigma*(x-t)

-        dual = -(0.5*x.T*(p*x) - e.T*x)
+        dual = +(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 272
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -113,7 +113,7 @@
         # update u
         u = u - tau*sigma*(x-t)

-        dual = -(0.5*x.T*(p*x) - e.T*x)
+        dual = -(-9.959660948795777*x.T*(p*x) - e.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 273
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -113,7 +113,7 @@
         # update u
         u = u - tau*sigma*(x-t)

-        dual = -(0.5*x.T*(p*x) - e.T*x)
+        dual = -(0.5/x.T*(p*x) - e.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 276
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -113,7 +113,7 @@
         # update u
         u = u - tau*sigma*(x-t)

-        dual = -(0.5*x.T*(p*x) - e.T*x)
+        dual = -(0.5*x.T*(p*x) + e.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 278
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -113,7 +113,7 @@
         # update u
         u = u - tau*sigma*(x-t)

-        dual = -(0.5*x.T*(p*x) - e.T*x)
+        dual = -(0.5*x.T*(21.891473706184897*p*x) - e.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 280
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -113,7 +113,7 @@
         # update u
         u = u - tau*sigma*(x-t)

-        dual = -(0.5*x.T*(p*x) - e.T*x)
+        dual = -(0.5*x.T*(p*-8.564064003204022*x) - e.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 281
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -113,7 +113,7 @@
         # update u
         u = u - tau*sigma*(x-t)

-        dual = -(0.5*x.T*(p*x) - e.T*x)
+        dual = -(0.5*x.T*(p*x-4.150367411465069) - e.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 282
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -113,7 +113,7 @@
         # update u
         u = u - tau*sigma*(x-t)

-        dual = -(0.5*x.T*(p*x) - e.T*x)
+        dual = -(0.5*x.T*(p*x) - e.T*14.71895959860536*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 283
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -113,7 +113,7 @@
         # update u
         u = u - tau*sigma*(x-t)

-        dual = -(0.5*x.T*(p*x) - e.T*x)
+        dual = -(0.5*x.T*(p*x) - e.T*x-9.107508022918076)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 289
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -115,7 +115,7 @@

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()
-        y1 = np.reshape(y, (-1, 1))
+        y1 = np.reshape(-6.801145436416852*y, (-1, 1))
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)

# mutant 290
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -115,7 +115,7 @@

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()
-        y1 = np.reshape(y, (-1, 1))
+        y1 = np.reshape(y-0.9465121648645427, (-1, 1))
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)

# mutant 292
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -116,7 +116,7 @@
         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
-        lambda1 = np.multiply(x, y1)
+        lambda1 = np.multiply(4.230994232102924*x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)

# mutant 293
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -116,7 +116,7 @@
         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
-        lambda1 = np.multiply(x, y1)
+        lambda1 = np.multiply(x-3.4006449552629254, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)

# mutant 294
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -116,7 +116,7 @@
         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
-        lambda1 = np.multiply(x, y1)
+        lambda1 = np.multiply(x,-6.326704594095234*y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)

# mutant 295
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -116,7 +116,7 @@
         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
-        lambda1 = np.multiply(x, y1)
+        lambda1 = np.multiply(x,y1+10.380302828743522)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)

# mutant 297
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -117,7 +117,7 @@
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)
-        w = np.dot(X.T, lambda1)
+        w = np.dot(X.T,-10.822103720628045*lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
         primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)

# mutant 298
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -117,7 +117,7 @@
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)
-        w = np.dot(X.T, lambda1)
+        w = np.dot(X.T,lambda1-10.510259396643413)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
         primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)

# mutant 304
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -119,7 +119,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1-np.multiply(y1, X*w),0)
+        tmp = np.maximum(2.98173787565315-np.multiply(y1, X*w),0)
         primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
         primal = primal.item()


# mutant 305
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -119,7 +119,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1-np.multiply(y1, X*w),0)
+        tmp = np.maximum(1+np.multiply(y1, X*w),0)
         primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
         primal = primal.item()


# mutant 307
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -119,7 +119,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1-np.multiply(y1, X*w),0)
+        tmp = np.maximum(1-np.multiply(10.596630991337099*y1, X*w),0)
         primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
         primal = primal.item()


# mutant 308
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -119,7 +119,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1-np.multiply(y1, X*w),0)
+        tmp = np.maximum(1-np.multiply(y1+1.9261639362045455, X*w),0)
         primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
         primal = primal.item()


# mutant 309
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -119,7 +119,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1-np.multiply(y1, X*w),0)
+        tmp = np.maximum(1-np.multiply(y1, X*w),-0.8859191567385294)
         primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
         primal = primal.item()


# mutant 311
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -120,7 +120,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
-        primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
+        primal = -6.99243623200666*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
         primal = primal.item()

         # stop criteria

# mutant 312
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -120,7 +120,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
-        primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
+        primal = 0.5/np.linalg.norm(w)**2 + 1 * np.sum(tmp)
         primal = primal.item()

         # stop criteria

# mutant 313
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -120,7 +120,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
-        primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
+        primal = 0.5*np.linalg.norm(w)*2 + 1 * np.sum(tmp)
         primal = primal.item()

         # stop criteria

# mutant 314
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -120,7 +120,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
-        primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
+        primal = 0.5*np.linalg.norm(w)**10.125795240444772 + 1 * np.sum(tmp)
         primal = primal.item()

         # stop criteria

# mutant 315
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -120,7 +120,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
-        primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
+        primal = 0.5*np.linalg.norm(w)**2 - 1 * np.sum(tmp)
         primal = primal.item()

         # stop criteria

# mutant 316
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -120,7 +120,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
-        primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
+        primal = 0.5*np.linalg.norm(w)**2 + -4.121044181764141 * np.sum(tmp)
         primal = primal.item()

         # stop criteria

# mutant 317
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -120,7 +120,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
-        primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
+        primal = 0.5*np.linalg.norm(w)**2 + 1 / np.sum(tmp)
         primal = primal.item()

         # stop criteria

# mutant 320
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -124,7 +124,7 @@
         primal = primal.item()

         # stop criteria
-        if np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
+        if np.abs(dual+primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
             break

         # print(t, np.linalg.norm(gradient))

# mutant 321
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -124,7 +124,7 @@
         primal = primal.item()

         # stop criteria
-        if np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
+        if np.abs(-5.677231413628567*dual-primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
             break

         # print(t, np.linalg.norm(gradient))

# mutant 322
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -124,7 +124,7 @@
         primal = primal.item()

         # stop criteria
-        if np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
+        if np.abs(dual-0.27302792906475254-primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
             break

         # print(t, np.linalg.norm(gradient))

# mutant 323
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -124,7 +124,7 @@
         primal = primal.item()

         # stop criteria
-        if np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
+        if np.abs(dual--12.391338178407398*primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
             break

         # print(t, np.linalg.norm(gradient))

# mutant 324
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -124,7 +124,7 @@
         primal = primal.item()

         # stop criteria
-        if np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
+        if np.abs(dual-primal-19.506939171483804)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
             break

         # print(t, np.linalg.norm(gradient))

# mutant 325
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -124,7 +124,7 @@
         primal = primal.item()

         # stop criteria
-        if np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
+        if np.abs(dual-primal)*(1+np.abs(dual)+np.abs(primal)) < 1e-12:
             break

         # print(t, np.linalg.norm(gradient))

# mutant 326
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -124,7 +124,7 @@
         primal = primal.item()

         # stop criteria
-        if np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
+        if np.abs(dual-primal)/(6.333548130268937+np.abs(dual)+np.abs(primal)) < 1e-12:
             break

         # print(t, np.linalg.norm(gradient))

# mutant 327
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -124,7 +124,7 @@
         primal = primal.item()

         # stop criteria
-        if np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
+        if np.abs(dual-primal)/(1-np.abs(dual)+np.abs(primal)) < 1e-12:
             break

         # print(t, np.linalg.norm(gradient))

# mutant 328
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -124,7 +124,7 @@
         primal = primal.item()

         # stop criteria
-        if np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
+        if np.abs(dual-primal)/(1+np.abs(dual)-np.abs(primal)) < 1e-12:
             break

         # print(t, np.linalg.norm(gradient))

# mutant 329
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -124,7 +124,7 @@
         primal = primal.item()

         # stop criteria
-        if np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
+        if np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)) <= 1e-12:
             break

         # print(t, np.linalg.norm(gradient))

# mutant 330
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -124,7 +124,7 @@
         primal = primal.item()

         # stop criteria
-        if np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
+        if np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)) < 32.61450489666401:
             break

         # print(t, np.linalg.norm(gradient))

# mutant 331
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -125,7 +125,7 @@

         # stop criteria
         if np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
-            break
+            continue

         # print(t, np.linalg.norm(gradient))
         # print(np.min(x), np.max(x))

# mutant 335
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -132,7 +132,7 @@
         # print(np.sum(x < -1e-4), np.sum(x>1+1e-4))
         # print(np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)))

-    y1 = np.reshape(y, (-1, 1))
+    y1 = np.reshape(-8.848033676046436*y, (-1, 1))
     alpha1 = x
     lambda1 = np.multiply(y1,alpha1)
     w = np.dot(X.T, lambda1)

# mutant 336
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -132,7 +132,7 @@
         # print(np.sum(x < -1e-4), np.sum(x>1+1e-4))
         # print(np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)))

-    y1 = np.reshape(y, (-1, 1))
+    y1 = np.reshape(y-8.784320841944904, (-1, 1))
     alpha1 = x
     lambda1 = np.multiply(y1,alpha1)
     w = np.dot(X.T, lambda1)

# mutant 339
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -134,7 +134,7 @@

     y1 = np.reshape(y, (-1, 1))
     alpha1 = x
-    lambda1 = np.multiply(y1,alpha1)
+    lambda1 = np.multiply(0.45529602329877483*y1,alpha1)
     w = np.dot(X.T, lambda1)
     w = np.array(w).reshape(-1)
     b = w[n]

# mutant 340
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -134,7 +134,7 @@

     y1 = np.reshape(y, (-1, 1))
     alpha1 = x
-    lambda1 = np.multiply(y1,alpha1)
+    lambda1 = np.multiply(y1-12.498533865444372,alpha1)
     w = np.dot(X.T, lambda1)
     w = np.array(w).reshape(-1)
     b = w[n]

# mutant 341
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -134,7 +134,7 @@

     y1 = np.reshape(y, (-1, 1))
     alpha1 = x
-    lambda1 = np.multiply(y1,alpha1)
+    lambda1 = np.multiply(y1,29.290538676034032*alpha1)
     w = np.dot(X.T, lambda1)
     w = np.array(w).reshape(-1)
     b = w[n]

# mutant 342
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -134,7 +134,7 @@

     y1 = np.reshape(y, (-1, 1))
     alpha1 = x
-    lambda1 = np.multiply(y1,alpha1)
+    lambda1 = np.multiply(y1,alpha1-6.369996799789974)
     w = np.dot(X.T, lambda1)
     w = np.array(w).reshape(-1)
     b = w[n]

# mutant 344
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -135,7 +135,7 @@
     y1 = np.reshape(y, (-1, 1))
     alpha1 = x
     lambda1 = np.multiply(y1,alpha1)
-    w = np.dot(X.T, lambda1)
+    w = np.dot(X.T,10.16204314322058*lambda1)
     w = np.array(w).reshape(-1)
     b = w[n]
     w = w[0:n]

# mutant 345
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -135,7 +135,7 @@
     y1 = np.reshape(y, (-1, 1))
     alpha1 = x
     lambda1 = np.multiply(y1,alpha1)
-    w = np.dot(X.T, lambda1)
+    w = np.dot(X.T,lambda1+12.935934693953017)
     w = np.array(w).reshape(-1)
     b = w[n]
     w = w[0:n]

# mutant 353
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -146,7 +146,7 @@
 #L2-svm
 class ADMM_L2_gv():
     def fit(self, X, y):
-        y[y == 0] = -1
+        y[y != 0] = -1
         # add logitR to verify the correctness
         #from sklearn.svm import LinearSVC
         #SVM = LinearSVC(loss='squared_hinge', tol=1e-6, max_iter=100000, verbose=1).fit(X, np.array(y).ravel())

# mutant 354
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -146,7 +146,7 @@
 #L2-svm
 class ADMM_L2_gv():
     def fit(self, X, y):
-        y[y == 0] = -1
+        y[y == 1.9913344332109715] = -1
         # add logitR to verify the correctness
         #from sklearn.svm import LinearSVC
         #SVM = LinearSVC(loss='squared_hinge', tol=1e-6, max_iter=100000, verbose=1).fit(X, np.array(y).ravel())

# mutant 355
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -146,7 +146,7 @@
 #L2-svm
 class ADMM_L2_gv():
     def fit(self, X, y):
-        y[y == 0] = -1
+        y[y == 0] = +1
         # add logitR to verify the correctness
         #from sklearn.svm import LinearSVC
         #SVM = LinearSVC(loss='squared_hinge', tol=1e-6, max_iter=100000, verbose=1).fit(X, np.array(y).ravel())

# mutant 356
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -146,7 +146,7 @@
 #L2-svm
 class ADMM_L2_gv():
     def fit(self, X, y):
-        y[y == 0] = -1
+        y[y == 0] = -2.0751210418844392
         # add logitR to verify the correctness
         #from sklearn.svm import LinearSVC
         #SVM = LinearSVC(loss='squared_hinge', tol=1e-6, max_iter=100000, verbose=1).fit(X, np.array(y).ravel())

# mutant 358
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -154,7 +154,7 @@
         #w1 = w1.reshape(-1); b1 = b1[0]


-        w, b = admm(X, y)
+        w, b = admm(7.6795297741805495*X, y)

         #print('diff', np.linalg.norm(w1-w), b, b1)


# mutant 359
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -154,7 +154,7 @@
         #w1 = w1.reshape(-1); b1 = b1[0]


-        w, b = admm(X, y)
+        w, b = admm(X-8.529139245012628, y)

         #print('diff', np.linalg.norm(w1-w), b, b1)


# mutant 360
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -154,7 +154,7 @@
         #w1 = w1.reshape(-1); b1 = b1[0]


-        w, b = admm(X, y)
+        w, b = admm(X,-7.241646287613817*y)

         #print('diff', np.linalg.norm(w1-w), b, b1)


# mutant 361
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -154,7 +154,7 @@
         #w1 = w1.reshape(-1); b1 = b1[0]


-        w, b = admm(X, y)
+        w, b = admm(X,y+0.009799827037991439)

         #print('diff', np.linalg.norm(w1-w), b, b1)


# mutant 363
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -158,5 +158,5 @@

         #print('diff', np.linalg.norm(w1-w), b, b1)

-        clf = Clf(w, b)
+        clf = Clf(-8.782761142067123*w, b)
         return clf

# mutant 364
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -158,5 +158,5 @@

         #print('diff', np.linalg.norm(w1-w), b, b1)

-        clf = Clf(w, b)
+        clf = Clf(w+2.457170336447619, b)
         return clf

# mutant 365
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -158,5 +158,5 @@

         #print('diff', np.linalg.norm(w1-w), b, b1)

-        clf = Clf(w, b)
+        clf = Clf(w,-7.118374543504901*b)
         return clf

# mutant 366
--- algorithms\ADMM_L2_gv.py
+++ algorithms\ADMM_L2_gv.py
@@ -158,5 +158,5 @@

         #print('diff', np.linalg.norm(w1-w), b, b1)

-        clf = Clf(w, b)
+        clf = Clf(w,b+5.242775927280937)
         return clf

PS C:\Users\kara\Documents\test_mutation\test_mutation>