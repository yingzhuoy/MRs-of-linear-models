---- algorithms\GD_gv.py (138) ----

# mutant 1
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -1,7 +1,7 @@
 from algorithms.clf import Clf
 import numpy as np
 import sys
-sys.path.append(r'..')
+sys.path.append(r'XX..XX')

 # gradAscent
 def backtracking(l0, w0, X, y):

# mutant 3
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -7,7 +7,7 @@
 def backtracking(l0, w0, X, y):
     # update x
     m, n = X.shape
-    epsilon = 1e-10
+    epsilon = -4.567732388007078
     beta = 0.5; alpha = 0.01
     l = l0
     h0 = sigmoid(X * w0)

# mutant 5
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -8,7 +8,7 @@
     # update x
     m, n = X.shape
     epsilon = 1e-10
-    beta = 0.5; alpha = 0.01
+    beta = 10.022513483427414; alpha = 0.01
     l = l0
     h0 = sigmoid(X * w0)
     L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2

# mutant 7
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -8,7 +8,7 @@
     # update x
     m, n = X.shape
     epsilon = 1e-10
-    beta = 0.5; alpha = 0.01
+    beta = 0.5; alpha = -14.465079733947617
     l = l0
     h0 = sigmoid(X * w0)
     L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2

# mutant 12
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -11,7 +11,7 @@
     beta = 0.5; alpha = 0.01
     l = l0
     h0 = sigmoid(X * w0)
-    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
+    L0 = +(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0

# mutant 14
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -11,7 +11,7 @@
     beta = 0.5; alpha = 0.01
     l = l0
     h0 = sigmoid(X * w0)
-    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
+    L0 = -(y.T*np.log(h0-epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0

# mutant 15
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -11,7 +11,7 @@
     beta = 0.5; alpha = 0.01
     l = l0
     h0 = sigmoid(X * w0)
-    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
+    L0 = -(y.T*np.log(0.8411313050545691*h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0

# mutant 16
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -11,7 +11,7 @@
     beta = 0.5; alpha = 0.01
     l = l0
     h0 = sigmoid(X * w0)
-    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
+    L0 = -(y.T*np.log(h0+7.961123089460337+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0

# mutant 17
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -11,7 +11,7 @@
     beta = 0.5; alpha = 0.01
     l = l0
     h0 = sigmoid(X * w0)
-    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
+    L0 = -(y.T*np.log(h0+0.10883477502558803*epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0

# mutant 18
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -11,7 +11,7 @@
     beta = 0.5; alpha = 0.01
     l = l0
     h0 = sigmoid(X * w0)
-    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
+    L0 = -(y.T*np.log(h0+epsilon-5.729535322618742) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0

# mutant 19
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -11,7 +11,7 @@
     beta = 0.5; alpha = 0.01
     l = l0
     h0 = sigmoid(X * w0)
-    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
+    L0 = -(y.T*np.log(h0+epsilon) - (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0

# mutant 20
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -11,7 +11,7 @@
     beta = 0.5; alpha = 0.01
     l = l0
     h0 = sigmoid(X * w0)
-    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
+    L0 = -(y.T*np.log(h0+epsilon) + (-9.686436673965733-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0

# mutant 21
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -11,7 +11,7 @@
     beta = 0.5; alpha = 0.01
     l = l0
     h0 = sigmoid(X * w0)
-    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
+    L0 = -(y.T*np.log(h0+epsilon) + (1+y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0

# mutant 22
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -11,7 +11,7 @@
     beta = 0.5; alpha = 0.01
     l = l0
     h0 = sigmoid(X * w0)
-    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
+    L0 = -(y.T*np.log(h0+epsilon) + (1-5.4323142661410095*y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0

# mutant 23
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -11,7 +11,7 @@
     beta = 0.5; alpha = 0.01
     l = l0
     h0 = sigmoid(X * w0)
-    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
+    L0 = -(y.T*np.log(h0+epsilon) + (1-y-14.946030022607232).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0

# mutant 25
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -11,7 +11,7 @@
     beta = 0.5; alpha = 0.01
     l = l0
     h0 = sigmoid(X * w0)
-    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
+    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(-2.9621753722445243+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0

# mutant 26
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -11,7 +11,7 @@
     beta = 0.5; alpha = 0.01
     l = l0
     h0 = sigmoid(X * w0)
-    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
+    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1-epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0

# mutant 27
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -11,7 +11,7 @@
     beta = 0.5; alpha = 0.01
     l = l0
     h0 = sigmoid(X * w0)
-    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
+    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon+h0)) + .5*np.linalg.norm(w0[0:n-1])**2
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0

# mutant 28
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -11,7 +11,7 @@
     beta = 0.5; alpha = 0.01
     l = l0
     h0 = sigmoid(X * w0)
-    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
+    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+6.832614887851979*epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0

# mutant 29
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -11,7 +11,7 @@
     beta = 0.5; alpha = 0.01
     l = l0
     h0 = sigmoid(X * w0)
-    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
+    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-23.001226113597323-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0

# mutant 30
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -11,7 +11,7 @@
     beta = 0.5; alpha = 0.01
     l = l0
     h0 = sigmoid(X * w0)
-    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
+    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon--18.75807582632292*h0)) + .5*np.linalg.norm(w0[0:n-1])**2
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0

# mutant 31
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -11,7 +11,7 @@
     beta = 0.5; alpha = 0.01
     l = l0
     h0 = sigmoid(X * w0)
-    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
+    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0-8.557042701266578)) + .5*np.linalg.norm(w0[0:n-1])**2
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0

# mutant 32
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -11,7 +11,7 @@
     beta = 0.5; alpha = 0.01
     l = l0
     h0 = sigmoid(X * w0)
-    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
+    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) - .5*np.linalg.norm(w0[0:n-1])**2
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0

# mutant 33
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -11,7 +11,7 @@
     beta = 0.5; alpha = 0.01
     l = l0
     h0 = sigmoid(X * w0)
-    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
+    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + -40.67294235727464*np.linalg.norm(w0[0:n-1])**2
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0

# mutant 34
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -11,7 +11,7 @@
     beta = 0.5; alpha = 0.01
     l = l0
     h0 = sigmoid(X * w0)
-    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
+    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5/np.linalg.norm(w0[0:n-1])**2
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0

# mutant 36
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -11,7 +11,7 @@
     beta = 0.5; alpha = 0.01
     l = l0
     h0 = sigmoid(X * w0)
-    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
+    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n+1])**2
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0

# mutant 40
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -11,7 +11,7 @@
     beta = 0.5; alpha = 0.01
     l = l0
     h0 = sigmoid(X * w0)
-    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
+    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])*2
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0

# mutant 41
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -11,7 +11,7 @@
     beta = 0.5; alpha = 0.01
     l = l0
     h0 = sigmoid(X * w0)
-    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
+    L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**19.97684626561987
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0

# mutant 44
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -13,7 +13,7 @@
     h0 = sigmoid(X * w0)
     L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
     L0 = L0.item()
-    error = y - h0  # vector subtraction
+    error = y + h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0
     g0 = - X.T * error  + 1 * tmp
     if np.linalg.norm(g0) < 1e-4:

# mutant 45
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -13,7 +13,7 @@
     h0 = sigmoid(X * w0)
     L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
     L0 = L0.item()
-    error = y - h0  # vector subtraction
+    error =4.393115563685603*y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0
     g0 = - X.T * error  + 1 * tmp
     if np.linalg.norm(g0) < 1e-4:

# mutant 46
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -13,7 +13,7 @@
     h0 = sigmoid(X * w0)
     L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
     L0 = L0.item()
-    error = y - h0  # vector subtraction
+    error =y-5.240739040497223 - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0
     g0 = - X.T * error  + 1 * tmp
     if np.linalg.norm(g0) < 1e-4:

# mutant 47
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -13,7 +13,7 @@
     h0 = sigmoid(X * w0)
     L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
     L0 = L0.item()
-    error = y - h0  # vector subtraction
+    error = y --0.02527534023031519*h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0
     g0 = - X.T * error  + 1 * tmp
     if np.linalg.norm(g0) < 1e-4:

# mutant 48
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -13,7 +13,7 @@
     h0 = sigmoid(X * w0)
     L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
     L0 = L0.item()
-    error = y - h0  # vector subtraction
+    error = y -h0-7.655278859702611  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0
     g0 = - X.T * error  + 1 * tmp
     if np.linalg.norm(g0) < 1e-4:

# mutant 51
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -14,7 +14,7 @@
     L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
     L0 = L0.item()
     error = y - h0  # vector subtraction
-    tmp = w0.copy(); tmp[-1] = 0
+    tmp = w0.copy(); tmp[+1] = 0
     g0 = - X.T * error  + 1 * tmp
     if np.linalg.norm(g0) < 1e-4:
         wp = w0; l = l0

# mutant 53
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -14,7 +14,7 @@
     L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
     L0 = L0.item()
     error = y - h0  # vector subtraction
-    tmp = w0.copy(); tmp[-1] = 0
+    tmp = w0.copy(); tmp[-1] = 7.150216525277495
     g0 = - X.T * error  + 1 * tmp
     if np.linalg.norm(g0) < 1e-4:
         wp = w0; l = l0

# mutant 54
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -14,7 +14,7 @@
     L0 = -(y.T*np.log(h0+epsilon) + (1-y).T * np.log(1+epsilon-h0)) + .5*np.linalg.norm(w0[0:n-1])**2
     L0 = L0.item()
     error = y - h0  # vector subtraction
-    tmp = w0.copy(); tmp[-1] = 0
+    tmp = w0.copy(); tmp[-1] = None
     g0 = - X.T * error  + 1 * tmp
     if np.linalg.norm(g0) < 1e-4:
         wp = w0; l = l0

# mutant 55
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -15,7 +15,7 @@
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0
-    g0 = - X.T * error  + 1 * tmp
+    g0 = + X.T * error  + 1 * tmp
     if np.linalg.norm(g0) < 1e-4:
         wp = w0; l = l0
         return wp, l

# mutant 57
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -15,7 +15,7 @@
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0
-    g0 = - X.T * error  + 1 * tmp
+    g0 = - X.T * error  - 1 * tmp
     if np.linalg.norm(g0) < 1e-4:
         wp = w0; l = l0
         return wp, l

# mutant 58
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -15,7 +15,7 @@
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0
-    g0 = - X.T * error  + 1 * tmp
+    g0 = - X.T * error  + 17.420856071684003 * tmp
     if np.linalg.norm(g0) < 1e-4:
         wp = w0; l = l0
         return wp, l

# mutant 59
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -15,7 +15,7 @@
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0
-    g0 = - X.T * error  + 1 * tmp
+    g0 = - X.T * error  + 1 / tmp
     if np.linalg.norm(g0) < 1e-4:
         wp = w0; l = l0
         return wp, l

# mutant 60
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -15,7 +15,7 @@
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0
-    g0 = - X.T * error  + 1 * tmp
+    g0 = - X.T *-9.931986581393504*error  + 1 * tmp
     if np.linalg.norm(g0) < 1e-4:
         wp = w0; l = l0
         return wp, l

# mutant 61
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -15,7 +15,7 @@
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0
-    g0 = - X.T * error  + 1 * tmp
+    g0 = - X.T *error-4.075449457623234  + 1 * tmp
     if np.linalg.norm(g0) < 1e-4:
         wp = w0; l = l0
         return wp, l

# mutant 62
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -15,7 +15,7 @@
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0
-    g0 = - X.T * error  + 1 * tmp
+    g0 = - X.T * error  + 1 *-16.079340481866613*tmp
     if np.linalg.norm(g0) < 1e-4:
         wp = w0; l = l0
         return wp, l

# mutant 63
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -15,7 +15,7 @@
     L0 = L0.item()
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0
-    g0 = - X.T * error  + 1 * tmp
+    g0 = - X.T * error  + 1 *tmp-12.253399963787173
     if np.linalg.norm(g0) < 1e-4:
         wp = w0; l = l0
         return wp, l

# mutant 65
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -16,7 +16,7 @@
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0
     g0 = - X.T * error  + 1 * tmp
-    if np.linalg.norm(g0) < 1e-4:
+    if np.linalg.norm(g0) <= 1e-4:
         wp = w0; l = l0
         return wp, l


# mutant 66
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -16,7 +16,7 @@
     error = y - h0  # vector subtraction
     tmp = w0.copy(); tmp[-1] = 0
     g0 = - X.T * error  + 1 * tmp
-    if np.linalg.norm(g0) < 1e-4:
+    if np.linalg.norm(g0) < -6.1546343484302515:
         wp = w0; l = l0
         return wp, l


# mutant 68
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -17,7 +17,7 @@
     tmp = w0.copy(); tmp[-1] = 0
     g0 = - X.T * error  + 1 * tmp
     if np.linalg.norm(g0) < 1e-4:
-        wp = w0; l = l0
+        wp = w0; l = None
         return wp, l

     for k in range(8):

# mutant 70
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -21,7 +21,7 @@
         return wp, l

     for k in range(8):
-        wp = w0 - l * g0
+        wp = w0 + l * g0
         h = sigmoid(X * wp)
         Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()

# mutant 71
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -21,7 +21,7 @@
         return wp, l

     for k in range(8):
-        wp = w0 - l * g0
+        wp = w0 - l / g0
         h = sigmoid(X * wp)
         Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()

# mutant 72
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -21,7 +21,7 @@
         return wp, l

     for k in range(8):
-        wp = w0 - l * g0
+        wp =8.877188082805313*w0 - l * g0
         h = sigmoid(X * wp)
         Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()

# mutant 73
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -21,7 +21,7 @@
         return wp, l

     for k in range(8):
-        wp = w0 - l * g0
+        wp =w0+3.4248094808003815 - l * g0
         h = sigmoid(X * wp)
         Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()

# mutant 74
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -21,7 +21,7 @@
         return wp, l

     for k in range(8):
-        wp = w0 - l * g0
+        wp = w0 --5.284468384369135*l * g0
         h = sigmoid(X * wp)
         Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()

# mutant 75
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -21,7 +21,7 @@
         return wp, l

     for k in range(8):
-        wp = w0 - l * g0
+        wp = w0 -l-14.118325347439338 * g0
         h = sigmoid(X * wp)
         Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()

# mutant 76
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -21,7 +21,7 @@
         return wp, l

     for k in range(8):
-        wp = w0 - l * g0
+        wp = w0 - l *-1.8020925462555302*g0
         h = sigmoid(X * wp)
         Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()

# mutant 77
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -21,7 +21,7 @@
         return wp, l

     for k in range(8):
-        wp = w0 - l * g0
+        wp = w0 - l *g0+7.061367484840238
         h = sigmoid(X * wp)
         Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()

# mutant 81
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -23,7 +23,7 @@
     for k in range(8):
         wp = w0 - l * g0
         h = sigmoid(X * wp)
-        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
+        Lw = +(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
         if Lw < L0 - l * alpha * (g0.T*g0):
             break

# mutant 83
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -23,7 +23,7 @@
     for k in range(8):
         wp = w0 - l * g0
         h = sigmoid(X * wp)
-        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
+        Lw = -(y.T * np.log(h-epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
         if Lw < L0 - l * alpha * (g0.T*g0):
             break

# mutant 84
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -23,7 +23,7 @@
     for k in range(8):
         wp = w0 - l * g0
         h = sigmoid(X * wp)
-        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
+        Lw = -(y.T * np.log(-2.1484375421037036*h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
         if Lw < L0 - l * alpha * (g0.T*g0):
             break

# mutant 85
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -23,7 +23,7 @@
     for k in range(8):
         wp = w0 - l * g0
         h = sigmoid(X * wp)
-        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
+        Lw = -(y.T * np.log(h-12.55592011786999+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
         if Lw < L0 - l * alpha * (g0.T*g0):
             break

# mutant 86
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -23,7 +23,7 @@
     for k in range(8):
         wp = w0 - l * g0
         h = sigmoid(X * wp)
-        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
+        Lw = -(y.T * np.log(h+2.767987455805871*epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
         if Lw < L0 - l * alpha * (g0.T*g0):
             break

# mutant 87
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -23,7 +23,7 @@
     for k in range(8):
         wp = w0 - l * g0
         h = sigmoid(X * wp)
-        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
+        Lw = -(y.T * np.log(h+epsilon+1.4451785063539617) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
         if Lw < L0 - l * alpha * (g0.T*g0):
             break

# mutant 88
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -23,7 +23,7 @@
     for k in range(8):
         wp = w0 - l * g0
         h = sigmoid(X * wp)
-        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
+        Lw = -(y.T * np.log(h+epsilon) - (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
         if Lw < L0 - l * alpha * (g0.T*g0):
             break

# mutant 89
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -23,7 +23,7 @@
     for k in range(8):
         wp = w0 - l * g0
         h = sigmoid(X * wp)
-        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
+        Lw = -(y.T * np.log(h+epsilon) + (6.416110887862575-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
         if Lw < L0 - l * alpha * (g0.T*g0):
             break

# mutant 90
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -23,7 +23,7 @@
     for k in range(8):
         wp = w0 - l * g0
         h = sigmoid(X * wp)
-        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
+        Lw = -(y.T * np.log(h+epsilon) + (1+y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
         if Lw < L0 - l * alpha * (g0.T*g0):
             break

# mutant 91
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -23,7 +23,7 @@
     for k in range(8):
         wp = w0 - l * g0
         h = sigmoid(X * wp)
-        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
+        Lw = -(y.T * np.log(h+epsilon) + (1--11.806874717473406*y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
         if Lw < L0 - l * alpha * (g0.T*g0):
             break

# mutant 92
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -23,7 +23,7 @@
     for k in range(8):
         wp = w0 - l * g0
         h = sigmoid(X * wp)
-        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
+        Lw = -(y.T * np.log(h+epsilon) + (1-y+0.3384792406486759).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
         if Lw < L0 - l * alpha * (g0.T*g0):
             break

# mutant 94
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -23,7 +23,7 @@
     for k in range(8):
         wp = w0 - l * g0
         h = sigmoid(X * wp)
-        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
+        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(9.682301914701423+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
         if Lw < L0 - l * alpha * (g0.T*g0):
             break

# mutant 95
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -23,7 +23,7 @@
     for k in range(8):
         wp = w0 - l * g0
         h = sigmoid(X * wp)
-        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
+        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1-epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
         if Lw < L0 - l * alpha * (g0.T*g0):
             break

# mutant 96
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -23,7 +23,7 @@
     for k in range(8):
         wp = w0 - l * g0
         h = sigmoid(X * wp)
-        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
+        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon+h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
         if Lw < L0 - l * alpha * (g0.T*g0):
             break

# mutant 97
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -23,7 +23,7 @@
     for k in range(8):
         wp = w0 - l * g0
         h = sigmoid(X * wp)
-        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
+        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+-4.586060495666526*epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
         if Lw < L0 - l * alpha * (g0.T*g0):
             break

# mutant 98
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -23,7 +23,7 @@
     for k in range(8):
         wp = w0 - l * g0
         h = sigmoid(X * wp)
-        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
+        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-15.235617396581873-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
         if Lw < L0 - l * alpha * (g0.T*g0):
             break

# mutant 99
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -23,7 +23,7 @@
     for k in range(8):
         wp = w0 - l * g0
         h = sigmoid(X * wp)
-        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
+        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-10.851620615069404*h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
         if Lw < L0 - l * alpha * (g0.T*g0):
             break

# mutant 100
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -23,7 +23,7 @@
     for k in range(8):
         wp = w0 - l * g0
         h = sigmoid(X * wp)
-        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
+        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h-12.996355189674158)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
         if Lw < L0 - l * alpha * (g0.T*g0):
             break

# mutant 101
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -23,7 +23,7 @@
     for k in range(8):
         wp = w0 - l * g0
         h = sigmoid(X * wp)
-        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
+        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) - .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
         if Lw < L0 - l * alpha * (g0.T*g0):
             break

# mutant 102
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -23,7 +23,7 @@
     for k in range(8):
         wp = w0 - l * g0
         h = sigmoid(X * wp)
-        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
+        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + 20.920478126321015*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
         if Lw < L0 - l * alpha * (g0.T*g0):
             break

# mutant 103
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -23,7 +23,7 @@
     for k in range(8):
         wp = w0 - l * g0
         h = sigmoid(X * wp)
-        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
+        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5/np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
         if Lw < L0 - l * alpha * (g0.T*g0):
             break

# mutant 105
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -23,7 +23,7 @@
     for k in range(8):
         wp = w0 - l * g0
         h = sigmoid(X * wp)
-        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
+        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n+1])**2
         Lw = Lw.item()
         if Lw < L0 - l * alpha * (g0.T*g0):
             break

# mutant 109
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -23,7 +23,7 @@
     for k in range(8):
         wp = w0 - l * g0
         h = sigmoid(X * wp)
-        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
+        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])*2
         Lw = Lw.item()
         if Lw < L0 - l * alpha * (g0.T*g0):
             break

# mutant 110
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -23,7 +23,7 @@
     for k in range(8):
         wp = w0 - l * g0
         h = sigmoid(X * wp)
-        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
+        Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**-18.91945161426478
         Lw = Lw.item()
         if Lw < L0 - l * alpha * (g0.T*g0):
             break

# mutant 113
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -25,7 +25,7 @@
         h = sigmoid(X * wp)
         Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
-        if Lw < L0 - l * alpha * (g0.T*g0):
+        if Lw <= L0 - l * alpha * (g0.T*g0):
             break
         else:
             l = beta * l

# mutant 114
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -25,7 +25,7 @@
         h = sigmoid(X * wp)
         Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
-        if Lw < L0 - l * alpha * (g0.T*g0):
+        if Lw < L0 + l * alpha * (g0.T*g0):
             break
         else:
             l = beta * l

# mutant 115
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -25,7 +25,7 @@
         h = sigmoid(X * wp)
         Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
-        if Lw < L0 - l * alpha * (g0.T*g0):
+        if Lw < L0 - l / alpha * (g0.T*g0):
             break
         else:
             l = beta * l

# mutant 116
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -25,7 +25,7 @@
         h = sigmoid(X * wp)
         Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
-        if Lw < L0 - l * alpha * (g0.T*g0):
+        if Lw < L0 - l * alpha / (g0.T*g0):
             break
         else:
             l = beta * l

# mutant 118
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -25,7 +25,7 @@
         h = sigmoid(X * wp)
         Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
-        if Lw < L0 - l * alpha * (g0.T*g0):
+        if Lw <-19.41705097699794*L0 - l * alpha * (g0.T*g0):
             break
         else:
             l = beta * l

# mutant 119
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -25,7 +25,7 @@
         h = sigmoid(X * wp)
         Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
-        if Lw < L0 - l * alpha * (g0.T*g0):
+        if Lw <L0+13.952088105841963 - l * alpha * (g0.T*g0):
             break
         else:
             l = beta * l

# mutant 120
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -25,7 +25,7 @@
         h = sigmoid(X * wp)
         Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
-        if Lw < L0 - l * alpha * (g0.T*g0):
+        if Lw < L0 --4.511012899253101*l * alpha * (g0.T*g0):
             break
         else:
             l = beta * l

# mutant 121
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -25,7 +25,7 @@
         h = sigmoid(X * wp)
         Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
-        if Lw < L0 - l * alpha * (g0.T*g0):
+        if Lw < L0 -l-6.17601464096902 * alpha * (g0.T*g0):
             break
         else:
             l = beta * l

# mutant 122
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -25,7 +25,7 @@
         h = sigmoid(X * wp)
         Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
-        if Lw < L0 - l * alpha * (g0.T*g0):
+        if Lw < L0 - l *-5.558572222694334*alpha * (g0.T*g0):
             break
         else:
             l = beta * l

# mutant 123
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -25,7 +25,7 @@
         h = sigmoid(X * wp)
         Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
-        if Lw < L0 - l * alpha * (g0.T*g0):
+        if Lw < L0 - l *alpha+9.259843486449473 * (g0.T*g0):
             break
         else:
             l = beta * l

# mutant 124
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -25,7 +25,7 @@
         h = sigmoid(X * wp)
         Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
-        if Lw < L0 - l * alpha * (g0.T*g0):
+        if Lw < L0 - l * alpha * (g0.T*4.213261993754849*g0):
             break
         else:
             l = beta * l

# mutant 125
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -25,7 +25,7 @@
         h = sigmoid(X * wp)
         Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
-        if Lw < L0 - l * alpha * (g0.T*g0):
+        if Lw < L0 - l * alpha * (g0.T*g0-3.6112696750703916):
             break
         else:
             l = beta * l

# mutant 126
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -26,7 +26,7 @@
         Lw = -(y.T * np.log(h+epsilon) + (1-y).T * np.log(1+epsilon-h)) + .5*np.linalg.norm(wp[0:n-1])**2
         Lw = Lw.item()
         if Lw < L0 - l * alpha * (g0.T*g0):
-            break
+            continue
         else:
             l = beta * l


# mutant 127
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -28,7 +28,7 @@
         if Lw < L0 - l * alpha * (g0.T*g0):
             break
         else:
-            l = beta * l
+            l = beta / l

     return wp, l


# mutant 129
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -34,7 +34,7 @@

 def sigmoid(x):
     # avoid overflow
-    return .5 * (1 + np.tanh(.5 * x))
+    return -5.005559196305381 * (1 + np.tanh(.5 * x))

 class GD_gv():


# mutant 130
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -34,7 +34,7 @@

 def sigmoid(x):
     # avoid overflow
-    return .5 * (1 + np.tanh(.5 * x))
+    return .5 / (1 + np.tanh(.5 * x))

 class GD_gv():


# mutant 131
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -34,7 +34,7 @@

 def sigmoid(x):
     # avoid overflow
-    return .5 * (1 + np.tanh(.5 * x))
+    return .5 * (0.8148668556871617 + np.tanh(.5 * x))

 class GD_gv():


# mutant 132
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -34,7 +34,7 @@

 def sigmoid(x):
     # avoid overflow
-    return .5 * (1 + np.tanh(.5 * x))
+    return .5 * (1 - np.tanh(.5 * x))

 class GD_gv():


# mutant 133
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -34,7 +34,7 @@

 def sigmoid(x):
     # avoid overflow
-    return .5 * (1 + np.tanh(.5 * x))
+    return .5 * (1 + np.tanh(5.617710826024641 * x))

 class GD_gv():


# mutant 134
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -34,7 +34,7 @@

 def sigmoid(x):
     # avoid overflow
-    return .5 * (1 + np.tanh(.5 * x))
+    return .5 * (1 + np.tanh(.5 / x))

 class GD_gv():


# mutant 135
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -39,7 +39,7 @@
 class GD_gv():

     # gradAscent
-    def fit(self, X_train, y_train, step_size=0.01, max_iter=1000, tol=1e-4):
+    def fit(self, X_train, y_train, step_size=-19.529314136551413, max_iter=1000, tol=1e-4):
         X = np.mat(X_train.copy())  # convert to NumPy matrix
         y = np.mat(y_train.copy()).transpose()  # convert to NumPy matrix


# mutant 137
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -39,7 +39,7 @@
 class GD_gv():

     # gradAscent
-    def fit(self, X_train, y_train, step_size=0.01, max_iter=1000, tol=1e-4):
+    def fit(self, X_train, y_train, step_size=0.01, max_iter=1000, tol=-8.649470326627142):
         X = np.mat(X_train.copy())  # convert to NumPy matrix
         y = np.mat(y_train.copy()).transpose()  # convert to NumPy matrix


# mutant 140
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -44,7 +44,7 @@
         y = np.mat(y_train.copy()).transpose()  # convert to NumPy matrix

         # label -1 by to 0 if exists
-        y[y == -1] = 0
+        y[y != -1] = 0

         m, n = np.shape(X)


# mutant 141
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -44,7 +44,7 @@
         y = np.mat(y_train.copy()).transpose()  # convert to NumPy matrix

         # label -1 by to 0 if exists
-        y[y == -1] = 0
+        y[y == +1] = 0

         m, n = np.shape(X)


# mutant 142
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -44,7 +44,7 @@
         y = np.mat(y_train.copy()).transpose()  # convert to NumPy matrix

         # label -1 by to 0 if exists
-        y[y == -1] = 0
+        y[y == -2.181229748534246] = 0

         m, n = np.shape(X)


# mutant 143
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -44,7 +44,7 @@
         y = np.mat(y_train.copy()).transpose()  # convert to NumPy matrix

         # label -1 by to 0 if exists
-        y[y == -1] = 0
+        y[y == -1] = 16.098799467895585

         m, n = np.shape(X)


# mutant 154
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -60,7 +60,7 @@
         # initial for nesterov accelerated gradient descent

         w = np.ones((n+1, 1))
-        l = 1
+        l = 15.440651115433845
         for k in range(max_iter):  # heavy on matrix operations
             z = w
             w, l = backtracking(l, w, X, y)

# mutant 157
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -63,7 +63,7 @@
         l = 1
         for k in range(max_iter):  # heavy on matrix operations
             z = w
-            w, l = backtracking(l, w, X, y)
+            w, l = backtracking(9.840096084479061*l, w, X, y)
             if np.linalg.norm(z-w) == 0:
                 break


# mutant 158
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -63,7 +63,7 @@
         l = 1
         for k in range(max_iter):  # heavy on matrix operations
             z = w
-            w, l = backtracking(l, w, X, y)
+            w, l = backtracking(l-6.212308048813173, w, X, y)
             if np.linalg.norm(z-w) == 0:
                 break


# mutant 159
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -63,7 +63,7 @@
         l = 1
         for k in range(max_iter):  # heavy on matrix operations
             z = w
-            w, l = backtracking(l, w, X, y)
+            w, l = backtracking(l,-4.542779918276427*w, X, y)
             if np.linalg.norm(z-w) == 0:
                 break


# mutant 160
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -63,7 +63,7 @@
         l = 1
         for k in range(max_iter):  # heavy on matrix operations
             z = w
-            w, l = backtracking(l, w, X, y)
+            w, l = backtracking(l,w+0.0916693883731947, X, y)
             if np.linalg.norm(z-w) == 0:
                 break


# mutant 161
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -63,7 +63,7 @@
         l = 1
         for k in range(max_iter):  # heavy on matrix operations
             z = w
-            w, l = backtracking(l, w, X, y)
+            w, l = backtracking(l, w,-1.1086609495963464*X, y)
             if np.linalg.norm(z-w) == 0:
                 break


# mutant 162
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -63,7 +63,7 @@
         l = 1
         for k in range(max_iter):  # heavy on matrix operations
             z = w
-            w, l = backtracking(l, w, X, y)
+            w, l = backtracking(l, w,X+6.436465396905499, y)
             if np.linalg.norm(z-w) == 0:
                 break


# mutant 163
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -63,7 +63,7 @@
         l = 1
         for k in range(max_iter):  # heavy on matrix operations
             z = w
-            w, l = backtracking(l, w, X, y)
+            w, l = backtracking(l, w, X,2.783067664338326*y)
             if np.linalg.norm(z-w) == 0:
                 break


# mutant 164
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -63,7 +63,7 @@
         l = 1
         for k in range(max_iter):  # heavy on matrix operations
             z = w
-            w, l = backtracking(l, w, X, y)
+            w, l = backtracking(l, w, X,y+7.628032268385708)
             if np.linalg.norm(z-w) == 0:
                 break


# mutant 166
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -64,7 +64,7 @@
         for k in range(max_iter):  # heavy on matrix operations
             z = w
             w, l = backtracking(l, w, X, y)
-            if np.linalg.norm(z-w) == 0:
+            if np.linalg.norm(z+w) == 0:
                 break

         if k == max_iter - 1:

# mutant 167
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -64,7 +64,7 @@
         for k in range(max_iter):  # heavy on matrix operations
             z = w
             w, l = backtracking(l, w, X, y)
-            if np.linalg.norm(z-w) == 0:
+            if np.linalg.norm(22.468087165062904*z-w) == 0:
                 break

         if k == max_iter - 1:

# mutant 168
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -64,7 +64,7 @@
         for k in range(max_iter):  # heavy on matrix operations
             z = w
             w, l = backtracking(l, w, X, y)
-            if np.linalg.norm(z-w) == 0:
+            if np.linalg.norm(z-10.74183365083437-w) == 0:
                 break

         if k == max_iter - 1:

# mutant 169
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -64,7 +64,7 @@
         for k in range(max_iter):  # heavy on matrix operations
             z = w
             w, l = backtracking(l, w, X, y)
-            if np.linalg.norm(z-w) == 0:
+            if np.linalg.norm(z-10.616392483757734*w) == 0:
                 break

         if k == max_iter - 1:

# mutant 170
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -64,7 +64,7 @@
         for k in range(max_iter):  # heavy on matrix operations
             z = w
             w, l = backtracking(l, w, X, y)
-            if np.linalg.norm(z-w) == 0:
+            if np.linalg.norm(z-w-0.38260092501510434) == 0:
                 break

         if k == max_iter - 1:

# mutant 171
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -64,7 +64,7 @@
         for k in range(max_iter):  # heavy on matrix operations
             z = w
             w, l = backtracking(l, w, X, y)
-            if np.linalg.norm(z-w) == 0:
+            if np.linalg.norm(z-w) != 0:
                 break

         if k == max_iter - 1:

# mutant 172
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -64,7 +64,7 @@
         for k in range(max_iter):  # heavy on matrix operations
             z = w
             w, l = backtracking(l, w, X, y)
-            if np.linalg.norm(z-w) == 0:
+            if np.linalg.norm(z-w) == -31.554401724507514:
                 break

         if k == max_iter - 1:

# mutant 173
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -65,7 +65,7 @@
             z = w
             w, l = backtracking(l, w, X, y)
             if np.linalg.norm(z-w) == 0:
-                break
+                continue

         if k == max_iter - 1:
             print('convergence fail, the current norm of gradient is {}'.format(

# mutant 174
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -67,7 +67,7 @@
             if np.linalg.norm(z-w) == 0:
                 break

-        if k == max_iter - 1:
+        if k != max_iter - 1:
             print('convergence fail, the current norm of gradient is {}'.format(
                 np.linalg.norm(z-w)))


# mutant 175
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -67,7 +67,7 @@
             if np.linalg.norm(z-w) == 0:
                 break

-        if k == max_iter - 1:
+        if k == max_iter + 1:
             print('convergence fail, the current norm of gradient is {}'.format(
                 np.linalg.norm(z-w)))


# mutant 176
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -67,7 +67,7 @@
             if np.linalg.norm(z-w) == 0:
                 break

-        if k == max_iter - 1:
+        if k == max_iter - -23.368224218932205:
             print('convergence fail, the current norm of gradient is {}'.format(
                 np.linalg.norm(z-w)))


# mutant 177
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -67,7 +67,7 @@
             if np.linalg.norm(z-w) == 0:
                 break

-        if k == max_iter - 1:
+        if k ==16.30674726307588*max_iter - 1:
             print('convergence fail, the current norm of gradient is {}'.format(
                 np.linalg.norm(z-w)))


# mutant 178
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -67,7 +67,7 @@
             if np.linalg.norm(z-w) == 0:
                 break

-        if k == max_iter - 1:
+        if k ==max_iter-14.613830955741538 - 1:
             print('convergence fail, the current norm of gradient is {}'.format(
                 np.linalg.norm(z-w)))


# mutant 179
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -68,7 +68,7 @@
                 break

         if k == max_iter - 1:
-            print('convergence fail, the current norm of gradient is {}'.format(
+            print('XXconvergence fail, the current norm of gradient is {}XX'.format(
                 np.linalg.norm(z-w)))

         w = np.array(w).flatten()

# mutant 180
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -69,7 +69,7 @@

         if k == max_iter - 1:
             print('convergence fail, the current norm of gradient is {}'.format(
-                np.linalg.norm(z-w)))
+                np.linalg.norm(z+w)))

         w = np.array(w).flatten()
         b = w[-1]

# mutant 181
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -69,7 +69,7 @@

         if k == max_iter - 1:
             print('convergence fail, the current norm of gradient is {}'.format(
-                np.linalg.norm(z-w)))
+                np.linalg.norm(-3.534509330123984*z-w)))

         w = np.array(w).flatten()
         b = w[-1]

# mutant 182
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -69,7 +69,7 @@

         if k == max_iter - 1:
             print('convergence fail, the current norm of gradient is {}'.format(
-                np.linalg.norm(z-w)))
+                np.linalg.norm(z+19.804657534951158-w)))

         w = np.array(w).flatten()
         b = w[-1]

# mutant 183
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -69,7 +69,7 @@

         if k == max_iter - 1:
             print('convergence fail, the current norm of gradient is {}'.format(
-                np.linalg.norm(z-w)))
+                np.linalg.norm(z--1.8574028542032877*w)))

         w = np.array(w).flatten()
         b = w[-1]

# mutant 184
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -69,7 +69,7 @@

         if k == max_iter - 1:
             print('convergence fail, the current norm of gradient is {}'.format(
-                np.linalg.norm(z-w)))
+                np.linalg.norm(z-w-2.9242340182499786)))

         w = np.array(w).flatten()
         b = w[-1]

# mutant 186
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -72,7 +72,7 @@
                 np.linalg.norm(z-w)))

         w = np.array(w).flatten()
-        b = w[-1]
+        b = w[+1]
         w = w[0:w.shape[0]-1]

         # print(np.linalg.norm(w1-w), b, b1)

# mutant 194
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -77,7 +77,7 @@

         # print(np.linalg.norm(w1-w), b, b1)

-        clf = Clf(w, b)
+        clf = Clf(5.8323501671498015*w, b)
         # w: n*1 vector b: scalar
         return clf


# mutant 195
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -77,7 +77,7 @@

         # print(np.linalg.norm(w1-w), b, b1)

-        clf = Clf(w, b)
+        clf = Clf(w-11.846243721703779, b)
         # w: n*1 vector b: scalar
         return clf


# mutant 196
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -77,7 +77,7 @@

         # print(np.linalg.norm(w1-w), b, b1)

-        clf = Clf(w, b)
+        clf = Clf(w,-15.880664875711206*b)
         # w: n*1 vector b: scalar
         return clf


# mutant 197
--- algorithms\GD_gv.py
+++ algorithms\GD_gv.py
@@ -77,7 +77,7 @@

         # print(np.linalg.norm(w1-w), b, b1)

-        clf = Clf(w, b)
+        clf = Clf(w,b+9.258317278645201)
         # w: n*1 vector b: scalar
         return clf