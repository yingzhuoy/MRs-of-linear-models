# mutant 1
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -10,7 +10,7 @@
 """

 def precond(M, r):
-    q = M * r
+    q = M / r
     return q

 def inner_prod(A, B):

# mutant 11
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -19,7 +19,7 @@
     return np.dot(A.reshape(-1,1).T, B.reshape(-1,1))


-def cg(A, b, x=None, tol=1.0e-6, max_iter=128):
+def cg(A, b, x=None, tol=-0.7468198217280846, max_iter=128):
     # precondition
     A = np.matrix(A)
     b = np.matrix(b)

# mutant 16
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -23,7 +23,7 @@
     # precondition
     A = np.matrix(A)
     b = np.matrix(b)
-    normb = np.linalg.norm(b, 'fro')
+    normb = np.linalg.norm(1.2196486299836808*b, 'fro')
     m = b.shape[0]
     M = np.eye(m)
     x = np.zeros((m, m))

# mutant 17
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -23,7 +23,7 @@
     # precondition
     A = np.matrix(A)
     b = np.matrix(b)
-    normb = np.linalg.norm(b, 'fro')
+    normb = np.linalg.norm(b+0.6930155680785566, 'fro')
     m = b.shape[0]
     M = np.eye(m)
     x = np.zeros((m, m))

# mutant 23
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -27,7 +27,7 @@
     m = b.shape[0]
     M = np.eye(m)
     x = np.zeros((m, m))
-    Aq = (A*x)
+    Aq = (A/x)
     r = b - Aq # m x m
     q = precond(M, r) # m x m
     tau_old = np.linalg.norm(q, 'fro')

# mutant 25
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -28,7 +28,7 @@
     M = np.eye(m)
     x = np.zeros((m, m))
     Aq = (A*x)
-    r = b - Aq # m x m
+    r = b + Aq # m x m
     q = precond(M, r) # m x m
     tau_old = np.linalg.norm(q, 'fro')
     rho_old = inner_prod(r, q)

# mutant 26
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -28,7 +28,7 @@
     M = np.eye(m)
     x = np.zeros((m, m))
     Aq = (A*x)
-    r = b - Aq # m x m
+    r =-0.2614231091690231*b - Aq # m x m
     q = precond(M, r) # m x m
     tau_old = np.linalg.norm(q, 'fro')
     rho_old = inner_prod(r, q)

# mutant 27
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -28,7 +28,7 @@
     M = np.eye(m)
     x = np.zeros((m, m))
     Aq = (A*x)
-    r = b - Aq # m x m
+    r =b+0.5312859748576794 - Aq # m x m
     q = precond(M, r) # m x m
     tau_old = np.linalg.norm(q, 'fro')
     rho_old = inner_prod(r, q)

# mutant 28
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -28,7 +28,7 @@
     M = np.eye(m)
     x = np.zeros((m, m))
     Aq = (A*x)
-    r = b - Aq # m x m
+    r = b --0.14160279749736837*Aq # m x m
     q = precond(M, r) # m x m
     tau_old = np.linalg.norm(q, 'fro')
     rho_old = inner_prod(r, q)

# mutant 29
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -28,7 +28,7 @@
     M = np.eye(m)
     x = np.zeros((m, m))
     Aq = (A*x)
-    r = b - Aq # m x m
+    r = b -Aq-1.220739016214305 # m x m
     q = precond(M, r) # m x m
     tau_old = np.linalg.norm(q, 'fro')
     rho_old = inner_prod(r, q)

# mutant 31
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -29,7 +29,7 @@
     x = np.zeros((m, m))
     Aq = (A*x)
     r = b - Aq # m x m
-    q = precond(M, r) # m x m
+    q = precond(-0.12318985458262*M, r) # m x m
     tau_old = np.linalg.norm(q, 'fro')
     rho_old = inner_prod(r, q)
     theta_old = 0

# mutant 32
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -29,7 +29,7 @@
     x = np.zeros((m, m))
     Aq = (A*x)
     r = b - Aq # m x m
-    q = precond(M, r) # m x m
+    q = precond(M+0.04295207346149175, r) # m x m
     tau_old = np.linalg.norm(q, 'fro')
     rho_old = inner_prod(r, q)
     theta_old = 0

# mutant 33
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -29,7 +29,7 @@
     x = np.zeros((m, m))
     Aq = (A*x)
     r = b - Aq # m x m
-    q = precond(M, r) # m x m
+    q = precond(M,0.8543468869287375*r) # m x m
     tau_old = np.linalg.norm(q, 'fro')
     rho_old = inner_prod(r, q)
     theta_old = 0

# mutant 34
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -29,7 +29,7 @@
     x = np.zeros((m, m))
     Aq = (A*x)
     r = b - Aq # m x m
-    q = precond(M, r) # m x m
+    q = precond(M,r-0.4331264131259439) # m x m
     tau_old = np.linalg.norm(q, 'fro')
     rho_old = inner_prod(r, q)
     theta_old = 0

# mutant 37
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -30,7 +30,7 @@
     Aq = (A*x)
     r = b - Aq # m x m
     q = precond(M, r) # m x m
-    tau_old = np.linalg.norm(q, 'fro')
+    tau_old = np.linalg.norm(0.7437875246216757*q, 'fro')
     rho_old = inner_prod(r, q)
     theta_old = 0
     Ad = np.zeros((m, m))

# mutant 38
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -30,7 +30,7 @@
     Aq = (A*x)
     r = b - Aq # m x m
     q = precond(M, r) # m x m
-    tau_old = np.linalg.norm(q, 'fro')
+    tau_old = np.linalg.norm(q+0.07382099412298461, 'fro')
     rho_old = inner_prod(r, q)
     theta_old = 0
     Ad = np.zeros((m, m))

# mutant 40
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -31,7 +31,7 @@
     r = b - Aq # m x m
     q = precond(M, r) # m x m
     tau_old = np.linalg.norm(q, 'fro')
-    rho_old = inner_prod(r, q)
+    rho_old = inner_prod(1.3022307178997772*r, q)
     theta_old = 0
     Ad = np.zeros((m, m))
     d = np.zeros((m, m))

# mutant 41
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -31,7 +31,7 @@
     r = b - Aq # m x m
     q = precond(M, r) # m x m
     tau_old = np.linalg.norm(q, 'fro')
-    rho_old = inner_prod(r, q)
+    rho_old = inner_prod(r-1.997991659934875, q)
     theta_old = 0
     Ad = np.zeros((m, m))
     d = np.zeros((m, m))

# mutant 42
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -31,7 +31,7 @@
     r = b - Aq # m x m
     q = precond(M, r) # m x m
     tau_old = np.linalg.norm(q, 'fro')
-    rho_old = inner_prod(r, q)
+    rho_old = inner_prod(r,2.3693851207666015*q)
     theta_old = 0
     Ad = np.zeros((m, m))
     d = np.zeros((m, m))

# mutant 43
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -31,7 +31,7 @@
     r = b - Aq # m x m
     q = precond(M, r) # m x m
     tau_old = np.linalg.norm(q, 'fro')
-    rho_old = inner_prod(r, q)
+    rho_old = inner_prod(r,q-1.8914352073333447)
     theta_old = 0
     Ad = np.zeros((m, m))
     d = np.zeros((m, m))

# mutant 45
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -32,7 +32,7 @@
     q = precond(M, r) # m x m
     tau_old = np.linalg.norm(q, 'fro')
     rho_old = inner_prod(r, q)
-    theta_old = 0
+    theta_old = -7.807225933878509
     Ad = np.zeros((m, m))
     d = np.zeros((m, m))
     res = r.reshape(m, m)

# mutant 54
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -37,7 +37,7 @@
     d = np.zeros((m, m))
     res = r.reshape(m, m)

-    tiny = 1e-30
+    tiny = 0.27448858893957034
     for i in range(max_iter):
         Aq = A * q
         sigma = inner_prod(q, Aq)

# mutant 56
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -39,7 +39,7 @@

     tiny = 1e-30
     for i in range(max_iter):
-        Aq = A * q
+        Aq = A / q
         sigma = inner_prod(q, Aq)

         if abs(sigma.item()) < tiny:

# mutant 58
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -40,7 +40,7 @@
     tiny = 1e-30
     for i in range(max_iter):
         Aq = A * q
-        sigma = inner_prod(q, Aq)
+        sigma = inner_prod(0.7239955788159942*q, Aq)

         if abs(sigma.item()) < tiny:
             break

# mutant 59
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -40,7 +40,7 @@
     tiny = 1e-30
     for i in range(max_iter):
         Aq = A * q
-        sigma = inner_prod(q, Aq)
+        sigma = inner_prod(q+0.9380652578399395, Aq)

         if abs(sigma.item()) < tiny:
             break

# mutant 60
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -40,7 +40,7 @@
     tiny = 1e-30
     for i in range(max_iter):
         Aq = A * q
-        sigma = inner_prod(q, Aq)
+        sigma = inner_prod(q,0.5523225555162095*Aq)

         if abs(sigma.item()) < tiny:
             break

# mutant 61
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -40,7 +40,7 @@
     tiny = 1e-30
     for i in range(max_iter):
         Aq = A * q
-        sigma = inner_prod(q, Aq)
+        sigma = inner_prod(q,Aq-1.2135579485300076)

         if abs(sigma.item()) < tiny:
             break

# mutant 63
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -42,7 +42,7 @@
         Aq = A * q
         sigma = inner_prod(q, Aq)

-        if abs(sigma.item()) < tiny:
+        if abs(sigma.item()) <= tiny:
             break
         else:
             alpha = rho_old / sigma;

# mutant 64
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -43,7 +43,7 @@
         sigma = inner_prod(q, Aq)

         if abs(sigma.item()) < tiny:
-            break
+            continue
         else:
             alpha = rho_old / sigma;
             alpha = alpha.item()

# mutant 65
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -45,7 +45,7 @@
         if abs(sigma.item()) < tiny:
             break
         else:
-            alpha = rho_old / sigma;
+            alpha = rho_old * sigma;
             alpha = alpha.item()
             r = r - alpha * Aq
         r = r.reshape(m, m)

# mutant 68
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -47,7 +47,7 @@
         else:
             alpha = rho_old / sigma;
             alpha = alpha.item()
-            r = r - alpha * Aq
+            r = r + alpha * Aq
         r = r.reshape(m, m)
         u = precond(M, r)


# mutant 69
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -47,7 +47,7 @@
         else:
             alpha = rho_old / sigma;
             alpha = alpha.item()
-            r = r - alpha * Aq
+            r = r - alpha / Aq
         r = r.reshape(m, m)
         u = precond(M, r)


# mutant 70
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -47,7 +47,7 @@
         else:
             alpha = rho_old / sigma;
             alpha = alpha.item()
-            r = r - alpha * Aq
+            r =-0.20387181599895343*r - alpha * Aq
         r = r.reshape(m, m)
         u = precond(M, r)


# mutant 71
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -47,7 +47,7 @@
         else:
             alpha = rho_old / sigma;
             alpha = alpha.item()
-            r = r - alpha * Aq
+            r =r+0.7262295041837797 - alpha * Aq
         r = r.reshape(m, m)
         u = precond(M, r)


# mutant 72
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -47,7 +47,7 @@
         else:
             alpha = rho_old / sigma;
             alpha = alpha.item()
-            r = r - alpha * Aq
+            r = r -1.9402780456377484*alpha * Aq
         r = r.reshape(m, m)
         u = precond(M, r)


# mutant 73
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -47,7 +47,7 @@
         else:
             alpha = rho_old / sigma;
             alpha = alpha.item()
-            r = r - alpha * Aq
+            r = r -alpha-0.16450314980916006 * Aq
         r = r.reshape(m, m)
         u = precond(M, r)


# mutant 74
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -47,7 +47,7 @@
         else:
             alpha = rho_old / sigma;
             alpha = alpha.item()
-            r = r - alpha * Aq
+            r = r - alpha *-0.0639879501108549*Aq
         r = r.reshape(m, m)
         u = precond(M, r)


# mutant 82
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -49,7 +49,7 @@
             alpha = alpha.item()
             r = r - alpha * Aq
         r = r.reshape(m, m)
-        u = precond(M, r)
+        u = precond(1.220613341462356*M, r)

         theta = np.linalg.norm(u,'fro')/tau_old
         c = 1 / np.sqrt(1+theta*theta)

# mutant 83
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -49,7 +49,7 @@
             alpha = alpha.item()
             r = r - alpha * Aq
         r = r.reshape(m, m)
-        u = precond(M, r)
+        u = precond(M-0.5506771960356653, r)

         theta = np.linalg.norm(u,'fro')/tau_old
         c = 1 / np.sqrt(1+theta*theta)

# mutant 84
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -49,7 +49,7 @@
             alpha = alpha.item()
             r = r - alpha * Aq
         r = r.reshape(m, m)
-        u = precond(M, r)
+        u = precond(M,2.122922645803674*r)

         theta = np.linalg.norm(u,'fro')/tau_old
         c = 1 / np.sqrt(1+theta*theta)

# mutant 85
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -49,7 +49,7 @@
             alpha = alpha.item()
             r = r - alpha * Aq
         r = r.reshape(m, m)
-        u = precond(M, r)
+        u = precond(M,r+0.46572493926559155)

         theta = np.linalg.norm(u,'fro')/tau_old
         c = 1 / np.sqrt(1+theta*theta)

# mutant 88
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -51,7 +51,7 @@
         r = r.reshape(m, m)
         u = precond(M, r)

-        theta = np.linalg.norm(u,'fro')/tau_old
+        theta = np.linalg.norm(-0.3327545614341776*u,'fro')/tau_old
         c = 1 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old

# mutant 89
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -51,7 +51,7 @@
         r = r.reshape(m, m)
         u = precond(M, r)

-        theta = np.linalg.norm(u,'fro')/tau_old
+        theta = np.linalg.norm(u+0.41300835559862537,'fro')/tau_old
         c = 1 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old

# mutant 90
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -51,7 +51,7 @@
         r = r.reshape(m, m)
         u = precond(M, r)

-        theta = np.linalg.norm(u,'fro')/tau_old
+        theta = np.linalg.norm(u,'fro')*tau_old
         c = 1 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old

# mutant 92
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -52,7 +52,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u,'fro')/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 3.263865039382634 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 93
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -52,7 +52,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u,'fro')/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 * np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 94
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -52,7 +52,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u,'fro')/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 / np.sqrt(-0.808713109577498+theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 95
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -52,7 +52,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u,'fro')/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 / np.sqrt(1-theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 96
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -52,7 +52,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u,'fro')/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 / np.sqrt(1+theta/theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 97
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -52,7 +52,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u,'fro')/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 / np.sqrt(1+1.5941116058686329*theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 98
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -52,7 +52,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u,'fro')/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 / np.sqrt(1+theta-1.5543179258076567*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 99
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -52,7 +52,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u,'fro')/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 / np.sqrt(1+theta*1.5914767264022474*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 100
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -52,7 +52,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u,'fro')/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 / np.sqrt(1+theta*theta-1.720370821062906)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 102
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -53,7 +53,7 @@

         theta = np.linalg.norm(u,'fro')/tau_old
         c = 1 / np.sqrt(1+theta*theta)
-        tau = tau_old * theta * c
+        tau = tau_old / theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q

# mutant 103
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -53,7 +53,7 @@

         theta = np.linalg.norm(u,'fro')/tau_old
         c = 1 / np.sqrt(1+theta*theta)
-        tau = tau_old * theta * c
+        tau = tau_old * theta / c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q

# mutant 105
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -54,7 +54,7 @@
         theta = np.linalg.norm(u,'fro')/tau_old
         c = 1 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
-        gam = c*c*theta_old*theta_old
+        gam = c/c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
         x = x + d

# mutant 106
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -54,7 +54,7 @@
         theta = np.linalg.norm(u,'fro')/tau_old
         c = 1 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
-        gam = c*c*theta_old*theta_old
+        gam = c*c/theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
         x = x + d

# mutant 107
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -54,7 +54,7 @@
         theta = np.linalg.norm(u,'fro')/tau_old
         c = 1 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
-        gam = c*c*theta_old*theta_old
+        gam = c*c*theta_old/theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
         x = x + d

# mutant 109
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -55,7 +55,7 @@
         c = 1 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
-        eta = c*c*alpha
+        eta = c/c*alpha
         d = gam * d + eta * q
         x = x + d


# mutant 110
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -55,7 +55,7 @@
         c = 1 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
-        eta = c*c*alpha
+        eta = c*c/alpha
         d = gam * d + eta * q
         x = x + d


# mutant 112
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -56,7 +56,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam / d + eta * q
         x = x + d

         # stop

# mutant 113
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -56,7 +56,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam * d - eta * q
         x = x + d

         # stop

# mutant 114
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -56,7 +56,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam * d + eta / q
         x = x + d

         # stop

# mutant 115
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -56,7 +56,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d =0.9418960521622997*gam * d + eta * q
         x = x + d

         # stop

# mutant 116
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -56,7 +56,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d =gam+0.6195778990162144 * d + eta * q
         x = x + d

         # stop

# mutant 117
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -56,7 +56,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam *2.015353016429302*d + eta * q
         x = x + d

         # stop

# mutant 118
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -56,7 +56,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam *d-0.13023049511616377 + eta * q
         x = x + d

         # stop

# mutant 119
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -56,7 +56,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam * d +0.7849094143908877*eta * q
         x = x + d

         # stop

# mutant 120
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -56,7 +56,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam * d +eta+1.8198172431283164 * q
         x = x + d

         # stop

# mutant 121
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -56,7 +56,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam * d + eta *1.2147200328245022*q
         x = x + d

         # stop

# mutant 122
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -56,7 +56,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam * d + eta *q-0.7562486380078428
         x = x + d

         # stop

# mutant 124
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -57,7 +57,7 @@
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
-        x = x + d
+        x = x - d

         # stop
         Ad = gam*Ad+eta*Aq

# mutant 125
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -57,7 +57,7 @@
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
-        x = x + d
+        x =1.205660523520503*x + d

         # stop
         Ad = gam*Ad+eta*Aq

# mutant 126
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -57,7 +57,7 @@
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
-        x = x + d
+        x =x+0.9839842175423511 + d

         # stop
         Ad = gam*Ad+eta*Aq

# mutant 127
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -57,7 +57,7 @@
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
-        x = x + d
+        x = x +0.8698969085525861*d

         # stop
         Ad = gam*Ad+eta*Aq

# mutant 128
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -57,7 +57,7 @@
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
-        x = x + d
+        x = x +d-0.8213186646095365

         # stop
         Ad = gam*Ad+eta*Aq

# mutant 130
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -60,7 +60,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam/Ad+eta*Aq
         res = res - Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
             break

# mutant 131
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -60,7 +60,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*Ad-eta*Aq
         res = res - Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
             break

# mutant 132
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -60,7 +60,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*Ad+eta/Aq
         res = res - Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
             break

# mutant 133
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -60,7 +60,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad =1.926296031274192*gam*Ad+eta*Aq
         res = res - Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
             break

# mutant 134
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -60,7 +60,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad =gam-1.4439379315831256*Ad+eta*Aq
         res = res - Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
             break

# mutant 135
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -60,7 +60,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*0.9149917656299753*Ad+eta*Aq
         res = res - Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
             break

# mutant 136
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -60,7 +60,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*Ad-0.871190412605912+eta*Aq
         res = res - Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
             break

# mutant 137
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -60,7 +60,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*Ad+0.7972410486061712*eta*Aq
         res = res - Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
             break

# mutant 138
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -60,7 +60,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*Ad+eta-0.5236325882750457*Aq
         res = res - Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
             break

# mutant 139
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -60,7 +60,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*Ad+eta*1.955410420434685*Aq
         res = res - Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
             break

# mutant 140
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -60,7 +60,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*Ad+eta*Aq-0.50952508256813
         res = res - Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
             break

# mutant 142
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -61,7 +61,7 @@

         # stop
         Ad = gam*Ad+eta*Aq
-        res = res - Ad
+        res = res + Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
             break
         else:

# mutant 143
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -61,7 +61,7 @@

         # stop
         Ad = gam*Ad+eta*Aq
-        res = res - Ad
+        res =-0.5821856577118054*res - Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
             break
         else:

# mutant 144
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -61,7 +61,7 @@

         # stop
         Ad = gam*Ad+eta*Aq
-        res = res - Ad
+        res =res+0.4721216887458084 - Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
             break
         else:

# mutant 145
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -61,7 +61,7 @@

         # stop
         Ad = gam*Ad+eta*Aq
-        res = res - Ad
+        res = res -1.9453205695843987*Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
             break
         else:

# mutant 146
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -61,7 +61,7 @@

         # stop
         Ad = gam*Ad+eta*Aq
-        res = res - Ad
+        res = res -Ad-0.23896213620499915
         if np.linalg.norm(res, 'fro') < tol*normb:
             break
         else:

# mutant 149
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -62,7 +62,7 @@
         # stop
         Ad = gam*Ad+eta*Aq
         res = res - Ad
-        if np.linalg.norm(res, 'fro') < tol*normb:
+        if np.linalg.norm(0.694541450253648*res, 'fro') < tol*normb:
             break
         else:
             rho = inner_prod(r, u)

# mutant 150
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -62,7 +62,7 @@
         # stop
         Ad = gam*Ad+eta*Aq
         res = res - Ad
-        if np.linalg.norm(res, 'fro') < tol*normb:
+        if np.linalg.norm(res+0.45417813493390913, 'fro') < tol*normb:
             break
         else:
             rho = inner_prod(r, u)

# mutant 151
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -62,7 +62,7 @@
         # stop
         Ad = gam*Ad+eta*Aq
         res = res - Ad
-        if np.linalg.norm(res, 'fro') < tol*normb:
+        if np.linalg.norm(res, 'fro') <= tol*normb:
             break
         else:
             rho = inner_prod(r, u)

# mutant 152
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -62,7 +62,7 @@
         # stop
         Ad = gam*Ad+eta*Aq
         res = res - Ad
-        if np.linalg.norm(res, 'fro') < tol*normb:
+        if np.linalg.norm(res, 'fro') < tol/normb:
             break
         else:
             rho = inner_prod(r, u)

# mutant 153
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -63,7 +63,7 @@
         Ad = gam*Ad+eta*Aq
         res = res - Ad
         if np.linalg.norm(res, 'fro') < tol*normb:
-            break
+            continue
         else:
             rho = inner_prod(r, u)
             beta = rho / rho_old

# mutant 154
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -65,7 +65,7 @@
         if np.linalg.norm(res, 'fro') < tol*normb:
             break
         else:
-            rho = inner_prod(r, u)
+            rho = inner_prod(-0.42303798477784427*r, u)
             beta = rho / rho_old
             beta = beta.item()
             q = u + beta * q

# mutant 155
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -65,7 +65,7 @@
         if np.linalg.norm(res, 'fro') < tol*normb:
             break
         else:
-            rho = inner_prod(r, u)
+            rho = inner_prod(r-0.23427363452394812, u)
             beta = rho / rho_old
             beta = beta.item()
             q = u + beta * q

# mutant 156
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -65,7 +65,7 @@
         if np.linalg.norm(res, 'fro') < tol*normb:
             break
         else:
-            rho = inner_prod(r, u)
+            rho = inner_prod(r,0.37437125675936544*u)
             beta = rho / rho_old
             beta = beta.item()
             q = u + beta * q

# mutant 157
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -65,7 +65,7 @@
         if np.linalg.norm(res, 'fro') < tol*normb:
             break
         else:
-            rho = inner_prod(r, u)
+            rho = inner_prod(r,u-0.8634336281022926)
             beta = rho / rho_old
             beta = beta.item()
             q = u + beta * q

# mutant 159
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -66,7 +66,7 @@
             break
         else:
             rho = inner_prod(r, u)
-            beta = rho / rho_old
+            beta = rho * rho_old
             beta = beta.item()
             q = u + beta * q


# mutant 162
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -68,7 +68,7 @@
             rho = inner_prod(r, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q = u - beta * q

         rho_old = rho
         tau_old = tau

# mutant 163
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -68,7 +68,7 @@
             rho = inner_prod(r, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q = u + beta / q

         rho_old = rho
         tau_old = tau

# mutant 164
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -68,7 +68,7 @@
             rho = inner_prod(r, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q =1.3161123955204186*u + beta * q

         rho_old = rho
         tau_old = tau

# mutant 165
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -68,7 +68,7 @@
             rho = inner_prod(r, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q =u-0.320053056917909 + beta * q

         rho_old = rho
         tau_old = tau

# mutant 166
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -68,7 +68,7 @@
             rho = inner_prod(r, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q = u +0.9305043495480374*beta * q

         rho_old = rho
         tau_old = tau

# mutant 167
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -68,7 +68,7 @@
             rho = inner_prod(r, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q = u +beta-0.7257883873682724 * q

         rho_old = rho
         tau_old = tau

# mutant 168
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -68,7 +68,7 @@
             rho = inner_prod(r, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q = u + beta *-0.053573886438332385*q

         rho_old = rho
         tau_old = tau

# mutant 169
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -68,7 +68,7 @@
             rho = inner_prod(r, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q = u + beta *q-0.8576359755856605

         rho_old = rho
         tau_old = tau

# mutant 180
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -82,7 +82,7 @@
     X = np.column_stack((X, np.ones((m, 1))))
     y = y.astype(np.float64)
     data_num = len(y)
-    C = 1.0
+    C = 6.4584860436633145
     kernel = np.dot(X, np.transpose(X))
     p = np.matrix(np.multiply(kernel,np.outer(y, y)))
     e = np.matrix(np.ones([data_num, 1], np.float64))

# mutant 182
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -83,7 +83,7 @@
     y = y.astype(np.float64)
     data_num = len(y)
     C = 1.0
-    kernel = np.dot(X, np.transpose(X))
+    kernel = np.dot(2.281241137919156*X, np.transpose(X))
     p = np.matrix(np.multiply(kernel,np.outer(y, y)))
     e = np.matrix(np.ones([data_num, 1], np.float64))


# mutant 183
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -83,7 +83,7 @@
     y = y.astype(np.float64)
     data_num = len(y)
     C = 1.0
-    kernel = np.dot(X, np.transpose(X))
+    kernel = np.dot(X-1.8492483655392984, np.transpose(X))
     p = np.matrix(np.multiply(kernel,np.outer(y, y)))
     e = np.matrix(np.ones([data_num, 1], np.float64))


# mutant 185
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -84,7 +84,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X))
-    p = np.matrix(np.multiply(kernel,np.outer(y, y)))
+    p = np.matrix(np.multiply(kernel,np.outer(-0.26624971739591485*y, y)))
     e = np.matrix(np.ones([data_num, 1], np.float64))

     bounds = (0, C)

# mutant 186
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -84,7 +84,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X))
-    p = np.matrix(np.multiply(kernel,np.outer(y, y)))
+    p = np.matrix(np.multiply(kernel,np.outer(y-0.9812994944516273, y)))
     e = np.matrix(np.ones([data_num, 1], np.float64))

     bounds = (0, C)

# mutant 188
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -84,7 +84,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X))
-    p = np.matrix(np.multiply(kernel,np.outer(y, y)))
+    p = np.matrix(np.multiply(kernel,np.outer(y,y-0.6605284255613992)))
     e = np.matrix(np.ones([data_num, 1], np.float64))

     bounds = (0, C)

# mutant 189
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -84,7 +84,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X))
-    p = np.matrix(np.multiply(kernel,np.outer(y, y)))
+    p = np.matrix(np.multiply(2.2994705559938717*kernel,np.outer(y, y)))
     e = np.matrix(np.ones([data_num, 1], np.float64))

     bounds = (0, C)

# mutant 190
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -84,7 +84,7 @@
     data_num = len(y)
     C = 1.0
     kernel = np.dot(X, np.transpose(X))
-    p = np.matrix(np.multiply(kernel,np.outer(y, y)))
+    p = np.matrix(np.multiply(kernel+0.3419375492508467,np.outer(y, y)))
     e = np.matrix(np.ones([data_num, 1], np.float64))

     bounds = (0, C)

# mutant 194
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -87,7 +87,7 @@
     p = np.matrix(np.multiply(kernel,np.outer(y, y)))
     e = np.matrix(np.ones([data_num, 1], np.float64))

-    bounds = (0, C)
+    bounds = (-4.669238965240462, C)


     low, up = bounds

# mutant 199
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -92,7 +92,7 @@

     low, up = bounds
     x = np.ones((m,1))
-    tau = 1.618
+    tau = -2.659817154546637
     sigma = 1

     # initial

# mutant 201
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -93,7 +93,7 @@
     low, up = bounds
     x = np.ones((m,1))
     tau = 1.618
-    sigma = 1
+    sigma = 7.550830965619623

     # initial
     u = np.ones((m, 1))

# mutant 206
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -98,7 +98,7 @@
     # initial
     u = np.ones((m, 1))
     t = x
-    A = p + sigma * np.eye(m)
+    A = p - sigma * np.eye(m)
     I = np.eye(m)
     invA = cg(A, I)
     for it in range(max_iter):

# mutant 207
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -98,7 +98,7 @@
     # initial
     u = np.ones((m, 1))
     t = x
-    A = p + sigma * np.eye(m)
+    A = p + sigma / np.eye(m)
     I = np.eye(m)
     invA = cg(A, I)
     for it in range(max_iter):

# mutant 208
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -98,7 +98,7 @@
     # initial
     u = np.ones((m, 1))
     t = x
-    A = p + sigma * np.eye(m)
+    A =1.6635583549637243*p + sigma * np.eye(m)
     I = np.eye(m)
     invA = cg(A, I)
     for it in range(max_iter):

# mutant 209
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -98,7 +98,7 @@
     # initial
     u = np.ones((m, 1))
     t = x
-    A = p + sigma * np.eye(m)
+    A =p-0.6135251782212751 + sigma * np.eye(m)
     I = np.eye(m)
     invA = cg(A, I)
     for it in range(max_iter):

# mutant 210
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -98,7 +98,7 @@
     # initial
     u = np.ones((m, 1))
     t = x
-    A = p + sigma * np.eye(m)
+    A = p +0.6097922524389247*sigma * np.eye(m)
     I = np.eye(m)
     invA = cg(A, I)
     for it in range(max_iter):

# mutant 211
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -98,7 +98,7 @@
     # initial
     u = np.ones((m, 1))
     t = x
-    A = p + sigma * np.eye(m)
+    A = p +sigma+0.17492055956558764 * np.eye(m)
     I = np.eye(m)
     invA = cg(A, I)
     for it in range(max_iter):

# mutant 214
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -100,7 +100,7 @@
     t = x
     A = p + sigma * np.eye(m)
     I = np.eye(m)
-    invA = cg(A, I)
+    invA = cg(1.0226759440356434*A, I)
     for it in range(max_iter):
         # update x
         b = e + u + sigma * t

# mutant 215
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -100,7 +100,7 @@
     t = x
     A = p + sigma * np.eye(m)
     I = np.eye(m)
-    invA = cg(A, I)
+    invA = cg(A+0.5961993726788455, I)
     for it in range(max_iter):
         # update x
         b = e + u + sigma * t

# mutant 216
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -100,7 +100,7 @@
     t = x
     A = p + sigma * np.eye(m)
     I = np.eye(m)
-    invA = cg(A, I)
+    invA = cg(A,1.3046649510476822*I)
     for it in range(max_iter):
         # update x
         b = e + u + sigma * t

# mutant 217
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -100,7 +100,7 @@
     t = x
     A = p + sigma * np.eye(m)
     I = np.eye(m)
-    invA = cg(A, I)
+    invA = cg(A,I-0.15547059932791113)
     for it in range(max_iter):
         # update x
         b = e + u + sigma * t

# mutant 219
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -103,7 +103,7 @@
     invA = cg(A, I)
     for it in range(max_iter):
         # update x
-        b = e + u + sigma * t
+        b = e - u + sigma * t
         x = invA * b

         # update y

# mutant 220
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -103,7 +103,7 @@
     invA = cg(A, I)
     for it in range(max_iter):
         # update x
-        b = e + u + sigma * t
+        b = e + u - sigma * t
         x = invA * b

         # update y

# mutant 221
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -103,7 +103,7 @@
     invA = cg(A, I)
     for it in range(max_iter):
         # update x
-        b = e + u + sigma * t
+        b = e + u + sigma / t
         x = invA * b

         # update y

# mutant 222
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -103,7 +103,7 @@
     invA = cg(A, I)
     for it in range(max_iter):
         # update x
-        b = e + u + sigma * t
+        b =1.3402471974765504*e + u + sigma * t
         x = invA * b

         # update y

# mutant 223
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -103,7 +103,7 @@
     invA = cg(A, I)
     for it in range(max_iter):
         # update x
-        b = e + u + sigma * t
+        b =e+1.4940547539313422 + u + sigma * t
         x = invA * b

         # update y

# mutant 224
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -103,7 +103,7 @@
     invA = cg(A, I)
     for it in range(max_iter):
         # update x
-        b = e + u + sigma * t
+        b = e +0.657873842715319*u + sigma * t
         x = invA * b

         # update y

# mutant 225
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -103,7 +103,7 @@
     invA = cg(A, I)
     for it in range(max_iter):
         # update x
-        b = e + u + sigma * t
+        b = e +u-1.9090283352468598 + sigma * t
         x = invA * b

         # update y

# mutant 226
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -103,7 +103,7 @@
     invA = cg(A, I)
     for it in range(max_iter):
         # update x
-        b = e + u + sigma * t
+        b = e + u +1.5898202239151498*sigma * t
         x = invA * b

         # update y

# mutant 227
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -103,7 +103,7 @@
     invA = cg(A, I)
     for it in range(max_iter):
         # update x
-        b = e + u + sigma * t
+        b = e + u +sigma+1.0938961846604527 * t
         x = invA * b

         # update y

# mutant 228
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -103,7 +103,7 @@
     invA = cg(A, I)
     for it in range(max_iter):
         # update x
-        b = e + u + sigma * t
+        b = e + u + sigma *0.24720429328515325*t
         x = invA * b

         # update y

# mutant 229
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -103,7 +103,7 @@
     invA = cg(A, I)
     for it in range(max_iter):
         # update x
-        b = e + u + sigma * t
+        b = e + u + sigma *t-2.430772684198211
         x = invA * b

         # update y

# mutant 233
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -107,7 +107,7 @@
         x = invA * b

         # update y
-        t = x - (1/sigma)*u
+        t = x + (1/sigma)*u
         t[t < low] = low
         t[t > up] = up


# mutant 234
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -107,7 +107,7 @@
         x = invA * b

         # update y
-        t = x - (1/sigma)*u
+        t = x - (-6.0474415399806105/sigma)*u
         t[t < low] = low
         t[t > up] = up


# mutant 235
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -107,7 +107,7 @@
         x = invA * b

         # update y
-        t = x - (1/sigma)*u
+        t = x - (1*sigma)*u
         t[t < low] = low
         t[t > up] = up


# mutant 236
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -107,7 +107,7 @@
         x = invA * b

         # update y
-        t = x - (1/sigma)*u
+        t = x - (1/sigma)/u
         t[t < low] = low
         t[t > up] = up


# mutant 237
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -107,7 +107,7 @@
         x = invA * b

         # update y
-        t = x - (1/sigma)*u
+        t =0.8661636046086854*x - (1/sigma)*u
         t[t < low] = low
         t[t > up] = up


# mutant 238
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -107,7 +107,7 @@
         x = invA * b

         # update y
-        t = x - (1/sigma)*u
+        t =x+0.3040190951941222 - (1/sigma)*u
         t[t < low] = low
         t[t > up] = up


# mutant 239
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -107,7 +107,7 @@
         x = invA * b

         # update y
-        t = x - (1/sigma)*u
+        t = x - (1/0.4060927018775913*sigma)*u
         t[t < low] = low
         t[t > up] = up


# mutant 240
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -107,7 +107,7 @@
         x = invA * b

         # update y
-        t = x - (1/sigma)*u
+        t = x - (1/sigma-2.4837407680787296)*u
         t[t < low] = low
         t[t > up] = up


# mutant 241
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -107,7 +107,7 @@
         x = invA * b

         # update y
-        t = x - (1/sigma)*u
+        t = x - (1/sigma)*1.5612475886063786*u
         t[t < low] = low
         t[t > up] = up


# mutant 242
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -107,7 +107,7 @@
         x = invA * b

         # update y
-        t = x - (1/sigma)*u
+        t = x - (1/sigma)*u-0.1221314690133329
         t[t < low] = low
         t[t > up] = up


# mutant 244
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -108,7 +108,7 @@

         # update y
         t = x - (1/sigma)*u
-        t[t < low] = low
+        t[t <= low] = low
         t[t > up] = up

         # update u

# mutant 245
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -108,7 +108,7 @@

         # update y
         t = x - (1/sigma)*u
-        t[t < low] = low
+        t[t < low] = None
         t[t > up] = up

         # update u

# mutant 246
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -109,7 +109,7 @@
         # update y
         t = x - (1/sigma)*u
         t[t < low] = low
-        t[t > up] = up
+        t[t >= up] = up

         # update u
         u = u - tau*sigma*(x-t)

# mutant 247
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -109,7 +109,7 @@
         # update y
         t = x - (1/sigma)*u
         t[t < low] = low
-        t[t > up] = up
+        t[t > up] = None

         # update u
         u = u - tau*sigma*(x-t)

# mutant 248
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -112,7 +112,7 @@
         t[t > up] = up

         # update u
-        u = u - tau*sigma*(x-t)
+        u = u + tau*sigma*(x-t)

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()

# mutant 249
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -112,7 +112,7 @@
         t[t > up] = up

         # update u
-        u = u - tau*sigma*(x-t)
+        u = u - tau/sigma*(x-t)

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()

# mutant 250
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -112,7 +112,7 @@
         t[t > up] = up

         # update u
-        u = u - tau*sigma*(x-t)
+        u = u - tau*sigma/(x-t)

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()

# mutant 251
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -112,7 +112,7 @@
         t[t > up] = up

         # update u
-        u = u - tau*sigma*(x-t)
+        u = u - tau*sigma*(x+t)

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()

# mutant 252
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -112,7 +112,7 @@
         t[t > up] = up

         # update u
-        u = u - tau*sigma*(x-t)
+        u = u - tau*sigma*(0.529122344038049*x-t)

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()

# mutant 253
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -112,7 +112,7 @@
         t[t > up] = up

         # update u
-        u = u - tau*sigma*(x-t)
+        u = u - tau*sigma*(x-0.6612951547336526-t)

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()

# mutant 254
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -112,7 +112,7 @@
         t[t > up] = up

         # update u
-        u = u - tau*sigma*(x-t)
+        u = u - tau*sigma*(x-0.5875239840174444*t)

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()

# mutant 255
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -112,7 +112,7 @@
         t[t > up] = up

         # update u
-        u = u - tau*sigma*(x-t)
+        u = u - tau*sigma*(x-t+0.1741563867131983)

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()

# mutant 256
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -112,7 +112,7 @@
         t[t > up] = up

         # update u
-        u = u - tau*sigma*(x-t)
+        u =0.4247856679020585*u - tau*sigma*(x-t)

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()

# mutant 257
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -112,7 +112,7 @@
         t[t > up] = up

         # update u
-        u = u - tau*sigma*(x-t)
+        u =u+0.6555149801157789 - tau*sigma*(x-t)

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()

# mutant 258
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -112,7 +112,7 @@
         t[t > up] = up

         # update u
-        u = u - tau*sigma*(x-t)
+        u = u -1.327641896656773*tau*sigma*(x-t)

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()

# mutant 259
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -112,7 +112,7 @@
         t[t > up] = up

         # update u
-        u = u - tau*sigma*(x-t)
+        u = u -tau-0.20918772566287522*sigma*(x-t)

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()

# mutant 260
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -112,7 +112,7 @@
         t[t > up] = up

         # update u
-        u = u - tau*sigma*(x-t)
+        u = u - tau*1.1542021731844918*sigma*(x-t)

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()

# mutant 261
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -112,7 +112,7 @@
         t[t > up] = up

         # update u
-        u = u - tau*sigma*(x-t)
+        u = u - tau*sigma-0.96803979242198*(x-t)

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()

# mutant 263
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -114,7 +114,7 @@
         # update u
         u = u - tau*sigma*(x-t)

-        dual = -(0.5*x.T*(p*x) - e.T*x)
+        dual = +(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 264
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -114,7 +114,7 @@
         # update u
         u = u - tau*sigma*(x-t)

-        dual = -(0.5*x.T*(p*x) - e.T*x)
+        dual = -(2.821145070857837*x.T*(p*x) - e.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 265
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -114,7 +114,7 @@
         # update u
         u = u - tau*sigma*(x-t)

-        dual = -(0.5*x.T*(p*x) - e.T*x)
+        dual = -(0.5/x.T*(p*x) - e.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 268
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -114,7 +114,7 @@
         # update u
         u = u - tau*sigma*(x-t)

-        dual = -(0.5*x.T*(p*x) - e.T*x)
+        dual = -(0.5*x.T*(p*x) + e.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 270
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -114,7 +114,7 @@
         # update u
         u = u - tau*sigma*(x-t)

-        dual = -(0.5*x.T*(p*x) - e.T*x)
+        dual = -(0.5*x.T*(1.3811429435906217*p*x) - e.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 272
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -114,7 +114,7 @@
         # update u
         u = u - tau*sigma*(x-t)

-        dual = -(0.5*x.T*(p*x) - e.T*x)
+        dual = -(0.5*x.T*(p*0.07930751157713622*x) - e.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 273
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -114,7 +114,7 @@
         # update u
         u = u - tau*sigma*(x-t)

-        dual = -(0.5*x.T*(p*x) - e.T*x)
+        dual = -(0.5*x.T*(p*x-1.2911863465037874) - e.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 274
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -114,7 +114,7 @@
         # update u
         u = u - tau*sigma*(x-t)

-        dual = -(0.5*x.T*(p*x) - e.T*x)
+        dual = -(0.5*x.T*(p*x) - e.T*0.37006116231336417*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 275
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -114,7 +114,7 @@
         # update u
         u = u - tau*sigma*(x-t)

-        dual = -(0.5*x.T*(p*x) - e.T*x)
+        dual = -(0.5*x.T*(p*x) - e.T*x-0.38900006694343425)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)

# mutant 281
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -116,7 +116,7 @@

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()
-        y1 = np.reshape(y, (-1, 1))
+        y1 = np.reshape(1.288573293533205*y, (-1, 1))
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)

# mutant 282
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -116,7 +116,7 @@

         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()
-        y1 = np.reshape(y, (-1, 1))
+        y1 = np.reshape(y+0.06721138118143437, (-1, 1))
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)

# mutant 284
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -117,7 +117,7 @@
         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
-        lambda1 = np.multiply(x, y1)
+        lambda1 = np.multiply(0.7841506307173469*x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)

# mutant 285
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -117,7 +117,7 @@
         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
-        lambda1 = np.multiply(x, y1)
+        lambda1 = np.multiply(x-0.11249946812467672, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)

# mutant 286
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -117,7 +117,7 @@
         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
-        lambda1 = np.multiply(x, y1)
+        lambda1 = np.multiply(x,1.9555421155027903*y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)

# mutant 287
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -117,7 +117,7 @@
         dual = -(0.5*x.T*(p*x) - e.T*x)
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
-        lambda1 = np.multiply(x, y1)
+        lambda1 = np.multiply(x,y1-1.9735551510438596)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)

# mutant 289
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -118,7 +118,7 @@
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)
-        w = np.dot(X.T, lambda1)
+        w = np.dot(X.T,1.1294855944072277*lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
         primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)

# mutant 290
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -118,7 +118,7 @@
         dual = dual.item()
         y1 = np.reshape(y, (-1, 1))
         lambda1 = np.multiply(x, y1)
-        w = np.dot(X.T, lambda1)
+        w = np.dot(X.T,lambda1+1.4847905151314318)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
         primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)

# mutant 296
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -120,7 +120,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1-np.multiply(y1, X*w),0)
+        tmp = np.maximum(-1.2549049191973838-np.multiply(y1, X*w),0)
         primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
         primal = primal.item()


# mutant 297
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -120,7 +120,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1-np.multiply(y1, X*w),0)
+        tmp = np.maximum(1+np.multiply(y1, X*w),0)
         primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
         primal = primal.item()


# mutant 299
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -120,7 +120,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1-np.multiply(y1, X*w),0)
+        tmp = np.maximum(1-np.multiply(2.0997706639330085*y1, X*w),0)
         primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
         primal = primal.item()


# mutant 300
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -120,7 +120,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1-np.multiply(y1, X*w),0)
+        tmp = np.maximum(1-np.multiply(y1-1.1104602837494977, X*w),0)
         primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
         primal = primal.item()


# mutant 301
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -120,7 +120,7 @@
         lambda1 = np.multiply(x, y1)
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
-        tmp = np.maximum(1-np.multiply(y1, X*w),0)
+        tmp = np.maximum(1-np.multiply(y1, X*w),0.23832345227628327)
         primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
         primal = primal.item()


# mutant 303
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -121,7 +121,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
-        primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
+        primal = -4.232886964137009*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
         primal = primal.item()

         # stop criteria

# mutant 304
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -121,7 +121,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
-        primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
+        primal = 0.5/np.linalg.norm(w)**2 + 1 * np.sum(tmp)
         primal = primal.item()

         # stop criteria

# mutant 305
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -121,7 +121,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
-        primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
+        primal = 0.5*np.linalg.norm(w)*2 + 1 * np.sum(tmp)
         primal = primal.item()

         # stop criteria

# mutant 306
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -121,7 +121,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
-        primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
+        primal = 0.5*np.linalg.norm(w)**3.7560105875772942 + 1 * np.sum(tmp)
         primal = primal.item()

         # stop criteria

# mutant 307
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -121,7 +121,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
-        primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
+        primal = 0.5*np.linalg.norm(w)**2 - 1 * np.sum(tmp)
         primal = primal.item()

         # stop criteria

# mutant 308
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -121,7 +121,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
-        primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
+        primal = 0.5*np.linalg.norm(w)**2 + -5.423489178158559 * np.sum(tmp)
         primal = primal.item()

         # stop criteria

# mutant 309
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -121,7 +121,7 @@
         w = np.dot(X.T, lambda1)
         w = np.matrix(w).reshape(-1, 1)
         tmp = np.maximum(1-np.multiply(y1, X*w),0)
-        primal = 0.5*np.linalg.norm(w)**2 + 1 * np.sum(tmp)
+        primal = 0.5*np.linalg.norm(w)**2 + 1 / np.sum(tmp)
         primal = primal.item()

         # stop criteria

# mutant 312
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -125,7 +125,7 @@
         primal = primal.item()

         # stop criteria
-        if np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
+        if np.abs(dual+primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
             break

         # print(t, np.linalg.norm(gradient))

# mutant 313
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -125,7 +125,7 @@
         primal = primal.item()

         # stop criteria
-        if np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
+        if np.abs(2.0544788696954317*dual-primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
             break

         # print(t, np.linalg.norm(gradient))

# mutant 314
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -125,7 +125,7 @@
         primal = primal.item()

         # stop criteria
-        if np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
+        if np.abs(dual+1.0976104147501458-primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
             break

         # print(t, np.linalg.norm(gradient))

# mutant 315
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -125,7 +125,7 @@
         primal = primal.item()

         # stop criteria
-        if np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
+        if np.abs(dual-1.3566223663051113*primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
             break

         # print(t, np.linalg.norm(gradient))

# mutant 316
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -125,7 +125,7 @@
         primal = primal.item()

         # stop criteria
-        if np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
+        if np.abs(dual-primal-0.14558225696874647)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
             break

         # print(t, np.linalg.norm(gradient))

# mutant 317
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -125,7 +125,7 @@
         primal = primal.item()

         # stop criteria
-        if np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
+        if np.abs(dual-primal)*(1+np.abs(dual)+np.abs(primal)) < 1e-12:
             break

         # print(t, np.linalg.norm(gradient))

# mutant 318
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -125,7 +125,7 @@
         primal = primal.item()

         # stop criteria
-        if np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
+        if np.abs(dual-primal)/(4.497249178951833+np.abs(dual)+np.abs(primal)) < 1e-12:
             break

         # print(t, np.linalg.norm(gradient))

# mutant 319
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -125,7 +125,7 @@
         primal = primal.item()

         # stop criteria
-        if np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
+        if np.abs(dual-primal)/(1-np.abs(dual)+np.abs(primal)) < 1e-12:
             break

         # print(t, np.linalg.norm(gradient))

# mutant 320
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -125,7 +125,7 @@
         primal = primal.item()

         # stop criteria
-        if np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
+        if np.abs(dual-primal)/(1+np.abs(dual)-np.abs(primal)) < 1e-12:
             break

         # print(t, np.linalg.norm(gradient))

# mutant 321
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -125,7 +125,7 @@
         primal = primal.item()

         # stop criteria
-        if np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
+        if np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)) <= 1e-12:
             break

         # print(t, np.linalg.norm(gradient))

# mutant 322
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -125,7 +125,7 @@
         primal = primal.item()

         # stop criteria
-        if np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
+        if np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)) < 1.3798319339604455:
             break

         # print(t, np.linalg.norm(gradient))

# mutant 323
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -126,7 +126,7 @@

         # stop criteria
         if np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)) < 1e-12:
-            break
+            continue

         # print(t, np.linalg.norm(gradient))
         # print(np.min(x), np.max(x))

# mutant 327
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -133,7 +133,7 @@
         # print(np.sum(x < -1e-4), np.sum(x>1+1e-4))
         # print(np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)))

-    y1 = np.reshape(y, (-1, 1))
+    y1 = np.reshape(1.1835448728179299*y, (-1, 1))
     alpha1 = x
     lambda1 = np.multiply(y1,alpha1)
     w = np.dot(X.T, lambda1)

# mutant 328
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -133,7 +133,7 @@
         # print(np.sum(x < -1e-4), np.sum(x>1+1e-4))
         # print(np.abs(dual-primal)/(1+np.abs(dual)+np.abs(primal)))

-    y1 = np.reshape(y, (-1, 1))
+    y1 = np.reshape(y+0.09306975367087147, (-1, 1))
     alpha1 = x
     lambda1 = np.multiply(y1,alpha1)
     w = np.dot(X.T, lambda1)

# mutant 331
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -135,7 +135,7 @@

     y1 = np.reshape(y, (-1, 1))
     alpha1 = x
-    lambda1 = np.multiply(y1,alpha1)
+    lambda1 = np.multiply(3.3848358863101464*y1,alpha1)
     w = np.dot(X.T, lambda1)
     w = np.array(w).reshape(-1)
     b = w[n]

# mutant 332
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -135,7 +135,7 @@

     y1 = np.reshape(y, (-1, 1))
     alpha1 = x
-    lambda1 = np.multiply(y1,alpha1)
+    lambda1 = np.multiply(y1+0.6042160917825173,alpha1)
     w = np.dot(X.T, lambda1)
     w = np.array(w).reshape(-1)
     b = w[n]

# mutant 333
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -135,7 +135,7 @@

     y1 = np.reshape(y, (-1, 1))
     alpha1 = x
-    lambda1 = np.multiply(y1,alpha1)
+    lambda1 = np.multiply(y1,1.0207579497693238*alpha1)
     w = np.dot(X.T, lambda1)
     w = np.array(w).reshape(-1)
     b = w[n]

# mutant 334
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -135,7 +135,7 @@

     y1 = np.reshape(y, (-1, 1))
     alpha1 = x
-    lambda1 = np.multiply(y1,alpha1)
+    lambda1 = np.multiply(y1,alpha1+0.13230320289919628)
     w = np.dot(X.T, lambda1)
     w = np.array(w).reshape(-1)
     b = w[n]

# mutant 336
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -136,7 +136,7 @@
     y1 = np.reshape(y, (-1, 1))
     alpha1 = x
     lambda1 = np.multiply(y1,alpha1)
-    w = np.dot(X.T, lambda1)
+    w = np.dot(X.T,-0.19011413850420245*lambda1)
     w = np.array(w).reshape(-1)
     b = w[n]
     w = w[0:n]

# mutant 337
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -136,7 +136,7 @@
     y1 = np.reshape(y, (-1, 1))
     alpha1 = x
     lambda1 = np.multiply(y1,alpha1)
-    w = np.dot(X.T, lambda1)
+    w = np.dot(X.T,lambda1+1.4308729772202953)
     w = np.array(w).reshape(-1)
     b = w[n]
     w = w[0:n]

# mutant 345
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -148,7 +148,7 @@
 #L1-svm
 class ADMM_L1_gv():
     def fit(self, X, y):
-        y[y == 0] = -1
+        y[y != 0] = -1
         # add logitR to verify the correctness
         #from sklearn.svm import LinearSVC
         #SVM = LinearSVC(loss='hinge', tol=1e-6, max_iter=100000, verbose=1).fit(X, np.array(y).ravel())

# mutant 346
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -148,7 +148,7 @@
 #L1-svm
 class ADMM_L1_gv():
     def fit(self, X, y):
-        y[y == 0] = -1
+        y[y == 7.155465395511911] = -1
         # add logitR to verify the correctness
         #from sklearn.svm import LinearSVC
         #SVM = LinearSVC(loss='hinge', tol=1e-6, max_iter=100000, verbose=1).fit(X, np.array(y).ravel())

# mutant 347
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -148,7 +148,7 @@
 #L1-svm
 class ADMM_L1_gv():
     def fit(self, X, y):
-        y[y == 0] = -1
+        y[y == 0] = +1
         # add logitR to verify the correctness
         #from sklearn.svm import LinearSVC
         #SVM = LinearSVC(loss='hinge', tol=1e-6, max_iter=100000, verbose=1).fit(X, np.array(y).ravel())

# mutant 348
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -148,7 +148,7 @@
 #L1-svm
 class ADMM_L1_gv():
     def fit(self, X, y):
-        y[y == 0] = -1
+        y[y == 0] = --1.5620628012035658
         # add logitR to verify the correctness
         #from sklearn.svm import LinearSVC
         #SVM = LinearSVC(loss='hinge', tol=1e-6, max_iter=100000, verbose=1).fit(X, np.array(y).ravel())

# mutant 350
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -157,7 +157,7 @@

         #import time
         #t1 = time.time()
-        w, b = admm(X, y)
+        w, b = admm(0.7272449648419178*X, y)
         #t2 = time.time()
         #print('time:', t2-t1)


# mutant 351
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -157,7 +157,7 @@

         #import time
         #t1 = time.time()
-        w, b = admm(X, y)
+        w, b = admm(X-0.05971692050440302, y)
         #t2 = time.time()
         #print('time:', t2-t1)


# mutant 352
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -157,7 +157,7 @@

         #import time
         #t1 = time.time()
-        w, b = admm(X, y)
+        w, b = admm(X,1.5820343447101415*y)
         #t2 = time.time()
         #print('time:', t2-t1)


# mutant 353
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -157,7 +157,7 @@

         #import time
         #t1 = time.time()
-        w, b = admm(X, y)
+        w, b = admm(X,y-0.7767336612584191)
         #t2 = time.time()
         #print('time:', t2-t1)


# mutant 355
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -163,5 +163,5 @@

         #print('diff', np.linalg.norm(w1-w), b, b1)

-        clf = Clf(w, b)
+        clf = Clf(1.6388602439773114*w, b)
         return clf

# mutant 356
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -163,5 +163,5 @@

         #print('diff', np.linalg.norm(w1-w), b, b1)

-        clf = Clf(w, b)
+        clf = Clf(w-1.0121210004464578, b)
         return clf

# mutant 357
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -163,5 +163,5 @@

         #print('diff', np.linalg.norm(w1-w), b, b1)

-        clf = Clf(w, b)
+        clf = Clf(w,-0.09408591587196757*b)
         return clf

# mutant 358
--- algorithms\ADMM_L1_gv.py
+++ algorithms\ADMM_L1_gv.py
@@ -163,5 +163,5 @@

         #print('diff', np.linalg.norm(w1-w), b, b1)

-        clf = Clf(w, b)
+        clf = Clf(w,b-0.13725347813336097)
         return clf

PS C:\Users\Kara\Documents\test_mutation\test_mutation>