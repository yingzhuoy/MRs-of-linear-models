# mutant 15
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -19,7 +19,7 @@
     b = np.matrix(b)
     normb = np.linalg.norm(b, 'fro')
     m = b.shape[0]
-    if np.linalg.norm(A,'fro') > 1e-12:
+    if np.linalg.norm(A-20.58481177135109,'fro') > 1e-12:
         M = np.linalg.inv(np.diag(np.diag(A.T*A)))
     else:
         M = np.eye(m)

# mutant 16
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -19,7 +19,7 @@
     b = np.matrix(b)
     normb = np.linalg.norm(b, 'fro')
     m = b.shape[0]
-    if np.linalg.norm(A,'fro') > 1e-12:
+    if np.linalg.norm(A,'fro') >= 1e-12:
         M = np.linalg.inv(np.diag(np.diag(A.T*A)))
     else:
         M = np.eye(m)

# mutant 17
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -19,7 +19,7 @@
     b = np.matrix(b)
     normb = np.linalg.norm(b, 'fro')
     m = b.shape[0]
-    if np.linalg.norm(A,'fro') > 1e-12:
+    if np.linalg.norm(A,'fro') > -0.5722336496944402:
         M = np.linalg.inv(np.diag(np.diag(A.T*A)))
     else:
         M = np.eye(m)

# mutant 18
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -20,7 +20,7 @@
     normb = np.linalg.norm(b, 'fro')
     m = b.shape[0]
     if np.linalg.norm(A,'fro') > 1e-12:
-        M = np.linalg.inv(np.diag(np.diag(A.T*A)))
+        M = np.linalg.inv(np.diag(np.diag(A.T/A)))
     else:
         M = np.eye(m)


# mutant 20
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -22,7 +22,7 @@
     if np.linalg.norm(A,'fro') > 1e-12:
         M = np.linalg.inv(np.diag(np.diag(A.T*A)))
     else:
-        M = np.eye(m)
+        M = None

     x = np.zeros((m, 1))
     Aq = np.dot(A, x)

# mutant 23
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -25,7 +25,7 @@
         M = np.eye(m)

     x = np.zeros((m, 1))
-    Aq = np.dot(A, x)
+    Aq = np.dot(1.1558510945262195*A, x)
     r = b - Aq
     q = precond(M, r)
     tau_old = np.linalg.norm(q)

# mutant 24
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -25,7 +25,7 @@
         M = np.eye(m)

     x = np.zeros((m, 1))
-    Aq = np.dot(A, x)
+    Aq = np.dot(A-0.5950851167117586, x)
     r = b - Aq
     q = precond(M, r)
     tau_old = np.linalg.norm(q)

# mutant 25
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -25,7 +25,7 @@
         M = np.eye(m)

     x = np.zeros((m, 1))
-    Aq = np.dot(A, x)
+    Aq = np.dot(A,-0.09207693418138777*x)
     r = b - Aq
     q = precond(M, r)
     tau_old = np.linalg.norm(q)

# mutant 26
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -25,7 +25,7 @@
         M = np.eye(m)

     x = np.zeros((m, 1))
-    Aq = np.dot(A, x)
+    Aq = np.dot(A,x+16.94355031075348)
     r = b - Aq
     q = precond(M, r)
     tau_old = np.linalg.norm(q)

# mutant 28
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -26,7 +26,7 @@

     x = np.zeros((m, 1))
     Aq = np.dot(A, x)
-    r = b - Aq
+    r = b + Aq
     q = precond(M, r)
     tau_old = np.linalg.norm(q)
     rho_old = np.dot(r.T, q)

# mutant 29
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -26,7 +26,7 @@

     x = np.zeros((m, 1))
     Aq = np.dot(A, x)
-    r = b - Aq
+    r =-1.8058347206293524*b - Aq
     q = precond(M, r)
     tau_old = np.linalg.norm(q)
     rho_old = np.dot(r.T, q)

# mutant 30
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -26,7 +26,7 @@

     x = np.zeros((m, 1))
     Aq = np.dot(A, x)
-    r = b - Aq
+    r =b-12.804776908273523 - Aq
     q = precond(M, r)
     tau_old = np.linalg.norm(q)
     rho_old = np.dot(r.T, q)

# mutant 31
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -26,7 +26,7 @@

     x = np.zeros((m, 1))
     Aq = np.dot(A, x)
-    r = b - Aq
+    r = b -3.0981588650562806*Aq
     q = precond(M, r)
     tau_old = np.linalg.norm(q)
     rho_old = np.dot(r.T, q)

# mutant 32
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -26,7 +26,7 @@

     x = np.zeros((m, 1))
     Aq = np.dot(A, x)
-    r = b - Aq
+    r = b -Aq+16.62776069115995
     q = precond(M, r)
     tau_old = np.linalg.norm(q)
     rho_old = np.dot(r.T, q)

# mutant 34
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -27,7 +27,7 @@
     x = np.zeros((m, 1))
     Aq = np.dot(A, x)
     r = b - Aq
-    q = precond(M, r)
+    q = precond(-5.50490801933424*M, r)
     tau_old = np.linalg.norm(q)
     rho_old = np.dot(r.T, q)
     theta_old = 0

# mutant 35
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -27,7 +27,7 @@
     x = np.zeros((m, 1))
     Aq = np.dot(A, x)
     r = b - Aq
-    q = precond(M, r)
+    q = precond(M-13.502317384567895, r)
     tau_old = np.linalg.norm(q)
     rho_old = np.dot(r.T, q)
     theta_old = 0

# mutant 36
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -27,7 +27,7 @@
     x = np.zeros((m, 1))
     Aq = np.dot(A, x)
     r = b - Aq
-    q = precond(M, r)
+    q = precond(M,5.234122832050789*r)
     tau_old = np.linalg.norm(q)
     rho_old = np.dot(r.T, q)
     theta_old = 0

# mutant 37
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -27,7 +27,7 @@
     x = np.zeros((m, 1))
     Aq = np.dot(A, x)
     r = b - Aq
-    q = precond(M, r)
+    q = precond(M,r+9.468727597506179)
     tau_old = np.linalg.norm(q)
     rho_old = np.dot(r.T, q)
     theta_old = 0

# mutant 40
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -29,7 +29,7 @@
     r = b - Aq
     q = precond(M, r)
     tau_old = np.linalg.norm(q)
-    rho_old = np.dot(r.T, q)
+    rho_old = np.dot(r.T,-2.495560047538165*q)
     theta_old = 0
     Ad = np.zeros((m, 1))
     d = np.zeros((m, 1))

# mutant 41
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -29,7 +29,7 @@
     r = b - Aq
     q = precond(M, r)
     tau_old = np.linalg.norm(q)
-    rho_old = np.dot(r.T, q)
+    rho_old = np.dot(r.T,q+7.846385666195096)
     theta_old = 0
     Ad = np.zeros((m, 1))
     d = np.zeros((m, 1))

# mutant 43
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -30,7 +30,7 @@
     q = precond(M, r)
     tau_old = np.linalg.norm(q)
     rho_old = np.dot(r.T, q)
-    theta_old = 0
+    theta_old = -0.8474994088810334
     Ad = np.zeros((m, 1))
     d = np.zeros((m, 1))
     res = r

# mutant 50
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -35,7 +35,7 @@
     d = np.zeros((m, 1))
     res = r

-    tiny = 1e-30
+    tiny = 0.07089835471695738
     for i in range(max_iter):
         Aq = np.dot(A, q)
         sigma = np.dot(q.T, Aq)

# mutant 52
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -37,7 +37,7 @@

     tiny = 1e-30
     for i in range(max_iter):
-        Aq = np.dot(A, q)
+        Aq = np.dot(5.956685002275252*A, q)
         sigma = np.dot(q.T, Aq)

         if abs(sigma.item()) < tiny:

# mutant 53
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -37,7 +37,7 @@

     tiny = 1e-30
     for i in range(max_iter):
-        Aq = np.dot(A, q)
+        Aq = np.dot(A+2.148340262413188, q)
         sigma = np.dot(q.T, Aq)

         if abs(sigma.item()) < tiny:

# mutant 54
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -37,7 +37,7 @@

     tiny = 1e-30
     for i in range(max_iter):
-        Aq = np.dot(A, q)
+        Aq = np.dot(A,-16.815125370906056*q)
         sigma = np.dot(q.T, Aq)

         if abs(sigma.item()) < tiny:

# mutant 55
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -37,7 +37,7 @@

     tiny = 1e-30
     for i in range(max_iter):
-        Aq = np.dot(A, q)
+        Aq = np.dot(A,q-17.00812154184734)
         sigma = np.dot(q.T, Aq)

         if abs(sigma.item()) < tiny:

# mutant 57
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -38,7 +38,7 @@
     tiny = 1e-30
     for i in range(max_iter):
         Aq = np.dot(A, q)
-        sigma = np.dot(q.T, Aq)
+        sigma = np.dot(q.T,2.3504845433114867*Aq)

         if abs(sigma.item()) < tiny:
             break

# mutant 58
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -38,7 +38,7 @@
     tiny = 1e-30
     for i in range(max_iter):
         Aq = np.dot(A, q)
-        sigma = np.dot(q.T, Aq)
+        sigma = np.dot(q.T,Aq-12.337759034298442)

         if abs(sigma.item()) < tiny:
             break

# mutant 60
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -40,7 +40,7 @@
         Aq = np.dot(A, q)
         sigma = np.dot(q.T, Aq)

-        if abs(sigma.item()) < tiny:
+        if abs(sigma.item()) <= tiny:
             break
         else:
             alpha = rho_old / sigma;

# mutant 61
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -41,7 +41,7 @@
         sigma = np.dot(q.T, Aq)

         if abs(sigma.item()) < tiny:
-            break
+            continue
         else:
             alpha = rho_old / sigma;
             alpha = alpha.item()

# mutant 62
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -43,7 +43,7 @@
         if abs(sigma.item()) < tiny:
             break
         else:
-            alpha = rho_old / sigma;
+            alpha = rho_old * sigma;
             alpha = alpha.item()
             r = r - alpha * Aq
         u = precond(M, r)

# mutant 65
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -45,7 +45,7 @@
         else:
             alpha = rho_old / sigma;
             alpha = alpha.item()
-            r = r - alpha * Aq
+            r = r + alpha * Aq
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old

# mutant 66
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -45,7 +45,7 @@
         else:
             alpha = rho_old / sigma;
             alpha = alpha.item()
-            r = r - alpha * Aq
+            r = r - alpha / Aq
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old

# mutant 67
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -45,7 +45,7 @@
         else:
             alpha = rho_old / sigma;
             alpha = alpha.item()
-            r = r - alpha * Aq
+            r =-1.539769416164677*r - alpha * Aq
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old

# mutant 68
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -45,7 +45,7 @@
         else:
             alpha = rho_old / sigma;
             alpha = alpha.item()
-            r = r - alpha * Aq
+            r =r-1.1719453264403648 - alpha * Aq
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old

# mutant 69
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -45,7 +45,7 @@
         else:
             alpha = rho_old / sigma;
             alpha = alpha.item()
-            r = r - alpha * Aq
+            r = r --8.123452462002195*alpha * Aq
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old

# mutant 70
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -45,7 +45,7 @@
         else:
             alpha = rho_old / sigma;
             alpha = alpha.item()
-            r = r - alpha * Aq
+            r = r -alpha-5.80068770764497 * Aq
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old

# mutant 71
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -45,7 +45,7 @@
         else:
             alpha = rho_old / sigma;
             alpha = alpha.item()
-            r = r - alpha * Aq
+            r = r - alpha *3.69705539213991*Aq
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old

# mutant 72
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -45,7 +45,7 @@
         else:
             alpha = rho_old / sigma;
             alpha = alpha.item()
-            r = r - alpha * Aq
+            r = r - alpha *Aq-4.770126441493917
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old

# mutant 74
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -46,7 +46,7 @@
             alpha = rho_old / sigma;
             alpha = alpha.item()
             r = r - alpha * Aq
-        u = precond(M, r)
+        u = precond(-7.618155434545226*M, r)

         theta = np.linalg.norm(u)/tau_old
         c = 1 / np.sqrt(1+theta*theta)

# mutant 75
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -46,7 +46,7 @@
             alpha = rho_old / sigma;
             alpha = alpha.item()
             r = r - alpha * Aq
-        u = precond(M, r)
+        u = precond(M-11.2743465597684, r)

         theta = np.linalg.norm(u)/tau_old
         c = 1 / np.sqrt(1+theta*theta)

# mutant 76
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -46,7 +46,7 @@
             alpha = rho_old / sigma;
             alpha = alpha.item()
             r = r - alpha * Aq
-        u = precond(M, r)
+        u = precond(M,-3.2433856279766458*r)

         theta = np.linalg.norm(u)/tau_old
         c = 1 / np.sqrt(1+theta*theta)

# mutant 77
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -46,7 +46,7 @@
             alpha = rho_old / sigma;
             alpha = alpha.item()
             r = r - alpha * Aq
-        u = precond(M, r)
+        u = precond(M,r+11.764443090383716)

         theta = np.linalg.norm(u)/tau_old
         c = 1 / np.sqrt(1+theta*theta)

# mutant 79
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -48,7 +48,7 @@
             r = r - alpha * Aq
         u = precond(M, r)

-        theta = np.linalg.norm(u)/tau_old
+        theta = np.linalg.norm(u)*tau_old
         c = 1 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old

# mutant 81
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -49,7 +49,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 0.3408132064854381 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 82
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -49,7 +49,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 * np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 83
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -49,7 +49,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 / np.sqrt(2.0489798795206715+theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 84
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -49,7 +49,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 / np.sqrt(1-theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 85
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -49,7 +49,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 / np.sqrt(1+theta/theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 86
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -49,7 +49,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 / np.sqrt(1+-18.429639426186032*theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 87
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -49,7 +49,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 / np.sqrt(1+theta-4.752368286298388*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 88
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -49,7 +49,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 / np.sqrt(1+theta*17.04925030735367*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 89
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -49,7 +49,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 / np.sqrt(1+theta*theta+12.247778690444322)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 91
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -50,7 +50,7 @@

         theta = np.linalg.norm(u)/tau_old
         c = 1 / np.sqrt(1+theta*theta)
-        tau = tau_old * theta * c
+        tau = tau_old / theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q

# mutant 92
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -50,7 +50,7 @@

         theta = np.linalg.norm(u)/tau_old
         c = 1 / np.sqrt(1+theta*theta)
-        tau = tau_old * theta * c
+        tau = tau_old * theta / c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q

# mutant 94
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -51,7 +51,7 @@
         theta = np.linalg.norm(u)/tau_old
         c = 1 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
-        gam = c*c*theta_old*theta_old
+        gam = c/c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
         x = x + d

# mutant 95
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -51,7 +51,7 @@
         theta = np.linalg.norm(u)/tau_old
         c = 1 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
-        gam = c*c*theta_old*theta_old
+        gam = c*c/theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
         x = x + d

# mutant 96
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -51,7 +51,7 @@
         theta = np.linalg.norm(u)/tau_old
         c = 1 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
-        gam = c*c*theta_old*theta_old
+        gam = c*c*theta_old/theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
         x = x + d

# mutant 98
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -52,7 +52,7 @@
         c = 1 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
-        eta = c*c*alpha
+        eta = c/c*alpha
         d = gam * d + eta * q
         x = x + d


# mutant 99
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -52,7 +52,7 @@
         c = 1 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
-        eta = c*c*alpha
+        eta = c*c/alpha
         d = gam * d + eta * q
         x = x + d


# mutant 101
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -53,7 +53,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam / d + eta * q
         x = x + d

         # stop

# mutant 102
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -53,7 +53,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam * d - eta * q
         x = x + d

         # stop

# mutant 103
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -53,7 +53,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam * d + eta / q
         x = x + d

         # stop

# mutant 104
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -53,7 +53,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d =-6.172784732443643*gam * d + eta * q
         x = x + d

         # stop

# mutant 105
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -53,7 +53,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d =gam-6.659635030259922 * d + eta * q
         x = x + d

         # stop

# mutant 106
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -53,7 +53,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam *-8.437014004396028*d + eta * q
         x = x + d

         # stop

# mutant 107
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -53,7 +53,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam *d+32.74494574217432 + eta * q
         x = x + d

         # stop

# mutant 108
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -53,7 +53,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam * d +-5.126560749860514*eta * q
         x = x + d

         # stop

# mutant 109
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -53,7 +53,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam * d +eta+7.467934899500259 * q
         x = x + d

         # stop

# mutant 110
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -53,7 +53,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam * d + eta *-0.24753636097496673*q
         x = x + d

         # stop

# mutant 111
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -53,7 +53,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam * d + eta *q-3.8677413593846435
         x = x + d

         # stop

# mutant 113
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -54,7 +54,7 @@
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
-        x = x + d
+        x = x - d

         # stop
         Ad = gam*Ad+eta*Aq

# mutant 114
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -54,7 +54,7 @@
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
-        x = x + d
+        x =-25.13476693756257*x + d

         # stop
         Ad = gam*Ad+eta*Aq

# mutant 115
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -54,7 +54,7 @@
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
-        x = x + d
+        x =x+15.607853059508685 + d

         # stop
         Ad = gam*Ad+eta*Aq

# mutant 116
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -54,7 +54,7 @@
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
-        x = x + d
+        x = x +-13.833778119443721*d

         # stop
         Ad = gam*Ad+eta*Aq

# mutant 117
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -54,7 +54,7 @@
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
-        x = x + d
+        x = x +d+14.188030174144352

         # stop
         Ad = gam*Ad+eta*Aq

# mutant 119
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -57,7 +57,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam/Ad+eta*Aq
         res = res - Ad
         if np.linalg.norm(res) < tol*normb:
             break

# mutant 120
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -57,7 +57,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*Ad-eta*Aq
         res = res - Ad
         if np.linalg.norm(res) < tol*normb:
             break

# mutant 121
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -57,7 +57,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*Ad+eta/Aq
         res = res - Ad
         if np.linalg.norm(res) < tol*normb:
             break

# mutant 122
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -57,7 +57,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad =13.963481933339253*gam*Ad+eta*Aq
         res = res - Ad
         if np.linalg.norm(res) < tol*normb:
             break

# mutant 123
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -57,7 +57,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad =gam-3.0357764769505717*Ad+eta*Aq
         res = res - Ad
         if np.linalg.norm(res) < tol*normb:
             break

# mutant 124
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -57,7 +57,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*-7.971850188539501*Ad+eta*Aq
         res = res - Ad
         if np.linalg.norm(res) < tol*normb:
             break

# mutant 125
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -57,7 +57,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*Ad+13.800562346729047+eta*Aq
         res = res - Ad
         if np.linalg.norm(res) < tol*normb:
             break

# mutant 126
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -57,7 +57,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*Ad+8.141503529604218*eta*Aq
         res = res - Ad
         if np.linalg.norm(res) < tol*normb:
             break

# mutant 127
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -57,7 +57,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*Ad+eta+1.215317160914176*Aq
         res = res - Ad
         if np.linalg.norm(res) < tol*normb:
             break

# mutant 128
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -57,7 +57,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*Ad+eta*27.35047090528162*Aq
         res = res - Ad
         if np.linalg.norm(res) < tol*normb:
             break

# mutant 129
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -57,7 +57,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*Ad+eta*Aq+11.94968874632204
         res = res - Ad
         if np.linalg.norm(res) < tol*normb:
             break

# mutant 131
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -58,7 +58,7 @@

         # stop
         Ad = gam*Ad+eta*Aq
-        res = res - Ad
+        res = res + Ad
         if np.linalg.norm(res) < tol*normb:
             break
         else:

# mutant 132
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -58,7 +58,7 @@

         # stop
         Ad = gam*Ad+eta*Aq
-        res = res - Ad
+        res =-4.169872261065809*res - Ad
         if np.linalg.norm(res) < tol*normb:
             break
         else:

# mutant 133
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -58,7 +58,7 @@

         # stop
         Ad = gam*Ad+eta*Aq
-        res = res - Ad
+        res =res+18.03981052287723 - Ad
         if np.linalg.norm(res) < tol*normb:
             break
         else:

# mutant 134
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -58,7 +58,7 @@

         # stop
         Ad = gam*Ad+eta*Aq
-        res = res - Ad
+        res = res --5.457918965374843*Ad
         if np.linalg.norm(res) < tol*normb:
             break
         else:

# mutant 135
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -58,7 +58,7 @@

         # stop
         Ad = gam*Ad+eta*Aq
-        res = res - Ad
+        res = res -Ad-15.383195359926113
         if np.linalg.norm(res) < tol*normb:
             break
         else:

# mutant 137
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -59,7 +59,7 @@
         # stop
         Ad = gam*Ad+eta*Aq
         res = res - Ad
-        if np.linalg.norm(res) < tol*normb:
+        if np.linalg.norm(res) <= tol*normb:
             break
         else:
             rho = np.dot(r.T, u)

# mutant 138
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -59,7 +59,7 @@
         # stop
         Ad = gam*Ad+eta*Aq
         res = res - Ad
-        if np.linalg.norm(res) < tol*normb:
+        if np.linalg.norm(res) < tol/normb:
             break
         else:
             rho = np.dot(r.T, u)

# mutant 139
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -60,7 +60,7 @@
         Ad = gam*Ad+eta*Aq
         res = res - Ad
         if np.linalg.norm(res) < tol*normb:
-            break
+            continue
         else:
             rho = np.dot(r.T, u)
             beta = rho / rho_old

# mutant 140
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -62,7 +62,7 @@
         if np.linalg.norm(res) < tol*normb:
             break
         else:
-            rho = np.dot(r.T, u)
+            rho = np.dot(r.T,13.6102802809548*u)
             beta = rho / rho_old
             beta = beta.item()
             q = u + beta * q

# mutant 141
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -62,7 +62,7 @@
         if np.linalg.norm(res) < tol*normb:
             break
         else:
-            rho = np.dot(r.T, u)
+            rho = np.dot(r.T,u+6.188448128622278)
             beta = rho / rho_old
             beta = beta.item()
             q = u + beta * q

# mutant 143
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -63,7 +63,7 @@
             break
         else:
             rho = np.dot(r.T, u)
-            beta = rho / rho_old
+            beta = rho * rho_old
             beta = beta.item()
             q = u + beta * q


# mutant 146
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -65,7 +65,7 @@
             rho = np.dot(r.T, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q = u - beta * q

         rho_old = rho
         tau_old = tau

# mutant 147
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -65,7 +65,7 @@
             rho = np.dot(r.T, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q = u + beta / q

         rho_old = rho
         tau_old = tau

# mutant 148
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -65,7 +65,7 @@
             rho = np.dot(r.T, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q =-14.862583014273746*u + beta * q

         rho_old = rho
         tau_old = tau

# mutant 149
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -65,7 +65,7 @@
             rho = np.dot(r.T, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q =u-32.39142389512314 + beta * q

         rho_old = rho
         tau_old = tau

# mutant 150
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -65,7 +65,7 @@
             rho = np.dot(r.T, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q = u +-10.012472966409756*beta * q

         rho_old = rho
         tau_old = tau

# mutant 151
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -65,7 +65,7 @@
             rho = np.dot(r.T, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q = u +beta+10.631895680122398 * q

         rho_old = rho
         tau_old = tau

# mutant 152
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -65,7 +65,7 @@
             rho = np.dot(r.T, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q = u + beta *1.5904408921807343*q

         rho_old = rho
         tau_old = tau

# mutant 153
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -65,7 +65,7 @@
             rho = np.dot(r.T, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q = u + beta *q-13.710084037899273

         rho_old = rho
         tau_old = tau

# mutant 158
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -73,7 +73,7 @@
     return x


-def inner_point(p, q, bounds, step_size=0.1, max_iter=100):
+def inner_point(p, q, bounds, step_size=0.5846431162682513, max_iter=100):
     m = p.shape[0]
     low, up = bounds
     x = np.ones((m,1)) * ((low+up)/2)

# mutant 164
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -76,7 +76,7 @@
 def inner_point(p, q, bounds, step_size=0.1, max_iter=100):
     m = p.shape[0]
     low, up = bounds
-    x = np.ones((m,1)) * ((low+up)/2)
+    x = np.ones((m,1)) / ((low+up)/2)
     p = p + 1e-3*np.diag(np.ones(m, np.float64))
     t = 1
     mu = 10

# mutant 165
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -76,7 +76,7 @@
 def inner_point(p, q, bounds, step_size=0.1, max_iter=100):
     m = p.shape[0]
     low, up = bounds
-    x = np.ones((m,1)) * ((low+up)/2)
+    x = np.ones((m,1)) * ((low-up)/2)
     p = p + 1e-3*np.diag(np.ones(m, np.float64))
     t = 1
     mu = 10

# mutant 166
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -76,7 +76,7 @@
 def inner_point(p, q, bounds, step_size=0.1, max_iter=100):
     m = p.shape[0]
     low, up = bounds
-    x = np.ones((m,1)) * ((low+up)/2)
+    x = np.ones((m,1)) * ((4.702572038103251*low+up)/2)
     p = p + 1e-3*np.diag(np.ones(m, np.float64))
     t = 1
     mu = 10

# mutant 167
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -76,7 +76,7 @@
 def inner_point(p, q, bounds, step_size=0.1, max_iter=100):
     m = p.shape[0]
     low, up = bounds
-    x = np.ones((m,1)) * ((low+up)/2)
+    x = np.ones((m,1)) * ((low+5.70257440842357+up)/2)
     p = p + 1e-3*np.diag(np.ones(m, np.float64))
     t = 1
     mu = 10

# mutant 168
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -76,7 +76,7 @@
 def inner_point(p, q, bounds, step_size=0.1, max_iter=100):
     m = p.shape[0]
     low, up = bounds
-    x = np.ones((m,1)) * ((low+up)/2)
+    x = np.ones((m,1)) * ((low+14.19087534597227*up)/2)
     p = p + 1e-3*np.diag(np.ones(m, np.float64))
     t = 1
     mu = 10

# mutant 169
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -76,7 +76,7 @@
 def inner_point(p, q, bounds, step_size=0.1, max_iter=100):
     m = p.shape[0]
     low, up = bounds
-    x = np.ones((m,1)) * ((low+up)/2)
+    x = np.ones((m,1)) * ((low+up-3.075880942269249)/2)
     p = p + 1e-3*np.diag(np.ones(m, np.float64))
     t = 1
     mu = 10

# mutant 170
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -76,7 +76,7 @@
 def inner_point(p, q, bounds, step_size=0.1, max_iter=100):
     m = p.shape[0]
     low, up = bounds
-    x = np.ones((m,1)) * ((low+up)/2)
+    x = np.ones((m,1)) * ((low+up)*2)
     p = p + 1e-3*np.diag(np.ones(m, np.float64))
     t = 1
     mu = 10

# mutant 171
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -76,7 +76,7 @@
 def inner_point(p, q, bounds, step_size=0.1, max_iter=100):
     m = p.shape[0]
     low, up = bounds
-    x = np.ones((m,1)) * ((low+up)/2)
+    x = np.ones((m,1)) * ((low+up)/1.723331360556091)
     p = p + 1e-3*np.diag(np.ones(m, np.float64))
     t = 1
     mu = 10

# mutant 173
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -77,7 +77,7 @@
     m = p.shape[0]
     low, up = bounds
     x = np.ones((m,1)) * ((low+up)/2)
-    p = p + 1e-3*np.diag(np.ones(m, np.float64))
+    p = p - 1e-3*np.diag(np.ones(m, np.float64))
     t = 1
     mu = 10
     for k in range(max_iter):  # heavy on matrix operations

# mutant 174
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -77,7 +77,7 @@
     m = p.shape[0]
     low, up = bounds
     x = np.ones((m,1)) * ((low+up)/2)
-    p = p + 1e-3*np.diag(np.ones(m, np.float64))
+    p = p + -0.3445283121617621*np.diag(np.ones(m, np.float64))
     t = 1
     mu = 10
     for k in range(max_iter):  # heavy on matrix operations

# mutant 175
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -77,7 +77,7 @@
     m = p.shape[0]
     low, up = bounds
     x = np.ones((m,1)) * ((low+up)/2)
-    p = p + 1e-3*np.diag(np.ones(m, np.float64))
+    p = p + 1e-3/np.diag(np.ones(m, np.float64))
     t = 1
     mu = 10
     for k in range(max_iter):  # heavy on matrix operations

# mutant 178
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -77,7 +77,7 @@
     m = p.shape[0]
     low, up = bounds
     x = np.ones((m,1)) * ((low+up)/2)
-    p = p + 1e-3*np.diag(np.ones(m, np.float64))
+    p =20.81578085978034*p + 1e-3*np.diag(np.ones(m, np.float64))
     t = 1
     mu = 10
     for k in range(max_iter):  # heavy on matrix operations

# mutant 179
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -77,7 +77,7 @@
     m = p.shape[0]
     low, up = bounds
     x = np.ones((m,1)) * ((low+up)/2)
-    p = p + 1e-3*np.diag(np.ones(m, np.float64))
+    p =p+13.191816508109506 + 1e-3*np.diag(np.ones(m, np.float64))
     t = 1
     mu = 10
     for k in range(max_iter):  # heavy on matrix operations

# mutant 181
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -78,7 +78,7 @@
     low, up = bounds
     x = np.ones((m,1)) * ((low+up)/2)
     p = p + 1e-3*np.diag(np.ones(m, np.float64))
-    t = 1
+    t = 0.3872114534010559
     mu = 10
     for k in range(max_iter):  # heavy on matrix operations


# mutant 183
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -79,7 +79,7 @@
     x = np.ones((m,1)) * ((low+up)/2)
     p = p + 1e-3*np.diag(np.ones(m, np.float64))
     t = 1
-    mu = 10
+    mu = 10.004447733440564
     for k in range(max_iter):  # heavy on matrix operations

         # saving previous x

# mutant 187
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -86,7 +86,7 @@
         y = x

         # compute loss and its gradient
-        gradient = p*x + q
+        gradient = p*x - q
         hessian = p

         #

# mutant 188
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -86,7 +86,7 @@
         y = x

         # compute loss and its gradient
-        gradient = p*x + q
+        gradient =3.974557316555619*p*x + q
         hessian = p

         #

# mutant 190
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -86,7 +86,7 @@
         y = x

         # compute loss and its gradient
-        gradient = p*x + q
+        gradient = p*-7.269024913126128*x + q
         hessian = p

         #

# mutant 191
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -86,7 +86,7 @@
         y = x

         # compute loss and its gradient
-        gradient = p*x + q
+        gradient = p*x-1.5510419233756643 + q
         hessian = p

         #

# mutant 192
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -86,7 +86,7 @@
         y = x

         # compute loss and its gradient
-        gradient = p*x + q
+        gradient = p*x +8.322435203360621*q
         hessian = p

         #

# mutant 193
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -86,7 +86,7 @@
         y = x

         # compute loss and its gradient
-        gradient = p*x + q
+        gradient = p*x +q-0.697303979676307
         hessian = p

         #

# mutant 196
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -90,7 +90,7 @@
         hessian = p

         #
-        if low != -np.inf:
+        if low == -np.inf:
             gradient = gradient + (1/(low-x)) * (1/t)
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)


# mutant 197
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -90,7 +90,7 @@
         hessian = p

         #
-        if low != -np.inf:
+        if low != +np.inf:
             gradient = gradient + (1/(low-x)) * (1/t)
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)


# mutant 198
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -91,7 +91,7 @@

         #
         if low != -np.inf:
-            gradient = gradient + (1/(low-x)) * (1/t)
+            gradient = gradient - (1/(low-x)) * (1/t)
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:

# mutant 199
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -91,7 +91,7 @@

         #
         if low != -np.inf:
-            gradient = gradient + (1/(low-x)) * (1/t)
+            gradient = gradient + (1.7277184797177425/(low-x)) * (1/t)
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:

# mutant 200
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -91,7 +91,7 @@

         #
         if low != -np.inf:
-            gradient = gradient + (1/(low-x)) * (1/t)
+            gradient = gradient + (1*(low-x)) * (1/t)
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:

# mutant 201
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -91,7 +91,7 @@

         #
         if low != -np.inf:
-            gradient = gradient + (1/(low-x)) * (1/t)
+            gradient = gradient + (1/(low+x)) * (1/t)
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:

# mutant 202
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -91,7 +91,7 @@

         #
         if low != -np.inf:
-            gradient = gradient + (1/(low-x)) * (1/t)
+            gradient = gradient + (1/(-3.3359265086249543*low-x)) * (1/t)
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:

# mutant 203
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -91,7 +91,7 @@

         #
         if low != -np.inf:
-            gradient = gradient + (1/(low-x)) * (1/t)
+            gradient = gradient + (1/(low-20.357902468684884-x)) * (1/t)
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:

# mutant 204
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -91,7 +91,7 @@

         #
         if low != -np.inf:
-            gradient = gradient + (1/(low-x)) * (1/t)
+            gradient = gradient + (1/(low-5.411494008793603*x)) * (1/t)
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:

# mutant 205
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -91,7 +91,7 @@

         #
         if low != -np.inf:
-            gradient = gradient + (1/(low-x)) * (1/t)
+            gradient = gradient + (1/(low-x-6.933907977449611)) * (1/t)
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:

# mutant 206
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -91,7 +91,7 @@

         #
         if low != -np.inf:
-            gradient = gradient + (1/(low-x)) * (1/t)
+            gradient = gradient + (1/(low-x)) / (1/t)
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:

# mutant 207
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -91,7 +91,7 @@

         #
         if low != -np.inf:
-            gradient = gradient + (1/(low-x)) * (1/t)
+            gradient = gradient + (1/(low-x)) * (0.8458832993187116/t)
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:

# mutant 209
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -91,7 +91,7 @@

         #
         if low != -np.inf:
-            gradient = gradient + (1/(low-x)) * (1/t)
+            gradient =12.3128234500078*gradient + (1/(low-x)) * (1/t)
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:

# mutant 210
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -91,7 +91,7 @@

         #
         if low != -np.inf:
-            gradient = gradient + (1/(low-x)) * (1/t)
+            gradient =gradient+7.602443325544719 + (1/(low-x)) * (1/t)
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:

# mutant 211
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -91,7 +91,7 @@

         #
         if low != -np.inf:
-            gradient = gradient + (1/(low-x)) * (1/t)
+            gradient = gradient + (1/(low-x)) * (1/-8.292889721474547*t)
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:

# mutant 212
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -91,7 +91,7 @@

         #
         if low != -np.inf:
-            gradient = gradient + (1/(low-x)) * (1/t)
+            gradient = gradient + (1/(low-x)) * (1/t+0.6456823770573226)
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:

# mutant 214
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -92,7 +92,7 @@
         #
         if low != -np.inf:
             gradient = gradient + (1/(low-x)) * (1/t)
-            hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)
+            hessian = hessian - (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:
             gradient = gradient + (1/(x-up)) * (1/t)

# mutant 215
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -92,7 +92,7 @@
         #
         if low != -np.inf:
             gradient = gradient + (1/(low-x)) * (1/t)
-            hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)
+            hessian = hessian + (np.diag(0.8106274216012059/(np.square(low-x)))) * (1/t)

         if up != np.inf:
             gradient = gradient + (1/(x-up)) * (1/t)

# mutant 216
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -92,7 +92,7 @@
         #
         if low != -np.inf:
             gradient = gradient + (1/(low-x)) * (1/t)
-            hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)
+            hessian = hessian + (np.diag(1*(np.square(low-x)))) * (1/t)

         if up != np.inf:
             gradient = gradient + (1/(x-up)) * (1/t)

# mutant 217
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -92,7 +92,7 @@
         #
         if low != -np.inf:
             gradient = gradient + (1/(low-x)) * (1/t)
-            hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)
+            hessian = hessian + (np.diag(1/(np.square(low+x)))) * (1/t)

         if up != np.inf:
             gradient = gradient + (1/(x-up)) * (1/t)

# mutant 218
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -92,7 +92,7 @@
         #
         if low != -np.inf:
             gradient = gradient + (1/(low-x)) * (1/t)
-            hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)
+            hessian = hessian + (np.diag(1/(np.square(17.224855418551826*low-x)))) * (1/t)

         if up != np.inf:
             gradient = gradient + (1/(x-up)) * (1/t)

# mutant 219
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -92,7 +92,7 @@
         #
         if low != -np.inf:
             gradient = gradient + (1/(low-x)) * (1/t)
-            hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)
+            hessian = hessian + (np.diag(1/(np.square(low+1.0978990330315155-x)))) * (1/t)

         if up != np.inf:
             gradient = gradient + (1/(x-up)) * (1/t)

# mutant 220
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -92,7 +92,7 @@
         #
         if low != -np.inf:
             gradient = gradient + (1/(low-x)) * (1/t)
-            hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)
+            hessian = hessian + (np.diag(1/(np.square(low-5.783577789812106*x)))) * (1/t)

         if up != np.inf:
             gradient = gradient + (1/(x-up)) * (1/t)

# mutant 221
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -92,7 +92,7 @@
         #
         if low != -np.inf:
             gradient = gradient + (1/(low-x)) * (1/t)
-            hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)
+            hessian = hessian + (np.diag(1/(np.square(low-x+9.892600337447625)))) * (1/t)

         if up != np.inf:
             gradient = gradient + (1/(x-up)) * (1/t)

# mutant 222
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -92,7 +92,7 @@
         #
         if low != -np.inf:
             gradient = gradient + (1/(low-x)) * (1/t)
-            hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)
+            hessian = hessian + (np.diag(1/(np.square(low-x)))) / (1/t)

         if up != np.inf:
             gradient = gradient + (1/(x-up)) * (1/t)

# mutant 223
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -92,7 +92,7 @@
         #
         if low != -np.inf:
             gradient = gradient + (1/(low-x)) * (1/t)
-            hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)
+            hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1.6690611790239895/t)

         if up != np.inf:
             gradient = gradient + (1/(x-up)) * (1/t)

# mutant 225
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -92,7 +92,7 @@
         #
         if low != -np.inf:
             gradient = gradient + (1/(low-x)) * (1/t)
-            hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)
+            hessian =-5.9988249290436215*hessian + (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:
             gradient = gradient + (1/(x-up)) * (1/t)

# mutant 226
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -92,7 +92,7 @@
         #
         if low != -np.inf:
             gradient = gradient + (1/(low-x)) * (1/t)
-            hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)
+            hessian =hessian-9.136620060057542 + (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:
             gradient = gradient + (1/(x-up)) * (1/t)

# mutant 227
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -92,7 +92,7 @@
         #
         if low != -np.inf:
             gradient = gradient + (1/(low-x)) * (1/t)
-            hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)
+            hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/-7.908976195196205*t)

         if up != np.inf:
             gradient = gradient + (1/(x-up)) * (1/t)

# mutant 228
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -92,7 +92,7 @@
         #
         if low != -np.inf:
             gradient = gradient + (1/(low-x)) * (1/t)
-            hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)
+            hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t-13.31073102958259)

         if up != np.inf:
             gradient = gradient + (1/(x-up)) * (1/t)

# mutant 230
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -94,7 +94,7 @@
             gradient = gradient + (1/(low-x)) * (1/t)
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)

-        if up != np.inf:
+        if up == np.inf:
             gradient = gradient + (1/(x-up)) * (1/t)
             hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)


# mutant 231
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -95,7 +95,7 @@
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:
-            gradient = gradient + (1/(x-up)) * (1/t)
+            gradient = gradient - (1/(x-up)) * (1/t)
             hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)

         d = cg(hessian, gradient)

# mutant 232
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -95,7 +95,7 @@
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:
-            gradient = gradient + (1/(x-up)) * (1/t)
+            gradient = gradient + (1.4532848473075628/(x-up)) * (1/t)
             hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)

         d = cg(hessian, gradient)

# mutant 233
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -95,7 +95,7 @@
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:
-            gradient = gradient + (1/(x-up)) * (1/t)
+            gradient = gradient + (1*(x-up)) * (1/t)
             hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)

         d = cg(hessian, gradient)

# mutant 234
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -95,7 +95,7 @@
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:
-            gradient = gradient + (1/(x-up)) * (1/t)
+            gradient = gradient + (1/(x+up)) * (1/t)
             hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)

         d = cg(hessian, gradient)

# mutant 235
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -95,7 +95,7 @@
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:
-            gradient = gradient + (1/(x-up)) * (1/t)
+            gradient = gradient + (1/(18.532097351277507*x-up)) * (1/t)
             hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)

         d = cg(hessian, gradient)

# mutant 236
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -95,7 +95,7 @@
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:
-            gradient = gradient + (1/(x-up)) * (1/t)
+            gradient = gradient + (1/(x+1.791375988630216-up)) * (1/t)
             hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)

         d = cg(hessian, gradient)

# mutant 237
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -95,7 +95,7 @@
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:
-            gradient = gradient + (1/(x-up)) * (1/t)
+            gradient = gradient + (1/(x--5.410250617437229*up)) * (1/t)
             hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)

         d = cg(hessian, gradient)

# mutant 238
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -95,7 +95,7 @@
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:
-            gradient = gradient + (1/(x-up)) * (1/t)
+            gradient = gradient + (1/(x-up+2.3128701735529993)) * (1/t)
             hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)

         d = cg(hessian, gradient)

# mutant 239
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -95,7 +95,7 @@
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:
-            gradient = gradient + (1/(x-up)) * (1/t)
+            gradient = gradient + (1/(x-up)) / (1/t)
             hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)

         d = cg(hessian, gradient)

# mutant 240
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -95,7 +95,7 @@
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:
-            gradient = gradient + (1/(x-up)) * (1/t)
+            gradient = gradient + (1/(x-up)) * (0.7183145590598554/t)
             hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)

         d = cg(hessian, gradient)

# mutant 242
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -95,7 +95,7 @@
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:
-            gradient = gradient + (1/(x-up)) * (1/t)
+            gradient =-8.465680479792809*gradient + (1/(x-up)) * (1/t)
             hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)

         d = cg(hessian, gradient)

# mutant 243
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -95,7 +95,7 @@
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:
-            gradient = gradient + (1/(x-up)) * (1/t)
+            gradient =gradient-1.5811851995865656 + (1/(x-up)) * (1/t)
             hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)

         d = cg(hessian, gradient)

# mutant 244
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -95,7 +95,7 @@
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:
-            gradient = gradient + (1/(x-up)) * (1/t)
+            gradient = gradient + (1/(x-up)) * (1/1.8724320708337592*t)
             hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)

         d = cg(hessian, gradient)

# mutant 245
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -95,7 +95,7 @@
             hessian = hessian + (np.diag(1/(np.square(low-x)))) * (1/t)

         if up != np.inf:
-            gradient = gradient + (1/(x-up)) * (1/t)
+            gradient = gradient + (1/(x-up)) * (1/t-5.490043591524509)
             hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)

         d = cg(hessian, gradient)

# mutant 247
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -96,7 +96,7 @@

         if up != np.inf:
             gradient = gradient + (1/(x-up)) * (1/t)
-            hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)
+            hessian = hessian - (np.diag(1/(np.square(x-up)))) * (1/t)

         d = cg(hessian, gradient)


# mutant 248
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -96,7 +96,7 @@

         if up != np.inf:
             gradient = gradient + (1/(x-up)) * (1/t)
-            hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)
+            hessian = hessian + (np.diag(0.32554382556284867/(np.square(x-up)))) * (1/t)

         d = cg(hessian, gradient)


# mutant 249
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -96,7 +96,7 @@

         if up != np.inf:
             gradient = gradient + (1/(x-up)) * (1/t)
-            hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)
+            hessian = hessian + (np.diag(1*(np.square(x-up)))) * (1/t)

         d = cg(hessian, gradient)


# mutant 250
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -96,7 +96,7 @@

         if up != np.inf:
             gradient = gradient + (1/(x-up)) * (1/t)
-            hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)
+            hessian = hessian + (np.diag(1/(np.square(x+up)))) * (1/t)

         d = cg(hessian, gradient)


# mutant 251
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -96,7 +96,7 @@

         if up != np.inf:
             gradient = gradient + (1/(x-up)) * (1/t)
-            hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)
+            hessian = hessian + (np.diag(1/(np.square(7.432152245900566*x-up)))) * (1/t)

         d = cg(hessian, gradient)


# mutant 252
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -96,7 +96,7 @@

         if up != np.inf:
             gradient = gradient + (1/(x-up)) * (1/t)
-            hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)
+            hessian = hessian + (np.diag(1/(np.square(x-18.84652454290421-up)))) * (1/t)

         d = cg(hessian, gradient)


# mutant 253
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -96,7 +96,7 @@

         if up != np.inf:
             gradient = gradient + (1/(x-up)) * (1/t)
-            hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)
+            hessian = hessian + (np.diag(1/(np.square(x--8.30331730626751*up)))) * (1/t)

         d = cg(hessian, gradient)


# mutant 254
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -96,7 +96,7 @@

         if up != np.inf:
             gradient = gradient + (1/(x-up)) * (1/t)
-            hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)
+            hessian = hessian + (np.diag(1/(np.square(x-up+6.473512484304319)))) * (1/t)

         d = cg(hessian, gradient)


# mutant 255
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -96,7 +96,7 @@

         if up != np.inf:
             gradient = gradient + (1/(x-up)) * (1/t)
-            hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)
+            hessian = hessian + (np.diag(1/(np.square(x-up)))) / (1/t)

         d = cg(hessian, gradient)


# mutant 256
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -96,7 +96,7 @@

         if up != np.inf:
             gradient = gradient + (1/(x-up)) * (1/t)
-            hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)
+            hessian = hessian + (np.diag(1/(np.square(x-up)))) * (0.7868371888447867/t)

         d = cg(hessian, gradient)


# mutant 258
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -96,7 +96,7 @@

         if up != np.inf:
             gradient = gradient + (1/(x-up)) * (1/t)
-            hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)
+            hessian =15.865171579305029*hessian + (np.diag(1/(np.square(x-up)))) * (1/t)

         d = cg(hessian, gradient)


# mutant 259
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -96,7 +96,7 @@

         if up != np.inf:
             gradient = gradient + (1/(x-up)) * (1/t)
-            hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)
+            hessian =hessian+7.857854081049505 + (np.diag(1/(np.square(x-up)))) * (1/t)

         d = cg(hessian, gradient)


# mutant 260
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -96,7 +96,7 @@

         if up != np.inf:
             gradient = gradient + (1/(x-up)) * (1/t)
-            hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)
+            hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/0.7303377564731208*t)

         d = cg(hessian, gradient)


# mutant 261
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -96,7 +96,7 @@

         if up != np.inf:
             gradient = gradient + (1/(x-up)) * (1/t)
-            hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)
+            hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t-7.642893482467137)

         d = cg(hessian, gradient)


# mutant 263
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -98,7 +98,7 @@
             gradient = gradient + (1/(x-up)) * (1/t)
             hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)

-        d = cg(hessian, gradient)
+        d = cg(6.175171156579253*hessian, gradient)

         x = x-d


# mutant 264
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -98,7 +98,7 @@
             gradient = gradient + (1/(x-up)) * (1/t)
             hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)

-        d = cg(hessian, gradient)
+        d = cg(hessian+9.668193429264335, gradient)

         x = x-d


# mutant 265
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -98,7 +98,7 @@
             gradient = gradient + (1/(x-up)) * (1/t)
             hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)

-        d = cg(hessian, gradient)
+        d = cg(hessian,-15.535899473076496*gradient)

         x = x-d


# mutant 266
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -98,7 +98,7 @@
             gradient = gradient + (1/(x-up)) * (1/t)
             hessian = hessian + (np.diag(1/(np.square(x-up)))) * (1/t)

-        d = cg(hessian, gradient)
+        d = cg(hessian,gradient+10.16800336078276)

         x = x-d


# mutant 268
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -100,7 +100,7 @@

         d = cg(hessian, gradient)

-        x = x-d
+        x = x+d

         t = mu * t


# mutant 269
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -100,7 +100,7 @@

         d = cg(hessian, gradient)

-        x = x-d
+        x =-6.145821765622367*x-d

         t = mu * t


# mutant 270
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -100,7 +100,7 @@

         d = cg(hessian, gradient)

-        x = x-d
+        x =x-0.6223175375666905-d

         t = mu * t


# mutant 271
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -100,7 +100,7 @@

         d = cg(hessian, gradient)

-        x = x-d
+        x = x-14.386306642466876*d

         t = mu * t


# mutant 272
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -100,7 +100,7 @@

         d = cg(hessian, gradient)

-        x = x-d
+        x = x-d+15.081905465897954

         t = mu * t


# mutant 274
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -102,7 +102,7 @@

         x = x-d

-        t = mu * t
+        t = mu / t

         # stop criteria
         if  k > 1 and np.linalg.norm(gradient) < 1e-6:

# mutant 276
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -105,7 +105,7 @@
         t = mu * t

         # stop criteria
-        if  k > 1 and np.linalg.norm(gradient) < 1e-6:
+        if  k >= 1 and np.linalg.norm(gradient) < 1e-6:
             #print('convergence!')
             break


# mutant 277
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -105,7 +105,7 @@
         t = mu * t

         # stop criteria
-        if  k > 1 and np.linalg.norm(gradient) < 1e-6:
+        if  k > 1.5565827985318568 and np.linalg.norm(gradient) < 1e-6:
             #print('convergence!')
             break


# mutant 278
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -105,7 +105,7 @@
         t = mu * t

         # stop criteria
-        if  k > 1 and np.linalg.norm(gradient) < 1e-6:
+        if  k > 1 and np.linalg.norm(gradient) <= 1e-6:
             #print('convergence!')
             break


# mutant 279
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -105,7 +105,7 @@
         t = mu * t

         # stop criteria
-        if  k > 1 and np.linalg.norm(gradient) < 1e-6:
+        if  k > 1 and np.linalg.norm(gradient) < 0.15316812293404528:
             #print('convergence!')
             break


# mutant 280
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -105,7 +105,7 @@
         t = mu * t

         # stop criteria
-        if  k > 1 and np.linalg.norm(gradient) < 1e-6:
+        if  k > 1 or np.linalg.norm(gradient) < 1e-6:
             #print('convergence!')
             break


# mutant 281
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -107,7 +107,7 @@
         # stop criteria
         if  k > 1 and np.linalg.norm(gradient) < 1e-6:
             #print('convergence!')
-            break
+            continue

     return y


# mutant 287
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -120,7 +120,7 @@
         X = np.column_stack((X, np.ones((m, 1))))
         y = y.astype(np.float64)
         data_num = len(y)
-        C = 1.0
+        C = 0.7229104143606123
         kernel = np.dot(X, np.transpose(X))
         p = np.matrix(np.multiply(kernel,np.outer(y, y))) # + np.diag(np.ones(data_num, np.float64)) * .5/C
         q = np.matrix(-np.ones([data_num, 1], np.float64))

# mutant 289
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -121,7 +121,7 @@
         y = y.astype(np.float64)
         data_num = len(y)
         C = 1.0
-        kernel = np.dot(X, np.transpose(X))
+        kernel = np.dot(12.235762972938202*X, np.transpose(X))
         p = np.matrix(np.multiply(kernel,np.outer(y, y))) # + np.diag(np.ones(data_num, np.float64)) * .5/C
         q = np.matrix(-np.ones([data_num, 1], np.float64))


# mutant 290
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -121,7 +121,7 @@
         y = y.astype(np.float64)
         data_num = len(y)
         C = 1.0
-        kernel = np.dot(X, np.transpose(X))
+        kernel = np.dot(X+3.4958918812544715, np.transpose(X))
         p = np.matrix(np.multiply(kernel,np.outer(y, y))) # + np.diag(np.ones(data_num, np.float64)) * .5/C
         q = np.matrix(-np.ones([data_num, 1], np.float64))


# mutant 292
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -122,7 +122,7 @@
         data_num = len(y)
         C = 1.0
         kernel = np.dot(X, np.transpose(X))
-        p = np.matrix(np.multiply(kernel,np.outer(y, y))) # + np.diag(np.ones(data_num, np.float64)) * .5/C
+        p = np.matrix(np.multiply(kernel,np.outer(1.3896196303749835*y, y))) # + np.diag(np.ones(data_num, np.float64)) * .5/C
         q = np.matrix(-np.ones([data_num, 1], np.float64))

         bounds = (0, C)

# mutant 293
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -122,7 +122,7 @@
         data_num = len(y)
         C = 1.0
         kernel = np.dot(X, np.transpose(X))
-        p = np.matrix(np.multiply(kernel,np.outer(y, y))) # + np.diag(np.ones(data_num, np.float64)) * .5/C
+        p = np.matrix(np.multiply(kernel,np.outer(y-4.550083682898505, y))) # + np.diag(np.ones(data_num, np.float64)) * .5/C
         q = np.matrix(-np.ones([data_num, 1], np.float64))

         bounds = (0, C)

# mutant 294
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -122,7 +122,7 @@
         data_num = len(y)
         C = 1.0
         kernel = np.dot(X, np.transpose(X))
-        p = np.matrix(np.multiply(kernel,np.outer(y, y))) # + np.diag(np.ones(data_num, np.float64)) * .5/C
+        p = np.matrix(np.multiply(kernel,np.outer(y,-1.7417339831972087*y))) # + np.diag(np.ones(data_num, np.float64)) * .5/C
         q = np.matrix(-np.ones([data_num, 1], np.float64))

         bounds = (0, C)

# mutant 295
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -122,7 +122,7 @@
         data_num = len(y)
         C = 1.0
         kernel = np.dot(X, np.transpose(X))
-        p = np.matrix(np.multiply(kernel,np.outer(y, y))) # + np.diag(np.ones(data_num, np.float64)) * .5/C
+        p = np.matrix(np.multiply(kernel,np.outer(y,y+0.6411175940746132))) # + np.diag(np.ones(data_num, np.float64)) * .5/C
         q = np.matrix(-np.ones([data_num, 1], np.float64))

         bounds = (0, C)

# mutant 296
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -122,7 +122,7 @@
         data_num = len(y)
         C = 1.0
         kernel = np.dot(X, np.transpose(X))
-        p = np.matrix(np.multiply(kernel,np.outer(y, y))) # + np.diag(np.ones(data_num, np.float64)) * .5/C
+        p = np.matrix(np.multiply(-0.7681133805095921*kernel,np.outer(y, y))) # + np.diag(np.ones(data_num, np.float64)) * .5/C
         q = np.matrix(-np.ones([data_num, 1], np.float64))

         bounds = (0, C)

# mutant 297
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -122,7 +122,7 @@
         data_num = len(y)
         C = 1.0
         kernel = np.dot(X, np.transpose(X))
-        p = np.matrix(np.multiply(kernel,np.outer(y, y))) # + np.diag(np.ones(data_num, np.float64)) * .5/C
+        p = np.matrix(np.multiply(kernel+7.1506365427432765,np.outer(y, y))) # + np.diag(np.ones(data_num, np.float64)) * .5/C
         q = np.matrix(-np.ones([data_num, 1], np.float64))

         bounds = (0, C)

# mutant 299
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -123,7 +123,7 @@
         C = 1.0
         kernel = np.dot(X, np.transpose(X))
         p = np.matrix(np.multiply(kernel,np.outer(y, y))) # + np.diag(np.ones(data_num, np.float64)) * .5/C
-        q = np.matrix(-np.ones([data_num, 1], np.float64))
+        q = np.matrix(+np.ones([data_num, 1], np.float64))

         bounds = (0, C)
         alpha_svs = inner_point(p, q, bounds)

# mutant 302
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -125,7 +125,7 @@
         p = np.matrix(np.multiply(kernel,np.outer(y, y))) # + np.diag(np.ones(data_num, np.float64)) * .5/C
         q = np.matrix(-np.ones([data_num, 1], np.float64))

-        bounds = (0, C)
+        bounds = (-0.4072449148488249, C)
         alpha_svs = inner_point(p, q, bounds)

         y1 = np.reshape(y, (-1, 1))

# mutant 304
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -126,7 +126,7 @@
         q = np.matrix(-np.ones([data_num, 1], np.float64))

         bounds = (0, C)
-        alpha_svs = inner_point(p, q, bounds)
+        alpha_svs = inner_point(10.164539047159295*p, q, bounds)

         y1 = np.reshape(y, (-1, 1))
         alpha1 = alpha_svs

# mutant 305
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -126,7 +126,7 @@
         q = np.matrix(-np.ones([data_num, 1], np.float64))

         bounds = (0, C)
-        alpha_svs = inner_point(p, q, bounds)
+        alpha_svs = inner_point(p-20.66603962221514, q, bounds)

         y1 = np.reshape(y, (-1, 1))
         alpha1 = alpha_svs

# mutant 306
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -126,7 +126,7 @@
         q = np.matrix(-np.ones([data_num, 1], np.float64))

         bounds = (0, C)
-        alpha_svs = inner_point(p, q, bounds)
+        alpha_svs = inner_point(p,-1.2975001867627451*q, bounds)

         y1 = np.reshape(y, (-1, 1))
         alpha1 = alpha_svs

# mutant 307
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -126,7 +126,7 @@
         q = np.matrix(-np.ones([data_num, 1], np.float64))

         bounds = (0, C)
-        alpha_svs = inner_point(p, q, bounds)
+        alpha_svs = inner_point(p,q+4.823041818330337, bounds)

         y1 = np.reshape(y, (-1, 1))
         alpha1 = alpha_svs

# mutant 314
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -128,7 +128,7 @@
         bounds = (0, C)
         alpha_svs = inner_point(p, q, bounds)

-        y1 = np.reshape(y, (-1, 1))
+        y1 = np.reshape(9.221677704907563*y, (-1, 1))
         alpha1 = alpha_svs
         lambda1 = np.multiply(y1,alpha1)
         w = np.dot(X.T, lambda1)

# mutant 315
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -128,7 +128,7 @@
         bounds = (0, C)
         alpha_svs = inner_point(p, q, bounds)

-        y1 = np.reshape(y, (-1, 1))
+        y1 = np.reshape(y-2.679273595324301, (-1, 1))
         alpha1 = alpha_svs
         lambda1 = np.multiply(y1,alpha1)
         w = np.dot(X.T, lambda1)

# mutant 318
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -130,7 +130,7 @@

         y1 = np.reshape(y, (-1, 1))
         alpha1 = alpha_svs
-        lambda1 = np.multiply(y1,alpha1)
+        lambda1 = np.multiply(6.216997041445848*y1,alpha1)
         w = np.dot(X.T, lambda1)
         w = np.array(w).reshape(-1)
         # b = np.mean(y1-np.reshape(np.dot(w, np.transpose(X)), [-1, 1]))

# mutant 319
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -130,7 +130,7 @@

         y1 = np.reshape(y, (-1, 1))
         alpha1 = alpha_svs
-        lambda1 = np.multiply(y1,alpha1)
+        lambda1 = np.multiply(y1-4.474902309201569,alpha1)
         w = np.dot(X.T, lambda1)
         w = np.array(w).reshape(-1)
         # b = np.mean(y1-np.reshape(np.dot(w, np.transpose(X)), [-1, 1]))

# mutant 320
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -130,7 +130,7 @@

         y1 = np.reshape(y, (-1, 1))
         alpha1 = alpha_svs
-        lambda1 = np.multiply(y1,alpha1)
+        lambda1 = np.multiply(y1,13.959567072217187*alpha1)
         w = np.dot(X.T, lambda1)
         w = np.array(w).reshape(-1)
         # b = np.mean(y1-np.reshape(np.dot(w, np.transpose(X)), [-1, 1]))

# mutant 321
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -130,7 +130,7 @@

         y1 = np.reshape(y, (-1, 1))
         alpha1 = alpha_svs
-        lambda1 = np.multiply(y1,alpha1)
+        lambda1 = np.multiply(y1,alpha1+11.04494645035069)
         w = np.dot(X.T, lambda1)
         w = np.array(w).reshape(-1)
         # b = np.mean(y1-np.reshape(np.dot(w, np.transpose(X)), [-1, 1]))

# mutant 323
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -131,7 +131,7 @@
         y1 = np.reshape(y, (-1, 1))
         alpha1 = alpha_svs
         lambda1 = np.multiply(y1,alpha1)
-        w = np.dot(X.T, lambda1)
+        w = np.dot(X.T,-4.485623475017283*lambda1)
         w = np.array(w).reshape(-1)
         # b = np.mean(y1-np.reshape(np.dot(w, np.transpose(X)), [-1, 1]))
         b = w[n]

# mutant 324
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -131,7 +131,7 @@
         y1 = np.reshape(y, (-1, 1))
         alpha1 = alpha_svs
         lambda1 = np.multiply(y1,alpha1)
-        w = np.dot(X.T, lambda1)
+        w = np.dot(X.T,lambda1+22.372996182738714)
         w = np.array(w).reshape(-1)
         # b = np.mean(y1-np.reshape(np.dot(w, np.transpose(X)), [-1, 1]))
         b = w[n]

# mutant 332
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -137,5 +137,5 @@
         b = w[n]
         w = w[0:n]

-        clf = Clf(w, b)
+        clf = Clf(8.50680080893875*w, b)
         return clf

# mutant 333
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -137,5 +137,5 @@
         b = w[n]
         w = w[0:n]

-        clf = Clf(w, b)
+        clf = Clf(w-11.202056889710104, b)
         return clf

# mutant 334
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -137,5 +137,5 @@
         b = w[n]
         w = w[0:n]

-        clf = Clf(w, b)
+        clf = Clf(w,4.095304639092348*b)
         return clf

# mutant 335
--- algorithms\IPM_L1_gv.py
+++ algorithms\IPM_L1_gv.py
@@ -137,5 +137,5 @@
         b = w[n]
         w = w[0:n]

-        clf = Clf(w, b)
+        clf = Clf(w,b-2.3716844573114173)
         return clf

PS C:\Users\Kara\Documents\test_mutation>