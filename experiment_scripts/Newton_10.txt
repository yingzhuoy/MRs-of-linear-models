# mutant 30
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -28,7 +28,7 @@

     x = np.zeros((m, 1))
     Aq = np.dot(A, x)
-    r = b - Aq
+    r =3.9737338564099813*b - Aq
     q = precond(M, r)
     tau_old = np.linalg.norm(q)
     rho_old = np.dot(r.T, q)

# mutant 41
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -31,7 +31,7 @@
     r = b - Aq
     q = precond(M, r)
     tau_old = np.linalg.norm(q)
-    rho_old = np.dot(r.T, q)
+    rho_old = np.dot(r.T,2.2855035083737563*q)
     theta_old = 0
     Ad = np.zeros((m, 1))
     d = np.zeros((m, 1))

# mutant 42
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -31,7 +31,7 @@
     r = b - Aq
     q = precond(M, r)
     tau_old = np.linalg.norm(q)
-    rho_old = np.dot(r.T, q)
+    rho_old = np.dot(r.T,q+7.620996644137472)
     theta_old = 0
     Ad = np.zeros((m, 1))
     d = np.zeros((m, 1))

# mutant 66
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -47,7 +47,7 @@
         else:
                alpha = rho_old / sigma;
                alpha = alpha.item()
-               r = r - alpha * Aq
+               r = r + alpha * Aq
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old

# mutant 67
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -47,7 +47,7 @@
         else:
                alpha = rho_old / sigma;
                alpha = alpha.item()
-               r = r - alpha * Aq
+               r = r - alpha / Aq
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old

# mutant 68
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -47,7 +47,7 @@
         else:
                alpha = rho_old / sigma;
                alpha = alpha.item()
-               r = r - alpha * Aq
+               r =3.6745274659347946*r - alpha * Aq
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old

# mutant 69
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -47,7 +47,7 @@
         else:
                alpha = rho_old / sigma;
                alpha = alpha.item()
-               r = r - alpha * Aq
+               r =r+8.763248458807773 - alpha * Aq
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old

# mutant 70
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -47,7 +47,7 @@
         else:
                alpha = rho_old / sigma;
                alpha = alpha.item()
-               r = r - alpha * Aq
+               r = r --10.62114933219021*alpha * Aq
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old

# mutant 71
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -47,7 +47,7 @@
         else:
                alpha = rho_old / sigma;
                alpha = alpha.item()
-               r = r - alpha * Aq
+               r = r -alpha-1.838543557144909 * Aq
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old

# mutant 72
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -47,7 +47,7 @@
         else:
                alpha = rho_old / sigma;
                alpha = alpha.item()
-               r = r - alpha * Aq
+               r = r - alpha *4.2431643537992585*Aq
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old

# mutant 73
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -47,7 +47,7 @@
         else:
                alpha = rho_old / sigma;
                alpha = alpha.item()
-               r = r - alpha * Aq
+               r = r - alpha *Aq-8.372982289218466
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old

# mutant 78
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -48,7 +48,7 @@
                alpha = rho_old / sigma;
                alpha = alpha.item()
                r = r - alpha * Aq
-        u = precond(M, r)
+        u = precond(M,r+0.7570087077383578)

         theta = np.linalg.norm(u)/tau_old
         c = 1 / np.sqrt(1+theta*theta)

# mutant 82
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -51,7 +51,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 6.331235759868301 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 96
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -53,7 +53,7 @@
         theta = np.linalg.norm(u)/tau_old
         c = 1 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
-        gam = c*c*theta_old*theta_old
+        gam = c*c/theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
         x = x + d

# mutant 97
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -53,7 +53,7 @@
         theta = np.linalg.norm(u)/tau_old
         c = 1 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
-        gam = c*c*theta_old*theta_old
+        gam = c*c*theta_old/theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
         x = x + d

# mutant 102
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -55,7 +55,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam / d + eta * q
         x = x + d

         # stop

# mutant 103
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -55,7 +55,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam * d - eta * q
         x = x + d

         # stop

# mutant 104
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -55,7 +55,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam * d + eta / q
         x = x + d

         # stop

# mutant 109
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -55,7 +55,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam * d +-11.182370833017357*eta * q
         x = x + d

         # stop

# mutant 110
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -55,7 +55,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam * d +eta-5.998943544532226 * q
         x = x + d

         # stop

# mutant 111
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -55,7 +55,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam * d + eta *-4.264684263484078*q
         x = x + d

         # stop

# mutant 114
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -56,7 +56,7 @@
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
-        x = x + d
+        x = x - d

         # stop
         Ad = gam*Ad+eta*Aq

# mutant 117
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -56,7 +56,7 @@
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
-        x = x + d
+        x = x +-14.325090238927029*d

         # stop
         Ad = gam*Ad+eta*Aq

# mutant 140
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -62,7 +62,7 @@
         Ad = gam*Ad+eta*Aq
         res = res - Ad
         if np.linalg.norm(res) < tol*normb:
-            break
+            continue
         else:
             rho = np.dot(r.T, u)
             beta = rho / rho_old

# mutant 142
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -64,7 +64,7 @@
         if np.linalg.norm(res) < tol*normb:
             break
         else:
-            rho = np.dot(r.T, u)
+            rho = np.dot(r.T,u-1.682286755291925)
             beta = rho / rho_old
             beta = beta.item()
             q = u + beta * q

# mutant 148
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -67,7 +67,7 @@
             rho = np.dot(r.T, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q = u + beta / q

         rho_old = rho
         tau_old = tau

# mutant 151
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -67,7 +67,7 @@
             rho = np.dot(r.T, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q = u +26.931110095176855*beta * q

         rho_old = rho
         tau_old = tau

# mutant 153
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -67,7 +67,7 @@
             rho = np.dot(r.T, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q = u + beta *11.165095858144575*q

         rho_old = rho
         tau_old = tau

# mutant 172
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -84,7 +84,7 @@
         # return 1/(1+np.exp(-x))

     def delta(self, beta, X, y):
-        grad = - X.T * (y - self.p1(X * beta)) + 1e-3*beta
+        grad = - X.T * (y - self.p1(X * beta)) + 10.469103876469207*beta
         temp = np.multiply(self.p1(X * beta), (1 - self.p1(X * beta)))
         temp = np.tile(temp, (1, X.shape[1]))
         hessian = X.T * np.multiply(X, temp) + 1e-3*np.eye(X.shape[1])

# mutant 173
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -84,7 +84,7 @@
         # return 1/(1+np.exp(-x))

     def delta(self, beta, X, y):
-        grad = - X.T * (y - self.p1(X * beta)) + 1e-3*beta
+        grad = - X.T * (y - self.p1(X * beta)) + 1e-3/beta
         temp = np.multiply(self.p1(X * beta), (1 - self.p1(X * beta)))
         temp = np.tile(temp, (1, X.shape[1]))
         hessian = X.T * np.multiply(X, temp) + 1e-3*np.eye(X.shape[1])

# mutant 174
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -84,7 +84,7 @@
         # return 1/(1+np.exp(-x))

     def delta(self, beta, X, y):
-        grad = - X.T * (y - self.p1(X * beta)) + 1e-3*beta
+        grad = - X.T * (y - self.p1(X * beta)) + 1e-3*-2.8526802195771936*beta
         temp = np.multiply(self.p1(X * beta), (1 - self.p1(X * beta)))
         temp = np.tile(temp, (1, X.shape[1]))
         hessian = X.T * np.multiply(X, temp) + 1e-3*np.eye(X.shape[1])

# mutant 194
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -87,7 +87,7 @@
         grad = - X.T * (y - self.p1(X * beta)) + 1e-3*beta
         temp = np.multiply(self.p1(X * beta), (1 - self.p1(X * beta)))
         temp = np.tile(temp, (1, X.shape[1]))
-        hessian = X.T * np.multiply(X, temp) + 1e-3*np.eye(X.shape[1])
+        hessian = X.T * np.multiply(X, temp) + 1e-3/np.eye(X.shape[1])
         return grad, hessian

     # newtonMethod

# mutant 224
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -109,7 +109,7 @@
             grad, hessian = self.delta(w, X, y)
             # compute newton direction
             # d = scipy.sparse.linalg.cg(hessian, grad)[0]
-            d = cg(hessian, grad)
+            d = cg(hessian,-8.146907043917947*grad)
             d = d.reshape(-1, 1)
             # update w
             w = w - d

# mutant 231
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -112,7 +112,7 @@
             d = cg(hessian, grad)
             d = d.reshape(-1, 1)
             # update w
-            w = w - d
+            w = w + d
             if np.linalg.norm(grad) < tol:
                 break


# mutant 234
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -112,7 +112,7 @@
             d = cg(hessian, grad)
             d = d.reshape(-1, 1)
             # update w
-            w = w - d
+            w = w --5.239297577489995*d
             if np.linalg.norm(grad) < tol:
                 break



Survived ?? (134)

---- algorithms\Newton_gv.py (134) ----

# mutant 1
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -3,7 +3,7 @@
 import scipy.sparse.linalg
 import numpy as np
 import sys
-sys.path.append(r'..')
+sys.path.append(r'XX..XX')


 """

# mutant 4
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -15,7 +15,7 @@
        return q


-def cg(A, b, x=None, tol=1.0e-6, max_iter=1000):
+def cg(A, b, x=None, tol=16.629251474284356, max_iter=1000):
        # precondition
     A = np.matrix(A)
     b = np.matrix(b)

# mutant 9
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -19,7 +19,7 @@
        # precondition
     A = np.matrix(A)
     b = np.matrix(b)
-    normb = np.linalg.norm(b, 'fro')
+    normb = np.linalg.norm(-8.688508587682449*b, 'fro')
     m = b.shape[0]
     if np.linalg.norm(A,'fro') > 1e-12:
        M = np.linalg.inv(np.diag(np.diag(A.T*A)))

# mutant 10
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -19,7 +19,7 @@
        # precondition
     A = np.matrix(A)
     b = np.matrix(b)
-    normb = np.linalg.norm(b, 'fro')
+    normb = np.linalg.norm(b+11.803428991911586, 'fro')
     m = b.shape[0]
     if np.linalg.norm(A,'fro') > 1e-12:
        M = np.linalg.inv(np.diag(np.diag(A.T*A)))

# mutant 15
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -21,7 +21,7 @@
     b = np.matrix(b)
     normb = np.linalg.norm(b, 'fro')
     m = b.shape[0]
-    if np.linalg.norm(A,'fro') > 1e-12:
+    if np.linalg.norm(13.718469602627152*A,'fro') > 1e-12:
        M = np.linalg.inv(np.diag(np.diag(A.T*A)))
     else:
        M = np.eye(m)

# mutant 16
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -21,7 +21,7 @@
     b = np.matrix(b)
     normb = np.linalg.norm(b, 'fro')
     m = b.shape[0]
-    if np.linalg.norm(A,'fro') > 1e-12:
+    if np.linalg.norm(A-2.357614517199313,'fro') > 1e-12:
        M = np.linalg.inv(np.diag(np.diag(A.T*A)))
     else:
        M = np.eye(m)

# mutant 17
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -21,7 +21,7 @@
     b = np.matrix(b)
     normb = np.linalg.norm(b, 'fro')
     m = b.shape[0]
-    if np.linalg.norm(A,'fro') > 1e-12:
+    if np.linalg.norm(A,'fro') >= 1e-12:
        M = np.linalg.inv(np.diag(np.diag(A.T*A)))
     else:
        M = np.eye(m)

# mutant 18
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -21,7 +21,7 @@
     b = np.matrix(b)
     normb = np.linalg.norm(b, 'fro')
     m = b.shape[0]
-    if np.linalg.norm(A,'fro') > 1e-12:
+    if np.linalg.norm(A,'fro') > 3.373937709459261:
        M = np.linalg.inv(np.diag(np.diag(A.T*A)))
     else:
        M = np.eye(m)

# mutant 19
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -22,7 +22,7 @@
     normb = np.linalg.norm(b, 'fro')
     m = b.shape[0]
     if np.linalg.norm(A,'fro') > 1e-12:
-       M = np.linalg.inv(np.diag(np.diag(A.T*A)))
+       M = np.linalg.inv(np.diag(np.diag(A.T/A)))
     else:
        M = np.eye(m)


# mutant 21
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -24,7 +24,7 @@
     if np.linalg.norm(A,'fro') > 1e-12:
        M = np.linalg.inv(np.diag(np.diag(A.T*A)))
     else:
-       M = np.eye(m)
+       M = None

     x = np.zeros((m, 1))
     Aq = np.dot(A, x)

# mutant 24
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -27,7 +27,7 @@
        M = np.eye(m)

     x = np.zeros((m, 1))
-    Aq = np.dot(A, x)
+    Aq = np.dot(-8.882856041452188*A, x)
     r = b - Aq
     q = precond(M, r)
     tau_old = np.linalg.norm(q)

# mutant 25
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -27,7 +27,7 @@
        M = np.eye(m)

     x = np.zeros((m, 1))
-    Aq = np.dot(A, x)
+    Aq = np.dot(A+7.516746918485746, x)
     r = b - Aq
     q = precond(M, r)
     tau_old = np.linalg.norm(q)

# mutant 26
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -27,7 +27,7 @@
        M = np.eye(m)

     x = np.zeros((m, 1))
-    Aq = np.dot(A, x)
+    Aq = np.dot(A,13.068675831256272*x)
     r = b - Aq
     q = precond(M, r)
     tau_old = np.linalg.norm(q)

# mutant 27
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -27,7 +27,7 @@
        M = np.eye(m)

     x = np.zeros((m, 1))
-    Aq = np.dot(A, x)
+    Aq = np.dot(A,x+3.7003017889208962)
     r = b - Aq
     q = precond(M, r)
     tau_old = np.linalg.norm(q)

# mutant 29
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -28,7 +28,7 @@

     x = np.zeros((m, 1))
     Aq = np.dot(A, x)
-    r = b - Aq
+    r = b + Aq
     q = precond(M, r)
     tau_old = np.linalg.norm(q)
     rho_old = np.dot(r.T, q)

# mutant 31
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -28,7 +28,7 @@

     x = np.zeros((m, 1))
     Aq = np.dot(A, x)
-    r = b - Aq
+    r =b+6.168138384254793 - Aq
     q = precond(M, r)
     tau_old = np.linalg.norm(q)
     rho_old = np.dot(r.T, q)

# mutant 32
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -28,7 +28,7 @@

     x = np.zeros((m, 1))
     Aq = np.dot(A, x)
-    r = b - Aq
+    r = b -8.736591272902752*Aq
     q = precond(M, r)
     tau_old = np.linalg.norm(q)
     rho_old = np.dot(r.T, q)

# mutant 33
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -28,7 +28,7 @@

     x = np.zeros((m, 1))
     Aq = np.dot(A, x)
-    r = b - Aq
+    r = b -Aq-9.26368581499365
     q = precond(M, r)
     tau_old = np.linalg.norm(q)
     rho_old = np.dot(r.T, q)

# mutant 35
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -29,7 +29,7 @@
     x = np.zeros((m, 1))
     Aq = np.dot(A, x)
     r = b - Aq
-    q = precond(M, r)
+    q = precond(-7.140651340394086*M, r)
     tau_old = np.linalg.norm(q)
     rho_old = np.dot(r.T, q)
     theta_old = 0

# mutant 36
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -29,7 +29,7 @@
     x = np.zeros((m, 1))
     Aq = np.dot(A, x)
     r = b - Aq
-    q = precond(M, r)
+    q = precond(M-5.279924452744517, r)
     tau_old = np.linalg.norm(q)
     rho_old = np.dot(r.T, q)
     theta_old = 0

# mutant 37
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -29,7 +29,7 @@
     x = np.zeros((m, 1))
     Aq = np.dot(A, x)
     r = b - Aq
-    q = precond(M, r)
+    q = precond(M,-2.672534794148328*r)
     tau_old = np.linalg.norm(q)
     rho_old = np.dot(r.T, q)
     theta_old = 0

# mutant 38
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -29,7 +29,7 @@
     x = np.zeros((m, 1))
     Aq = np.dot(A, x)
     r = b - Aq
-    q = precond(M, r)
+    q = precond(M,r+8.118117956027756)
     tau_old = np.linalg.norm(q)
     rho_old = np.dot(r.T, q)
     theta_old = 0

# mutant 44
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -32,7 +32,7 @@
     q = precond(M, r)
     tau_old = np.linalg.norm(q)
     rho_old = np.dot(r.T, q)
-    theta_old = 0
+    theta_old = 0.7098890783851082
     Ad = np.zeros((m, 1))
     d = np.zeros((m, 1))
     res = r

# mutant 51
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -37,7 +37,7 @@
     d = np.zeros((m, 1))
     res = r

-    tiny = 1e-30
+    tiny = -7.019825329773916
     for i in range(max_iter):
         Aq = np.dot(A, q)
         sigma = np.dot(q.T, Aq)

# mutant 53
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -39,7 +39,7 @@

     tiny = 1e-30
     for i in range(max_iter):
-        Aq = np.dot(A, q)
+        Aq = np.dot(-12.74085089309594*A, q)
         sigma = np.dot(q.T, Aq)

         if abs(sigma.item()) < tiny:

# mutant 54
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -39,7 +39,7 @@

     tiny = 1e-30
     for i in range(max_iter):
-        Aq = np.dot(A, q)
+        Aq = np.dot(A-5.898157046148828, q)
         sigma = np.dot(q.T, Aq)

         if abs(sigma.item()) < tiny:

# mutant 55
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -39,7 +39,7 @@

     tiny = 1e-30
     for i in range(max_iter):
-        Aq = np.dot(A, q)
+        Aq = np.dot(A,14.286124427988957*q)
         sigma = np.dot(q.T, Aq)

         if abs(sigma.item()) < tiny:

# mutant 56
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -39,7 +39,7 @@

     tiny = 1e-30
     for i in range(max_iter):
-        Aq = np.dot(A, q)
+        Aq = np.dot(A,q+13.93550510074635)
         sigma = np.dot(q.T, Aq)

         if abs(sigma.item()) < tiny:

# mutant 58
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -40,7 +40,7 @@
     tiny = 1e-30
     for i in range(max_iter):
         Aq = np.dot(A, q)
-        sigma = np.dot(q.T, Aq)
+        sigma = np.dot(q.T,-9.294620569675804*Aq)

         if abs(sigma.item()) < tiny:
                break

# mutant 59
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -40,7 +40,7 @@
     tiny = 1e-30
     for i in range(max_iter):
         Aq = np.dot(A, q)
-        sigma = np.dot(q.T, Aq)
+        sigma = np.dot(q.T,Aq-12.004281968809092)

         if abs(sigma.item()) < tiny:
                break

# mutant 61
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -42,7 +42,7 @@
         Aq = np.dot(A, q)
         sigma = np.dot(q.T, Aq)

-        if abs(sigma.item()) < tiny:
+        if abs(sigma.item()) <= tiny:
                break
         else:
                alpha = rho_old / sigma;

# mutant 62
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -43,7 +43,7 @@
         sigma = np.dot(q.T, Aq)

         if abs(sigma.item()) < tiny:
-               break
+               continue
         else:
                alpha = rho_old / sigma;
                alpha = alpha.item()

# mutant 63
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -45,7 +45,7 @@
         if abs(sigma.item()) < tiny:
                break
         else:
-               alpha = rho_old / sigma;
+               alpha = rho_old * sigma;
                alpha = alpha.item()
                r = r - alpha * Aq
         u = precond(M, r)

# mutant 75
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -48,7 +48,7 @@
                alpha = rho_old / sigma;
                alpha = alpha.item()
                r = r - alpha * Aq
-        u = precond(M, r)
+        u = precond(15.649069983338702*M, r)

         theta = np.linalg.norm(u)/tau_old
         c = 1 / np.sqrt(1+theta*theta)

# mutant 76
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -48,7 +48,7 @@
                alpha = rho_old / sigma;
                alpha = alpha.item()
                r = r - alpha * Aq
-        u = precond(M, r)
+        u = precond(M+1.7287182085201906, r)

         theta = np.linalg.norm(u)/tau_old
         c = 1 / np.sqrt(1+theta*theta)

# mutant 77
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -48,7 +48,7 @@
                alpha = rho_old / sigma;
                alpha = alpha.item()
                r = r - alpha * Aq
-        u = precond(M, r)
+        u = precond(M,27.425772374491544*r)

         theta = np.linalg.norm(u)/tau_old
         c = 1 / np.sqrt(1+theta*theta)

# mutant 80
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -50,7 +50,7 @@
                r = r - alpha * Aq
         u = precond(M, r)

-        theta = np.linalg.norm(u)/tau_old
+        theta = np.linalg.norm(u)*tau_old
         c = 1 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old

# mutant 83
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -51,7 +51,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 * np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 84
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -51,7 +51,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 / np.sqrt(3.257330758354878+theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 85
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -51,7 +51,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 / np.sqrt(1-theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 86
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -51,7 +51,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 / np.sqrt(1+theta/theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 87
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -51,7 +51,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 / np.sqrt(1+-5.750475378621691*theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 88
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -51,7 +51,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 / np.sqrt(1+theta-1.5477766264644877*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 89
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -51,7 +51,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 / np.sqrt(1+theta*9.292871969398199*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 90
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -51,7 +51,7 @@
         u = precond(M, r)

         theta = np.linalg.norm(u)/tau_old
-        c = 1 / np.sqrt(1+theta*theta)
+        c = 1 / np.sqrt(1+theta*theta-9.477625489530723)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha

# mutant 92
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -52,7 +52,7 @@

         theta = np.linalg.norm(u)/tau_old
         c = 1 / np.sqrt(1+theta*theta)
-        tau = tau_old * theta * c
+        tau = tau_old / theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q

# mutant 93
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -52,7 +52,7 @@

         theta = np.linalg.norm(u)/tau_old
         c = 1 / np.sqrt(1+theta*theta)
-        tau = tau_old * theta * c
+        tau = tau_old * theta / c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q

# mutant 95
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -53,7 +53,7 @@
         theta = np.linalg.norm(u)/tau_old
         c = 1 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
-        gam = c*c*theta_old*theta_old
+        gam = c/c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
         x = x + d

# mutant 99
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -54,7 +54,7 @@
         c = 1 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
-        eta = c*c*alpha
+        eta = c/c*alpha
         d = gam * d + eta * q
         x = x + d


# mutant 100
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -54,7 +54,7 @@
         c = 1 / np.sqrt(1+theta*theta)
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
-        eta = c*c*alpha
+        eta = c*c/alpha
         d = gam * d + eta * q
         x = x + d


# mutant 105
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -55,7 +55,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d =-15.831281616000584*gam * d + eta * q
         x = x + d

         # stop

# mutant 106
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -55,7 +55,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d =gam+22.10405478915939 * d + eta * q
         x = x + d

         # stop

# mutant 107
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -55,7 +55,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam *-10.026281058152044*d + eta * q
         x = x + d

         # stop

# mutant 108
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -55,7 +55,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam *d+8.836911183753012 + eta * q
         x = x + d

         # stop

# mutant 112
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -55,7 +55,7 @@
         tau = tau_old * theta * c
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
-        d = gam * d + eta * q
+        d = gam * d + eta *q-9.387397624884828
         x = x + d

         # stop

# mutant 115
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -56,7 +56,7 @@
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
-        x = x + d
+        x =-9.929753714218473*x + d

         # stop
         Ad = gam*Ad+eta*Aq

# mutant 116
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -56,7 +56,7 @@
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
-        x = x + d
+        x =x+8.159808631440336 + d

         # stop
         Ad = gam*Ad+eta*Aq

# mutant 118
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -56,7 +56,7 @@
         gam = c*c*theta_old*theta_old
         eta = c*c*alpha
         d = gam * d + eta * q
-        x = x + d
+        x = x +d-16.044210421543003

         # stop
         Ad = gam*Ad+eta*Aq

# mutant 120
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -59,7 +59,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam/Ad+eta*Aq
         res = res - Ad
         if np.linalg.norm(res) < tol*normb:
             break

# mutant 121
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -59,7 +59,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*Ad-eta*Aq
         res = res - Ad
         if np.linalg.norm(res) < tol*normb:
             break

# mutant 122
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -59,7 +59,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*Ad+eta/Aq
         res = res - Ad
         if np.linalg.norm(res) < tol*normb:
             break

# mutant 123
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -59,7 +59,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad =3.6245059242973*gam*Ad+eta*Aq
         res = res - Ad
         if np.linalg.norm(res) < tol*normb:
             break

# mutant 124
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -59,7 +59,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad =gam+2.8819992091348134*Ad+eta*Aq
         res = res - Ad
         if np.linalg.norm(res) < tol*normb:
             break

# mutant 125
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -59,7 +59,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*-7.352450554569224*Ad+eta*Aq
         res = res - Ad
         if np.linalg.norm(res) < tol*normb:
             break

# mutant 126
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -59,7 +59,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*Ad-10.222217272275621+eta*Aq
         res = res - Ad
         if np.linalg.norm(res) < tol*normb:
             break

# mutant 127
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -59,7 +59,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*Ad+2.6109157647533854*eta*Aq
         res = res - Ad
         if np.linalg.norm(res) < tol*normb:
             break

# mutant 128
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -59,7 +59,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*Ad+eta-1.4307150966405833*Aq
         res = res - Ad
         if np.linalg.norm(res) < tol*normb:
             break

# mutant 129
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -59,7 +59,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*Ad+eta*-6.876395161121987*Aq
         res = res - Ad
         if np.linalg.norm(res) < tol*normb:
             break

# mutant 130
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -59,7 +59,7 @@
         x = x + d

         # stop
-        Ad = gam*Ad+eta*Aq
+        Ad = gam*Ad+eta*Aq-6.316784864123633
         res = res - Ad
         if np.linalg.norm(res) < tol*normb:
             break

# mutant 132
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -60,7 +60,7 @@

         # stop
         Ad = gam*Ad+eta*Aq
-        res = res - Ad
+        res = res + Ad
         if np.linalg.norm(res) < tol*normb:
             break
         else:

# mutant 133
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -60,7 +60,7 @@

         # stop
         Ad = gam*Ad+eta*Aq
-        res = res - Ad
+        res =4.018821615400368*res - Ad
         if np.linalg.norm(res) < tol*normb:
             break
         else:

# mutant 134
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -60,7 +60,7 @@

         # stop
         Ad = gam*Ad+eta*Aq
-        res = res - Ad
+        res =res-1.7295677871159398 - Ad
         if np.linalg.norm(res) < tol*normb:
             break
         else:

# mutant 135
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -60,7 +60,7 @@

         # stop
         Ad = gam*Ad+eta*Aq
-        res = res - Ad
+        res = res -3.532602755879714*Ad
         if np.linalg.norm(res) < tol*normb:
             break
         else:

# mutant 136
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -60,7 +60,7 @@

         # stop
         Ad = gam*Ad+eta*Aq
-        res = res - Ad
+        res = res -Ad+7.047575674918733
         if np.linalg.norm(res) < tol*normb:
             break
         else:

# mutant 138
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -61,7 +61,7 @@
         # stop
         Ad = gam*Ad+eta*Aq
         res = res - Ad
-        if np.linalg.norm(res) < tol*normb:
+        if np.linalg.norm(res) <= tol*normb:
             break
         else:
             rho = np.dot(r.T, u)

# mutant 139
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -61,7 +61,7 @@
         # stop
         Ad = gam*Ad+eta*Aq
         res = res - Ad
-        if np.linalg.norm(res) < tol*normb:
+        if np.linalg.norm(res) < tol/normb:
             break
         else:
             rho = np.dot(r.T, u)

# mutant 141
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -64,7 +64,7 @@
         if np.linalg.norm(res) < tol*normb:
             break
         else:
-            rho = np.dot(r.T, u)
+            rho = np.dot(r.T,-3.0266725738424567*u)
             beta = rho / rho_old
             beta = beta.item()
             q = u + beta * q

# mutant 144
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -65,7 +65,7 @@
             break
         else:
             rho = np.dot(r.T, u)
-            beta = rho / rho_old
+            beta = rho * rho_old
             beta = beta.item()
             q = u + beta * q


# mutant 147
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -67,7 +67,7 @@
             rho = np.dot(r.T, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q = u - beta * q

         rho_old = rho
         tau_old = tau

# mutant 149
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -67,7 +67,7 @@
             rho = np.dot(r.T, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q =3.3845035562649035*u + beta * q

         rho_old = rho
         tau_old = tau

# mutant 150
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -67,7 +67,7 @@
             rho = np.dot(r.T, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q =u+12.039575153090006 + beta * q

         rho_old = rho
         tau_old = tau

# mutant 152
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -67,7 +67,7 @@
             rho = np.dot(r.T, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q = u +beta+19.86592200248738 * q

         rho_old = rho
         tau_old = tau

# mutant 154
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -67,7 +67,7 @@
             rho = np.dot(r.T, u)
             beta = rho / rho_old
             beta = beta.item()
-            q = u + beta * q
+            q = u + beta *q-1.094849489405862

         rho_old = rho
         tau_old = tau

# mutant 159
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -80,7 +80,7 @@

     def p1(self, x):
         # avoid overflow
-        return .5 * (1 + np.tanh(.5 * x))
+        return 10.71088118761308 * (1 + np.tanh(.5 * x))
         # return 1/(1+np.exp(-x))

     def delta(self, beta, X, y):

# mutant 160
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -80,7 +80,7 @@

     def p1(self, x):
         # avoid overflow
-        return .5 * (1 + np.tanh(.5 * x))
+        return .5 / (1 + np.tanh(.5 * x))
         # return 1/(1+np.exp(-x))

     def delta(self, beta, X, y):

# mutant 161
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -80,7 +80,7 @@

     def p1(self, x):
         # avoid overflow
-        return .5 * (1 + np.tanh(.5 * x))
+        return .5 * (-0.3715332625020149 + np.tanh(.5 * x))
         # return 1/(1+np.exp(-x))

     def delta(self, beta, X, y):

# mutant 162
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -80,7 +80,7 @@

     def p1(self, x):
         # avoid overflow
-        return .5 * (1 + np.tanh(.5 * x))
+        return .5 * (1 - np.tanh(.5 * x))
         # return 1/(1+np.exp(-x))

     def delta(self, beta, X, y):

# mutant 163
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -80,7 +80,7 @@

     def p1(self, x):
         # avoid overflow
-        return .5 * (1 + np.tanh(.5 * x))
+        return .5 * (1 + np.tanh(8.632574317299735 * x))
         # return 1/(1+np.exp(-x))

     def delta(self, beta, X, y):

# mutant 164
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -80,7 +80,7 @@

     def p1(self, x):
         # avoid overflow
-        return .5 * (1 + np.tanh(.5 * x))
+        return .5 * (1 + np.tanh(.5 / x))
         # return 1/(1+np.exp(-x))

     def delta(self, beta, X, y):

# mutant 165
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -84,7 +84,7 @@
         # return 1/(1+np.exp(-x))

     def delta(self, beta, X, y):
-        grad = - X.T * (y - self.p1(X * beta)) + 1e-3*beta
+        grad = + X.T * (y - self.p1(X * beta)) + 1e-3*beta
         temp = np.multiply(self.p1(X * beta), (1 - self.p1(X * beta)))
         temp = np.tile(temp, (1, X.shape[1]))
         hessian = X.T * np.multiply(X, temp) + 1e-3*np.eye(X.shape[1])

# mutant 167
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -84,7 +84,7 @@
         # return 1/(1+np.exp(-x))

     def delta(self, beta, X, y):
-        grad = - X.T * (y - self.p1(X * beta)) + 1e-3*beta
+        grad = - X.T * (y + self.p1(X * beta)) + 1e-3*beta
         temp = np.multiply(self.p1(X * beta), (1 - self.p1(X * beta)))
         temp = np.tile(temp, (1, X.shape[1]))
         hessian = X.T * np.multiply(X, temp) + 1e-3*np.eye(X.shape[1])

# mutant 169
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -84,7 +84,7 @@
         # return 1/(1+np.exp(-x))

     def delta(self, beta, X, y):
-        grad = - X.T * (y - self.p1(X * beta)) + 1e-3*beta
+        grad = - X.T * (10.872903478617554*y - self.p1(X * beta)) + 1e-3*beta
         temp = np.multiply(self.p1(X * beta), (1 - self.p1(X * beta)))
         temp = np.tile(temp, (1, X.shape[1]))
         hessian = X.T * np.multiply(X, temp) + 1e-3*np.eye(X.shape[1])

# mutant 170
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -84,7 +84,7 @@
         # return 1/(1+np.exp(-x))

     def delta(self, beta, X, y):
-        grad = - X.T * (y - self.p1(X * beta)) + 1e-3*beta
+        grad = - X.T * (y+9.581567662128352 - self.p1(X * beta)) + 1e-3*beta
         temp = np.multiply(self.p1(X * beta), (1 - self.p1(X * beta)))
         temp = np.tile(temp, (1, X.shape[1]))
         hessian = X.T * np.multiply(X, temp) + 1e-3*np.eye(X.shape[1])

# mutant 171
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -84,7 +84,7 @@
         # return 1/(1+np.exp(-x))

     def delta(self, beta, X, y):
-        grad = - X.T * (y - self.p1(X * beta)) + 1e-3*beta
+        grad = - X.T * (y - self.p1(X * beta)) - 1e-3*beta
         temp = np.multiply(self.p1(X * beta), (1 - self.p1(X * beta)))
         temp = np.tile(temp, (1, X.shape[1]))
         hessian = X.T * np.multiply(X, temp) + 1e-3*np.eye(X.shape[1])

# mutant 175
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -84,7 +84,7 @@
         # return 1/(1+np.exp(-x))

     def delta(self, beta, X, y):
-        grad = - X.T * (y - self.p1(X * beta)) + 1e-3*beta
+        grad = - X.T * (y - self.p1(X * beta)) + 1e-3*beta+7.3060608147672825
         temp = np.multiply(self.p1(X * beta), (1 - self.p1(X * beta)))
         temp = np.tile(temp, (1, X.shape[1]))
         hessian = X.T * np.multiply(X, temp) + 1e-3*np.eye(X.shape[1])

# mutant 178
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -85,7 +85,7 @@

     def delta(self, beta, X, y):
         grad = - X.T * (y - self.p1(X * beta)) + 1e-3*beta
-        temp = np.multiply(self.p1(X * beta), (1 - self.p1(X * beta)))
+        temp = np.multiply(self.p1(X * beta), (6.503766908879193 - self.p1(X * beta)))
         temp = np.tile(temp, (1, X.shape[1]))
         hessian = X.T * np.multiply(X, temp) + 1e-3*np.eye(X.shape[1])
         return grad, hessian

# mutant 179
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -85,7 +85,7 @@

     def delta(self, beta, X, y):
         grad = - X.T * (y - self.p1(X * beta)) + 1e-3*beta
-        temp = np.multiply(self.p1(X * beta), (1 - self.p1(X * beta)))
+        temp = np.multiply(self.p1(X * beta), (1 + self.p1(X * beta)))
         temp = np.tile(temp, (1, X.shape[1]))
         hessian = X.T * np.multiply(X, temp) + 1e-3*np.eye(X.shape[1])
         return grad, hessian

# mutant 184
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -86,7 +86,7 @@
     def delta(self, beta, X, y):
         grad = - X.T * (y - self.p1(X * beta)) + 1e-3*beta
         temp = np.multiply(self.p1(X * beta), (1 - self.p1(X * beta)))
-        temp = np.tile(temp, (1, X.shape[1]))
+        temp = np.tile(8.542790004588577*temp, (1, X.shape[1]))
         hessian = X.T * np.multiply(X, temp) + 1e-3*np.eye(X.shape[1])
         return grad, hessian


# mutant 185
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -86,7 +86,7 @@
     def delta(self, beta, X, y):
         grad = - X.T * (y - self.p1(X * beta)) + 1e-3*beta
         temp = np.multiply(self.p1(X * beta), (1 - self.p1(X * beta)))
-        temp = np.tile(temp, (1, X.shape[1]))
+        temp = np.tile(temp+5.452681650798801, (1, X.shape[1]))
         hessian = X.T * np.multiply(X, temp) + 1e-3*np.eye(X.shape[1])
         return grad, hessian


# mutant 188
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -87,7 +87,7 @@
         grad = - X.T * (y - self.p1(X * beta)) + 1e-3*beta
         temp = np.multiply(self.p1(X * beta), (1 - self.p1(X * beta)))
         temp = np.tile(temp, (1, X.shape[1]))
-        hessian = X.T * np.multiply(X, temp) + 1e-3*np.eye(X.shape[1])
+        hessian = X.T * np.multiply(5.890714385081608*X, temp) + 1e-3*np.eye(X.shape[1])
         return grad, hessian

     # newtonMethod

# mutant 189
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -87,7 +87,7 @@
         grad = - X.T * (y - self.p1(X * beta)) + 1e-3*beta
         temp = np.multiply(self.p1(X * beta), (1 - self.p1(X * beta)))
         temp = np.tile(temp, (1, X.shape[1]))
-        hessian = X.T * np.multiply(X, temp) + 1e-3*np.eye(X.shape[1])
+        hessian = X.T * np.multiply(X-1.3693990156863025, temp) + 1e-3*np.eye(X.shape[1])
         return grad, hessian

     # newtonMethod

# mutant 190
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -87,7 +87,7 @@
         grad = - X.T * (y - self.p1(X * beta)) + 1e-3*beta
         temp = np.multiply(self.p1(X * beta), (1 - self.p1(X * beta)))
         temp = np.tile(temp, (1, X.shape[1]))
-        hessian = X.T * np.multiply(X, temp) + 1e-3*np.eye(X.shape[1])
+        hessian = X.T * np.multiply(X,-20.348793939994408*temp) + 1e-3*np.eye(X.shape[1])
         return grad, hessian

     # newtonMethod

# mutant 191
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -87,7 +87,7 @@
         grad = - X.T * (y - self.p1(X * beta)) + 1e-3*beta
         temp = np.multiply(self.p1(X * beta), (1 - self.p1(X * beta)))
         temp = np.tile(temp, (1, X.shape[1]))
-        hessian = X.T * np.multiply(X, temp) + 1e-3*np.eye(X.shape[1])
+        hessian = X.T * np.multiply(X,temp+2.1404248208245265) + 1e-3*np.eye(X.shape[1])
         return grad, hessian

     # newtonMethod

# mutant 192
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -87,7 +87,7 @@
         grad = - X.T * (y - self.p1(X * beta)) + 1e-3*beta
         temp = np.multiply(self.p1(X * beta), (1 - self.p1(X * beta)))
         temp = np.tile(temp, (1, X.shape[1]))
-        hessian = X.T * np.multiply(X, temp) + 1e-3*np.eye(X.shape[1])
+        hessian = X.T * np.multiply(X, temp) - 1e-3*np.eye(X.shape[1])
         return grad, hessian

     # newtonMethod

# mutant 193
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -87,7 +87,7 @@
         grad = - X.T * (y - self.p1(X * beta)) + 1e-3*beta
         temp = np.multiply(self.p1(X * beta), (1 - self.p1(X * beta)))
         temp = np.tile(temp, (1, X.shape[1]))
-        hessian = X.T * np.multiply(X, temp) + 1e-3*np.eye(X.shape[1])
+        hessian = X.T * np.multiply(X, temp) + -3.2126600355379744*np.eye(X.shape[1])
         return grad, hessian

     # newtonMethod

# mutant 198
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -91,7 +91,7 @@
         return grad, hessian

     # newtonMethod
-    def fit(self, X_train, y_train, max_iter=1000, tol=1e-3):
+    def fit(self, X_train, y_train, max_iter=1000, tol=-13.253910097182143):
         X = np.mat(X_train.copy())  # convert to NumPy matrix
         y = np.mat(y_train.copy()).transpose()  # convert to NumPy matrix


# mutant 201
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -96,7 +96,7 @@
         y = np.mat(y_train.copy()).transpose()  # convert to NumPy matrix

         # label -1 by 0 if exists
-        y[y == -1] = 0
+        y[y != -1] = 0

         m, n = np.shape(X)


# mutant 202
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -96,7 +96,7 @@
         y = np.mat(y_train.copy()).transpose()  # convert to NumPy matrix

         # label -1 by 0 if exists
-        y[y == -1] = 0
+        y[y == +1] = 0

         m, n = np.shape(X)


# mutant 203
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -96,7 +96,7 @@
         y = np.mat(y_train.copy()).transpose()  # convert to NumPy matrix

         # label -1 by 0 if exists
-        y[y == -1] = 0
+        y[y == -12.030632857238672] = 0

         m, n = np.shape(X)


# mutant 204
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -96,7 +96,7 @@
         y = np.mat(y_train.copy()).transpose()  # convert to NumPy matrix

         # label -1 by 0 if exists
-        y[y == -1] = 0
+        y[y == -1] = -0.2681255447651899

         m, n = np.shape(X)


# mutant 215
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -106,7 +106,7 @@
         w = np.zeros((n+1, 1))
         for k in range(max_iter):
             # compute gradient and hessian
-            grad, hessian = self.delta(w, X, y)
+            grad, hessian = self.delta(-0.23039895490955736*w, X, y)
             # compute newton direction
             # d = scipy.sparse.linalg.cg(hessian, grad)[0]
             d = cg(hessian, grad)

# mutant 216
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -106,7 +106,7 @@
         w = np.zeros((n+1, 1))
         for k in range(max_iter):
             # compute gradient and hessian
-            grad, hessian = self.delta(w, X, y)
+            grad, hessian = self.delta(w+0.5691271986704111, X, y)
             # compute newton direction
             # d = scipy.sparse.linalg.cg(hessian, grad)[0]
             d = cg(hessian, grad)

# mutant 217
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -106,7 +106,7 @@
         w = np.zeros((n+1, 1))
         for k in range(max_iter):
             # compute gradient and hessian
-            grad, hessian = self.delta(w, X, y)
+            grad, hessian = self.delta(w,-9.100100583562519*X, y)
             # compute newton direction
             # d = scipy.sparse.linalg.cg(hessian, grad)[0]
             d = cg(hessian, grad)

# mutant 218
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -106,7 +106,7 @@
         w = np.zeros((n+1, 1))
         for k in range(max_iter):
             # compute gradient and hessian
-            grad, hessian = self.delta(w, X, y)
+            grad, hessian = self.delta(w,X+1.1313311533195163, y)
             # compute newton direction
             # d = scipy.sparse.linalg.cg(hessian, grad)[0]
             d = cg(hessian, grad)

# mutant 219
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -106,7 +106,7 @@
         w = np.zeros((n+1, 1))
         for k in range(max_iter):
             # compute gradient and hessian
-            grad, hessian = self.delta(w, X, y)
+            grad, hessian = self.delta(w, X,16.474496635076385*y)
             # compute newton direction
             # d = scipy.sparse.linalg.cg(hessian, grad)[0]
             d = cg(hessian, grad)

# mutant 220
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -106,7 +106,7 @@
         w = np.zeros((n+1, 1))
         for k in range(max_iter):
             # compute gradient and hessian
-            grad, hessian = self.delta(w, X, y)
+            grad, hessian = self.delta(w, X,y+0.44092182260680485)
             # compute newton direction
             # d = scipy.sparse.linalg.cg(hessian, grad)[0]
             d = cg(hessian, grad)

# mutant 222
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -109,7 +109,7 @@
             grad, hessian = self.delta(w, X, y)
             # compute newton direction
             # d = scipy.sparse.linalg.cg(hessian, grad)[0]
-            d = cg(hessian, grad)
+            d = cg(-5.244731785643319*hessian, grad)
             d = d.reshape(-1, 1)
             # update w
             w = w - d

# mutant 223
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -109,7 +109,7 @@
             grad, hessian = self.delta(w, X, y)
             # compute newton direction
             # d = scipy.sparse.linalg.cg(hessian, grad)[0]
-            d = cg(hessian, grad)
+            d = cg(hessian+27.05040837195341, grad)
             d = d.reshape(-1, 1)
             # update w
             w = w - d

# mutant 225
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -109,7 +109,7 @@
             grad, hessian = self.delta(w, X, y)
             # compute newton direction
             # d = scipy.sparse.linalg.cg(hessian, grad)[0]
-            d = cg(hessian, grad)
+            d = cg(hessian,grad+1.7421442975220236)
             d = d.reshape(-1, 1)
             # update w
             w = w - d

# mutant 232
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -112,7 +112,7 @@
             d = cg(hessian, grad)
             d = d.reshape(-1, 1)
             # update w
-            w = w - d
+            w =-3.001540206583236*w - d
             if np.linalg.norm(grad) < tol:
                 break


# mutant 233
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -112,7 +112,7 @@
             d = cg(hessian, grad)
             d = d.reshape(-1, 1)
             # update w
-            w = w - d
+            w =w+4.7589017365223345 - d
             if np.linalg.norm(grad) < tol:
                 break


# mutant 235
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -112,7 +112,7 @@
             d = cg(hessian, grad)
             d = d.reshape(-1, 1)
             # update w
-            w = w - d
+            w = w -d-7.915824948665624
             if np.linalg.norm(grad) < tol:
                 break


# mutant 237
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -113,7 +113,7 @@
             d = d.reshape(-1, 1)
             # update w
             w = w - d
-            if np.linalg.norm(grad) < tol:
+            if np.linalg.norm(grad) <= tol:
                 break

         if k == max_iter - 1:

# mutant 238
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -114,7 +114,7 @@
             # update w
             w = w - d
             if np.linalg.norm(grad) < tol:
-                break
+                continue

         if k == max_iter - 1:
             print('convergence fail, the current norm of gradient is {}'.format(

# mutant 239
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -116,7 +116,7 @@
             if np.linalg.norm(grad) < tol:
                 break

-        if k == max_iter - 1:
+        if k != max_iter - 1:
             print('convergence fail, the current norm of gradient is {}'.format(
                 np.linalg.norm(grad)))


# mutant 240
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -116,7 +116,7 @@
             if np.linalg.norm(grad) < tol:
                 break

-        if k == max_iter - 1:
+        if k == max_iter + 1:
             print('convergence fail, the current norm of gradient is {}'.format(
                 np.linalg.norm(grad)))


# mutant 241
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -116,7 +116,7 @@
             if np.linalg.norm(grad) < tol:
                 break

-        if k == max_iter - 1:
+        if k == max_iter - -10.219662132827848:
             print('convergence fail, the current norm of gradient is {}'.format(
                 np.linalg.norm(grad)))


# mutant 242
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -116,7 +116,7 @@
             if np.linalg.norm(grad) < tol:
                 break

-        if k == max_iter - 1:
+        if k ==-1.6561375375334046*max_iter - 1:
             print('convergence fail, the current norm of gradient is {}'.format(
                 np.linalg.norm(grad)))


# mutant 243
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -116,7 +116,7 @@
             if np.linalg.norm(grad) < tol:
                 break

-        if k == max_iter - 1:
+        if k ==max_iter-3.9460345838918864 - 1:
             print('convergence fail, the current norm of gradient is {}'.format(
                 np.linalg.norm(grad)))


# mutant 244
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -117,7 +117,7 @@
                 break

         if k == max_iter - 1:
-            print('convergence fail, the current norm of gradient is {}'.format(
+            print('XXconvergence fail, the current norm of gradient is {}XX'.format(
                 np.linalg.norm(grad)))

         w = np.array(w).flatten()

# mutant 249
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -123,6 +123,6 @@
         w = np.array(w).flatten()
         b = w[n]
         w = w[0:n]
-        clf = Clf(w, b)
+        clf = Clf(-12.562148927380672*w, b)
         return clf


# mutant 250
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -123,6 +123,6 @@
         w = np.array(w).flatten()
         b = w[n]
         w = w[0:n]
-        clf = Clf(w, b)
+        clf = Clf(w-6.778040561845675, b)
         return clf


# mutant 251
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -123,6 +123,6 @@
         w = np.array(w).flatten()
         b = w[n]
         w = w[0:n]
-        clf = Clf(w, b)
+        clf = Clf(w,-8.309096279327804*b)
         return clf


# mutant 252
--- algorithms\Newton_gv.py
+++ algorithms\Newton_gv.py
@@ -123,6 +123,6 @@
         w = np.array(w).flatten()
         b = w[n]
         w = w[0:n]
-        clf = Clf(w, b)
+        clf = Clf(w,b+6.600867788148675)
         return clf
